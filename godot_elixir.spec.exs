# Copyright (c) 2023-present K. S. Ernest (iFire) Lee
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

spec AABB.abs() :: {:ok :: label, state :: State, AABB}
spec AABB.encloses(with :: AABB, ) :: {:ok :: label, state :: State, bool}
spec AABB.expand(to_point :: Vector3, ) :: {:ok :: label, state :: State, AABB}
spec AABB.get_center() :: {:ok :: label, state :: State, Vector3}
spec AABB.get_endpoint(idx :: int, ) :: {:ok :: label, state :: State, Vector3}
spec AABB.get_longest_axis() :: {:ok :: label, state :: State, Vector3}
spec AABB.get_longest_axis_index() :: {:ok :: label, state :: State, int}
spec AABB.get_longest_axis_size() :: {:ok :: label, state :: State, float}
spec AABB.get_shortest_axis() :: {:ok :: label, state :: State, Vector3}
spec AABB.get_shortest_axis_index() :: {:ok :: label, state :: State, int}
spec AABB.get_shortest_axis_size() :: {:ok :: label, state :: State, float}
spec AABB.get_support(dir :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec AABB.get_volume() :: {:ok :: label, state :: State, float}
spec AABB.grow(by :: float, ) :: {:ok :: label, state :: State, AABB}
spec AABB.has_point(point :: Vector3, ) :: {:ok :: label, state :: State, bool}
spec AABB.has_surface() :: {:ok :: label, state :: State, bool}
spec AABB.has_volume() :: {:ok :: label, state :: State, bool}
spec AABB.intersection(with :: AABB, ) :: {:ok :: label, state :: State, AABB}
spec AABB.intersects(with :: AABB, ) :: {:ok :: label, state :: State, bool}
spec AABB.intersects_plane(plane :: Plane, ) :: {:ok :: label, state :: State, bool}
spec AABB.intersects_ray(from :: Vector3, dir :: Vector3, ) :: {:ok :: label, state :: State, Variant}
spec AABB.intersects_segment(from :: Vector3, to :: Vector3, ) :: {:ok :: label, state :: State, Variant}
spec AABB.is_equal_approx(aabb :: AABB, ) :: {:ok :: label, state :: State, bool}
spec AABB.is_finite() :: {:ok :: label, state :: State, bool}
spec AABB.merge(with :: AABB, ) :: {:ok :: label, state :: State, AABB}
spec AESContext.finish() :: {:ok :: label, state :: State, }
spec AESContext.get_iv_state() :: {:ok :: label, state :: State, }
spec AESContext.start(mode :: enum::AESContext.Mode, key :: PackedByteArray, iv :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec AESContext.update(src :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec AStar2D._compute_cost(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D._estimate_cost(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.add_point(id :: int, position :: Vector2, weight_scale :: float, ) :: {:ok :: label, state :: State, }
spec AStar2D.are_points_connected(id :: int, to_id :: int, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec AStar2D.clear() :: {:ok :: label, state :: State, }
spec AStar2D.connect_points(id :: int, to_id :: int, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec AStar2D.disconnect_points(id :: int, to_id :: int, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_available_point_id() :: {:ok :: label, state :: State, }
spec AStar2D.get_closest_point(to_position :: Vector2, include_disabled :: bool, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_closest_position_in_segment(to_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_id_path(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_point_capacity() :: {:ok :: label, state :: State, }
spec AStar2D.get_point_connections(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_point_count() :: {:ok :: label, state :: State, }
spec AStar2D.get_point_ids() :: {:ok :: label, state :: State, }
spec AStar2D.get_point_path(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_point_position(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.get_point_weight_scale(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.has_point(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.is_point_disabled(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.remove_point(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.reserve_space(num_nodes :: int, ) :: {:ok :: label, state :: State, }
spec AStar2D.set_point_disabled(id :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec AStar2D.set_point_position(id :: int, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec AStar2D.set_point_weight_scale(id :: int, weight_scale :: float, ) :: {:ok :: label, state :: State, }
spec AStar3D._compute_cost(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D._estimate_cost(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.add_point(id :: int, position :: Vector3, weight_scale :: float, ) :: {:ok :: label, state :: State, }
spec AStar3D.are_points_connected(id :: int, to_id :: int, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec AStar3D.clear() :: {:ok :: label, state :: State, }
spec AStar3D.connect_points(id :: int, to_id :: int, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec AStar3D.disconnect_points(id :: int, to_id :: int, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_available_point_id() :: {:ok :: label, state :: State, }
spec AStar3D.get_closest_point(to_position :: Vector3, include_disabled :: bool, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_closest_position_in_segment(to_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_id_path(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_point_capacity() :: {:ok :: label, state :: State, }
spec AStar3D.get_point_connections(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_point_count() :: {:ok :: label, state :: State, }
spec AStar3D.get_point_ids() :: {:ok :: label, state :: State, }
spec AStar3D.get_point_path(from_id :: int, to_id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_point_position(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.get_point_weight_scale(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.has_point(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.is_point_disabled(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.remove_point(id :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.reserve_space(num_nodes :: int, ) :: {:ok :: label, state :: State, }
spec AStar3D.set_point_disabled(id :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec AStar3D.set_point_position(id :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec AStar3D.set_point_weight_scale(id :: int, weight_scale :: float, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D._compute_cost(from_id :: Vector2i, to_id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D._estimate_cost(from_id :: Vector2i, to_id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.clear() :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_cell_size() :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_default_compute_heuristic() :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_default_estimate_heuristic() :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_diagonal_mode() :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_id_path(from_id :: Vector2i, to_id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_offset() :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_point_path(from_id :: Vector2i, to_id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_point_position(id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_point_weight_scale(id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.get_size() :: {:ok :: label, state :: State, }
spec AStarGrid2D.is_dirty() :: {:ok :: label, state :: State, }
spec AStarGrid2D.is_in_bounds(x :: int, y :: int, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.is_in_boundsv(id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.is_jumping_enabled() :: {:ok :: label, state :: State, }
spec AStarGrid2D.is_point_solid(id :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_cell_size(cell_size :: Vector2, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_default_compute_heuristic(heuristic :: enum::AStarGrid2D.Heuristic, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_default_estimate_heuristic(heuristic :: enum::AStarGrid2D.Heuristic, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_diagonal_mode(mode :: enum::AStarGrid2D.DiagonalMode, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_jumping_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_point_solid(id :: Vector2i, solid :: bool, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_point_weight_scale(id :: Vector2i, weight_scale :: float, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.set_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec AStarGrid2D.update() :: {:ok :: label, state :: State, }
spec AcceptDialog.add_button(text :: String, right :: bool, action :: String, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.add_cancel_button(name :: String, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.get_close_on_escape() :: {:ok :: label, state :: State, }
spec AcceptDialog.get_hide_on_ok() :: {:ok :: label, state :: State, }
spec AcceptDialog.get_label() :: {:ok :: label, state :: State, }
spec AcceptDialog.get_ok_button() :: {:ok :: label, state :: State, }
spec AcceptDialog.get_ok_button_text() :: {:ok :: label, state :: State, }
spec AcceptDialog.get_text() :: {:ok :: label, state :: State, }
spec AcceptDialog.has_autowrap() :: {:ok :: label, state :: State, }
spec AcceptDialog.register_text_enter(line_edit :: Control, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.remove_button(button :: Control, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.set_autowrap(autowrap :: bool, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.set_close_on_escape(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.set_hide_on_ok(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.set_ok_button_text(text :: String, ) :: {:ok :: label, state :: State, }
spec AcceptDialog.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec AnimatableBody2D.is_sync_to_physics_enabled() :: {:ok :: label, state :: State, }
spec AnimatableBody2D.set_sync_to_physics(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatableBody3D.is_sync_to_physics_enabled() :: {:ok :: label, state :: State, }
spec AnimatableBody3D.set_sync_to_physics(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_animation() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_autoplay() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_frame() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_frame_progress() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_offset() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_playing_speed() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_speed_scale() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.get_sprite_frames() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.is_centered() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.is_flipped_h() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.is_flipped_v() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.is_playing() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.pause() :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.play(name :: StringName, custom_speed :: float, from_end :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.play_backwards(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_autoplay(name :: String, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_centered(centered :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_flip_h(flip_h :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_flip_v(flip_v :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_frame(frame :: int, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_frame_and_progress(frame :: int, progress :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_frame_progress(progress :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_speed_scale(speed_scale :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.set_sprite_frames(sprite_frames :: SpriteFrames, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite2D.stop() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_animation() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_autoplay() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_frame() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_frame_progress() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_playing_speed() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_speed_scale() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.get_sprite_frames() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.is_playing() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.pause() :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.play(name :: StringName, custom_speed :: float, from_end :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.play_backwards(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_autoplay(name :: String, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_frame(frame :: int, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_frame_and_progress(frame :: int, progress :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_frame_progress(progress :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_speed_scale(speed_scale :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.set_sprite_frames(sprite_frames :: SpriteFrames, ) :: {:ok :: label, state :: State, }
spec AnimatedSprite3D.stop() :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_current_frame() :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_frame_duration(frame :: int, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_frame_texture(frame :: int, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_frames() :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_one_shot() :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_pause() :: {:ok :: label, state :: State, }
spec AnimatedTexture.get_speed_scale() :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_current_frame(frame :: int, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_frame_duration(frame :: int, duration :: float, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_frame_texture(frame :: int, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_frames(frames :: int, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_one_shot(one_shot :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_pause(pause :: bool, ) :: {:ok :: label, state :: State, }
spec AnimatedTexture.set_speed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec Animation.add_track(type :: enum::Animation.TrackType, at_position :: int, ) :: {:ok :: label, state :: State, }
spec Animation.animation_track_get_key_animation(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.animation_track_insert_key(track_idx :: int, time :: float, animation :: StringName, ) :: {:ok :: label, state :: State, }
spec Animation.animation_track_set_key_animation(track_idx :: int, key_idx :: int, animation :: StringName, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_get_key_end_offset(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_get_key_start_offset(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_get_key_stream(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_insert_key(track_idx :: int, time :: float, stream :: Resource, start_offset :: float, end_offset :: float, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_is_use_blend(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_set_key_end_offset(track_idx :: int, key_idx :: int, offset :: float, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_set_key_start_offset(track_idx :: int, key_idx :: int, offset :: float, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_set_key_stream(track_idx :: int, key_idx :: int, stream :: Resource, ) :: {:ok :: label, state :: State, }
spec Animation.audio_track_set_use_blend(track_idx :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_get_key_in_handle(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_get_key_out_handle(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_get_key_value(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_insert_key(track_idx :: int, time :: float, value :: float, in_handle :: Vector2, out_handle :: Vector2, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_interpolate(track_idx :: int, time :: float, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_set_key_in_handle(track_idx :: int, key_idx :: int, in_handle :: Vector2, balanced_value_time_ratio :: float, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_set_key_out_handle(track_idx :: int, key_idx :: int, out_handle :: Vector2, balanced_value_time_ratio :: float, ) :: {:ok :: label, state :: State, }
spec Animation.bezier_track_set_key_value(track_idx :: int, key_idx :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec Animation.blend_shape_track_insert_key(track_idx :: int, time :: float, amount :: float, ) :: {:ok :: label, state :: State, }
spec Animation.clear() :: {:ok :: label, state :: State, }
spec Animation.compress(page_size :: int, fps :: int, split_tolerance :: float, ) :: {:ok :: label, state :: State, }
spec Animation.copy_track(track_idx :: int, to_animation :: Animation, ) :: {:ok :: label, state :: State, }
spec Animation.find_track(path :: NodePath, type :: enum::Animation.TrackType, ) :: {:ok :: label, state :: State, }
spec Animation.get_length() :: {:ok :: label, state :: State, }
spec Animation.get_loop_mode() :: {:ok :: label, state :: State, }
spec Animation.get_step() :: {:ok :: label, state :: State, }
spec Animation.get_track_count() :: {:ok :: label, state :: State, }
spec Animation.method_track_get_name(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.method_track_get_params(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.position_track_insert_key(track_idx :: int, time :: float, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Animation.remove_track(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.rotation_track_insert_key(track_idx :: int, time :: float, rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec Animation.scale_track_insert_key(track_idx :: int, time :: float, scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec Animation.set_length(time_sec :: float, ) :: {:ok :: label, state :: State, }
spec Animation.set_loop_mode(loop_mode :: enum::Animation.LoopMode, ) :: {:ok :: label, state :: State, }
spec Animation.set_step(size_sec :: float, ) :: {:ok :: label, state :: State, }
spec Animation.track_find_key(track_idx :: int, time :: float, find_mode :: enum::Animation.FindMode, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_interpolation_loop_wrap(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_interpolation_type(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_key_count(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_key_time(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_key_transition(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_key_value(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_path(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_get_type(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_insert_key(track_idx :: int, time :: float, key :: Variant, transition :: float, ) :: {:ok :: label, state :: State, }
spec Animation.track_is_compressed(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_is_enabled(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_is_imported(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_move_down(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_move_to(track_idx :: int, to_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_move_up(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_remove_key(track_idx :: int, key_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.track_remove_key_at_time(track_idx :: int, time :: float, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_enabled(track_idx :: int, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_imported(track_idx :: int, imported :: bool, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_interpolation_loop_wrap(track_idx :: int, interpolation :: bool, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_interpolation_type(track_idx :: int, interpolation :: enum::Animation.InterpolationType, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_key_time(track_idx :: int, key_idx :: int, time :: float, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_key_transition(track_idx :: int, key_idx :: int, transition :: float, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_key_value(track_idx :: int, key :: int, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Animation.track_set_path(track_idx :: int, path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Animation.track_swap(track_idx :: int, with_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.value_track_get_update_mode(track_idx :: int, ) :: {:ok :: label, state :: State, }
spec Animation.value_track_interpolate(track_idx :: int, time_sec :: float, ) :: {:ok :: label, state :: State, }
spec Animation.value_track_set_update_mode(track_idx :: int, mode :: enum::Animation.UpdateMode, ) :: {:ok :: label, state :: State, }
spec AnimationLibrary.add_animation(name :: StringName, animation :: Animation, ) :: {:ok :: label, state :: State, }
spec AnimationLibrary.get_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationLibrary.get_animation_list() :: {:ok :: label, state :: State, }
spec AnimationLibrary.has_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationLibrary.remove_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationLibrary.rename_animation(name :: StringName, newname :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNode._get_caption() :: {:ok :: label, state :: State, }
spec AnimationNode._get_child_by_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNode._get_child_nodes() :: {:ok :: label, state :: State, }
spec AnimationNode._get_parameter_default_value(parameter :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNode._get_parameter_list() :: {:ok :: label, state :: State, }
spec AnimationNode._has_filter() :: {:ok :: label, state :: State, }
spec AnimationNode._is_parameter_read_only(parameter :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNode._process(time :: float, seek :: bool, is_external_seeking :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNode.add_input(name :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNode.blend_animation(animation :: StringName, time :: float, delta :: float, seeked :: bool, is_external_seeking :: bool, blend :: float, looped_flag :: enum::Animation.LoopedFlag, ) :: {:ok :: label, state :: State, }
spec AnimationNode.blend_input(input_index :: int, time :: float, seek :: bool, is_external_seeking :: bool, blend :: float, filter :: enum::AnimationNode.FilterAction, sync :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNode.blend_node(name :: StringName, node :: AnimationNode, time :: float, seek :: bool, is_external_seeking :: bool, blend :: float, filter :: enum::AnimationNode.FilterAction, sync :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNode.find_input(name :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNode.get_input_count() :: {:ok :: label, state :: State, }
spec AnimationNode.get_input_name(input :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNode.get_parameter(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNode.is_filter_enabled() :: {:ok :: label, state :: State, }
spec AnimationNode.is_path_filtered(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec AnimationNode.remove_input(index :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNode.set_filter_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNode.set_filter_path(path :: NodePath, enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNode.set_input_name(input :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNode.set_parameter(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec AnimationNodeAnimation.get_animation() :: {:ok :: label, state :: State, }
spec AnimationNodeAnimation.get_play_mode() :: {:ok :: label, state :: State, }
spec AnimationNodeAnimation.set_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeAnimation.set_play_mode(mode :: enum::AnimationNodeAnimation.PlayMode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.add_blend_point(node :: AnimationRootNode, pos :: float, at_index :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_blend_mode() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_blend_point_count() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_blend_point_node(point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_blend_point_position(point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_max_space() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_min_space() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_snap() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.get_value_label() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.is_using_sync() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.remove_blend_point(point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_blend_mode(mode :: enum::AnimationNodeBlendSpace1D.BlendMode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_blend_point_node(point :: int, node :: AnimationRootNode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_blend_point_position(point :: int, pos :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_max_space(max_space :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_min_space(min_space :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_snap(snap :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_use_sync(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace1D.set_value_label(text :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.add_blend_point(node :: AnimationRootNode, pos :: Vector2, at_index :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.add_triangle(x :: int, y :: int, z :: int, at_index :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_auto_triangles() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_blend_mode() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_blend_point_count() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_blend_point_node(point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_blend_point_position(point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_max_space() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_min_space() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_snap() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_triangle_count() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_triangle_point(triangle :: int, point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_x_label() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.get_y_label() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.is_using_sync() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.remove_blend_point(point :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.remove_triangle(triangle :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_auto_triangles(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_blend_mode(mode :: enum::AnimationNodeBlendSpace2D.BlendMode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_blend_point_node(point :: int, node :: AnimationRootNode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_blend_point_position(point :: int, pos :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_max_space(max_space :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_min_space(min_space :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_snap(snap :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_use_sync(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_x_label(text :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendSpace2D.set_y_label(text :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.add_node(name :: StringName, node :: AnimationNode, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.connect_node(input_node :: StringName, input_index :: int, output_node :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.disconnect_node(input_node :: StringName, input_index :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.get_graph_offset() :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.get_node(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.get_node_position(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.has_node(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.remove_node(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.rename_node(name :: StringName, new_name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.set_graph_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeBlendTree.set_node_position(name :: StringName, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.get_autorestart_delay() :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.get_autorestart_random_delay() :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.get_fadein_time() :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.get_fadeout_time() :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.get_mix_mode() :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.has_autorestart() :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.set_autorestart(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.set_autorestart_delay(enable :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.set_autorestart_random_delay(enable :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.set_fadein_time(time :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.set_fadeout_time(time :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeOneShot.set_mix_mode(mode :: enum::AnimationNodeOneShot.MixMode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.add_node(name :: StringName, node :: AnimationNode, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.add_transition(from :: StringName, to :: StringName, transition :: AnimationNodeStateMachineTransition, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_graph_offset() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_node(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_node_name(node :: AnimationNode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_node_position(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_transition(idx :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_transition_count() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_transition_from(idx :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.get_transition_to(idx :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.has_node(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.has_transition(from :: StringName, to :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.is_allow_transition_to_self() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.remove_node(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.remove_transition(from :: StringName, to :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.remove_transition_by_index(idx :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.rename_node(name :: StringName, new_name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.replace_node(name :: StringName, node :: AnimationNode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.set_allow_transition_to_self(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.set_graph_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachine.set_node_position(name :: StringName, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.get_current_length() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.get_current_node() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.get_current_play_position() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.get_fading_from_node() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.get_travel_path() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.is_playing() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.next() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.start(node :: StringName, reset :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.stop() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachinePlayback.travel(to_node :: StringName, reset_on_teleport :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_advance_condition() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_advance_expression() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_advance_mode() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_priority() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_switch_mode() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_xfade_curve() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.get_xfade_time() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.is_reset() :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_advance_condition(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_advance_expression(text :: String, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_advance_mode(mode :: enum::AnimationNodeStateMachineTransition.AdvanceMode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_reset(reset :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_switch_mode(mode :: enum::AnimationNodeStateMachineTransition.SwitchMode, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_xfade_curve(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec AnimationNodeStateMachineTransition.set_xfade_time(secs :: float, ) :: {:ok :: label, state :: State, }
spec AnimationNodeSync.is_using_sync() :: {:ok :: label, state :: State, }
spec AnimationNodeSync.set_use_sync(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.get_xfade_curve() :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.get_xfade_time() :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.is_allow_transition_to_self() :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.is_input_reset(input :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.is_input_set_as_auto_advance(input :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.set_allow_transition_to_self(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.set_input_as_auto_advance(input :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.set_input_count(input_count :: int, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.set_input_reset(input :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.set_xfade_curve(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec AnimationNodeTransition.set_xfade_time(time :: float, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer._post_process_key_value(animation :: Animation, track :: int, value :: Variant, object :: Object, object_idx :: int, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.add_animation_library(name :: StringName, library :: AnimationLibrary, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.advance(delta :: float, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.animation_get_next(anim_from :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.animation_set_next(anim_from :: StringName, anim_to :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.clear_caches() :: {:ok :: label, state :: State, }
spec AnimationPlayer.clear_queue() :: {:ok :: label, state :: State, }
spec AnimationPlayer.find_animation(animation :: Animation, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.find_animation_library(animation :: Animation, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_animation_library(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_animation_library_list() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_animation_list() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_assigned_animation() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_audio_max_polyphony() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_autoplay() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_blend_time(anim_from :: StringName, anim_to :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_current_animation() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_current_animation_length() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_current_animation_position() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_default_blend_time() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_method_call_mode() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_playing_speed() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_process_callback() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_queue() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_root() :: {:ok :: label, state :: State, }
spec AnimationPlayer.get_speed_scale() :: {:ok :: label, state :: State, }
spec AnimationPlayer.has_animation(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.has_animation_library(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.is_active() :: {:ok :: label, state :: State, }
spec AnimationPlayer.is_movie_quit_on_finish_enabled() :: {:ok :: label, state :: State, }
spec AnimationPlayer.is_playing() :: {:ok :: label, state :: State, }
spec AnimationPlayer.is_reset_on_save_enabled() :: {:ok :: label, state :: State, }
spec AnimationPlayer.pause() :: {:ok :: label, state :: State, }
spec AnimationPlayer.play(name :: StringName, custom_blend :: float, custom_speed :: float, from_end :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.play_backwards(name :: StringName, custom_blend :: float, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.queue(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.remove_animation_library(name :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.rename_animation_library(name :: StringName, newname :: StringName, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.seek(seconds :: float, update :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_assigned_animation(anim :: String, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_audio_max_polyphony(max_polyphony :: int, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_autoplay(name :: String, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_blend_time(anim_from :: StringName, anim_to :: StringName, sec :: float, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_current_animation(anim :: String, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_default_blend_time(sec :: float, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_method_call_mode(mode :: enum::AnimationPlayer.AnimationMethodCallMode, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_movie_quit_on_finish_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_process_callback(mode :: enum::AnimationPlayer.AnimationProcessCallback, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_reset_on_save_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_root(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.set_speed_scale(speed :: float, ) :: {:ok :: label, state :: State, }
spec AnimationPlayer.stop(keep_state :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationTree._post_process_key_value(animation :: Animation, track :: int, value :: Variant, object :: Object, object_idx :: int, ) :: {:ok :: label, state :: State, }
spec AnimationTree.advance(delta :: float, ) :: {:ok :: label, state :: State, }
spec AnimationTree.get_advance_expression_base_node() :: {:ok :: label, state :: State, }
spec AnimationTree.get_animation_player() :: {:ok :: label, state :: State, }
spec AnimationTree.get_audio_max_polyphony() :: {:ok :: label, state :: State, }
spec AnimationTree.get_process_callback() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_position() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_position_accumulator() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_rotation() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_rotation_accumulator() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_scale() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_scale_accumulator() :: {:ok :: label, state :: State, }
spec AnimationTree.get_root_motion_track() :: {:ok :: label, state :: State, }
spec AnimationTree.get_tree_root() :: {:ok :: label, state :: State, }
spec AnimationTree.is_active() :: {:ok :: label, state :: State, }
spec AnimationTree.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec AnimationTree.set_advance_expression_base_node(node :: NodePath, ) :: {:ok :: label, state :: State, }
spec AnimationTree.set_animation_player(root :: NodePath, ) :: {:ok :: label, state :: State, }
spec AnimationTree.set_audio_max_polyphony(max_polyphony :: int, ) :: {:ok :: label, state :: State, }
spec AnimationTree.set_process_callback(mode :: enum::AnimationTree.AnimationProcessCallback, ) :: {:ok :: label, state :: State, }
spec AnimationTree.set_root_motion_track(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec AnimationTree.set_tree_root(root :: AnimationNode, ) :: {:ok :: label, state :: State, }
spec Area2D.get_angular_damp() :: {:ok :: label, state :: State, }
spec Area2D.get_angular_damp_space_override_mode() :: {:ok :: label, state :: State, }
spec Area2D.get_audio_bus_name() :: {:ok :: label, state :: State, }
spec Area2D.get_gravity() :: {:ok :: label, state :: State, }
spec Area2D.get_gravity_direction() :: {:ok :: label, state :: State, }
spec Area2D.get_gravity_point_center() :: {:ok :: label, state :: State, }
spec Area2D.get_gravity_point_unit_distance() :: {:ok :: label, state :: State, }
spec Area2D.get_gravity_space_override_mode() :: {:ok :: label, state :: State, }
spec Area2D.get_linear_damp() :: {:ok :: label, state :: State, }
spec Area2D.get_linear_damp_space_override_mode() :: {:ok :: label, state :: State, }
spec Area2D.get_overlapping_areas() :: {:ok :: label, state :: State, }
spec Area2D.get_overlapping_bodies() :: {:ok :: label, state :: State, }
spec Area2D.get_priority() :: {:ok :: label, state :: State, }
spec Area2D.has_overlapping_areas() :: {:ok :: label, state :: State, }
spec Area2D.has_overlapping_bodies() :: {:ok :: label, state :: State, }
spec Area2D.is_gravity_a_point() :: {:ok :: label, state :: State, }
spec Area2D.is_monitorable() :: {:ok :: label, state :: State, }
spec Area2D.is_monitoring() :: {:ok :: label, state :: State, }
spec Area2D.is_overriding_audio_bus() :: {:ok :: label, state :: State, }
spec Area2D.overlaps_area(area :: Node, ) :: {:ok :: label, state :: State, }
spec Area2D.overlaps_body(body :: Node, ) :: {:ok :: label, state :: State, }
spec Area2D.set_angular_damp(angular_damp :: float, ) :: {:ok :: label, state :: State, }
spec Area2D.set_angular_damp_space_override_mode(space_override_mode :: enum::Area2D.SpaceOverride, ) :: {:ok :: label, state :: State, }
spec Area2D.set_audio_bus_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Area2D.set_audio_bus_override(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area2D.set_gravity(gravity :: float, ) :: {:ok :: label, state :: State, }
spec Area2D.set_gravity_direction(direction :: Vector2, ) :: {:ok :: label, state :: State, }
spec Area2D.set_gravity_is_point(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area2D.set_gravity_point_center(center :: Vector2, ) :: {:ok :: label, state :: State, }
spec Area2D.set_gravity_point_unit_distance(distance_scale :: float, ) :: {:ok :: label, state :: State, }
spec Area2D.set_gravity_space_override_mode(space_override_mode :: enum::Area2D.SpaceOverride, ) :: {:ok :: label, state :: State, }
spec Area2D.set_linear_damp(linear_damp :: float, ) :: {:ok :: label, state :: State, }
spec Area2D.set_linear_damp_space_override_mode(space_override_mode :: enum::Area2D.SpaceOverride, ) :: {:ok :: label, state :: State, }
spec Area2D.set_monitorable(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area2D.set_monitoring(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area2D.set_priority(priority :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.get_angular_damp() :: {:ok :: label, state :: State, }
spec Area3D.get_angular_damp_space_override_mode() :: {:ok :: label, state :: State, }
spec Area3D.get_audio_bus_name() :: {:ok :: label, state :: State, }
spec Area3D.get_gravity() :: {:ok :: label, state :: State, }
spec Area3D.get_gravity_direction() :: {:ok :: label, state :: State, }
spec Area3D.get_gravity_point_center() :: {:ok :: label, state :: State, }
spec Area3D.get_gravity_point_unit_distance() :: {:ok :: label, state :: State, }
spec Area3D.get_gravity_space_override_mode() :: {:ok :: label, state :: State, }
spec Area3D.get_linear_damp() :: {:ok :: label, state :: State, }
spec Area3D.get_linear_damp_space_override_mode() :: {:ok :: label, state :: State, }
spec Area3D.get_overlapping_areas() :: {:ok :: label, state :: State, }
spec Area3D.get_overlapping_bodies() :: {:ok :: label, state :: State, }
spec Area3D.get_priority() :: {:ok :: label, state :: State, }
spec Area3D.get_reverb_amount() :: {:ok :: label, state :: State, }
spec Area3D.get_reverb_bus_name() :: {:ok :: label, state :: State, }
spec Area3D.get_reverb_uniformity() :: {:ok :: label, state :: State, }
spec Area3D.get_wind_attenuation_factor() :: {:ok :: label, state :: State, }
spec Area3D.get_wind_force_magnitude() :: {:ok :: label, state :: State, }
spec Area3D.get_wind_source_path() :: {:ok :: label, state :: State, }
spec Area3D.has_overlapping_areas() :: {:ok :: label, state :: State, }
spec Area3D.has_overlapping_bodies() :: {:ok :: label, state :: State, }
spec Area3D.is_gravity_a_point() :: {:ok :: label, state :: State, }
spec Area3D.is_monitorable() :: {:ok :: label, state :: State, }
spec Area3D.is_monitoring() :: {:ok :: label, state :: State, }
spec Area3D.is_overriding_audio_bus() :: {:ok :: label, state :: State, }
spec Area3D.is_using_reverb_bus() :: {:ok :: label, state :: State, }
spec Area3D.overlaps_area(area :: Node, ) :: {:ok :: label, state :: State, }
spec Area3D.overlaps_body(body :: Node, ) :: {:ok :: label, state :: State, }
spec Area3D.set_angular_damp(angular_damp :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_angular_damp_space_override_mode(space_override_mode :: enum::Area3D.SpaceOverride, ) :: {:ok :: label, state :: State, }
spec Area3D.set_audio_bus_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Area3D.set_audio_bus_override(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area3D.set_gravity(gravity :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_gravity_direction(direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec Area3D.set_gravity_is_point(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area3D.set_gravity_point_center(center :: Vector3, ) :: {:ok :: label, state :: State, }
spec Area3D.set_gravity_point_unit_distance(distance_scale :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_gravity_space_override_mode(space_override_mode :: enum::Area3D.SpaceOverride, ) :: {:ok :: label, state :: State, }
spec Area3D.set_linear_damp(linear_damp :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_linear_damp_space_override_mode(space_override_mode :: enum::Area3D.SpaceOverride, ) :: {:ok :: label, state :: State, }
spec Area3D.set_monitorable(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area3D.set_monitoring(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area3D.set_priority(priority :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_reverb_amount(amount :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_reverb_bus_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Area3D.set_reverb_uniformity(amount :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_use_reverb_bus(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Area3D.set_wind_attenuation_factor(wind_attenuation_factor :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_wind_force_magnitude(wind_force_magnitude :: float, ) :: {:ok :: label, state :: State, }
spec Area3D.set_wind_source_path(wind_source_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Array.all(method :: Callable, ) :: {:ok :: label, state :: State, bool}
spec Array.any(method :: Callable, ) :: {:ok :: label, state :: State, bool}
spec Array.append(value :: Variant, ) :: {:ok :: label, state :: State, }
spec Array.append_array(array :: Array, ) :: {:ok :: label, state :: State, }
spec Array.assign(array :: Array, ) :: {:ok :: label, state :: State, }
spec Array.back() :: {:ok :: label, state :: State, Variant}
spec Array.bsearch(value :: Variant, before :: bool, ) :: {:ok :: label, state :: State, int}
spec Array.bsearch_custom(value :: Variant, func :: Callable, before :: bool, ) :: {:ok :: label, state :: State, int}
spec Array.clear() :: {:ok :: label, state :: State, }
spec Array.count(value :: Variant, ) :: {:ok :: label, state :: State, int}
spec Array.duplicate(deep :: bool, ) :: {:ok :: label, state :: State, Array}
spec Array.erase(value :: Variant, ) :: {:ok :: label, state :: State, }
spec Array.fill(value :: Variant, ) :: {:ok :: label, state :: State, }
spec Array.filter(method :: Callable, ) :: {:ok :: label, state :: State, Array}
spec Array.find(what :: Variant, from :: int, ) :: {:ok :: label, state :: State, int}
spec Array.front() :: {:ok :: label, state :: State, Variant}
spec Array.get_typed_builtin() :: {:ok :: label, state :: State, int}
spec Array.get_typed_class_name() :: {:ok :: label, state :: State, StringName}
spec Array.get_typed_script() :: {:ok :: label, state :: State, Variant}
spec Array.has(value :: Variant, ) :: {:ok :: label, state :: State, bool}
spec Array.hash() :: {:ok :: label, state :: State, int}
spec Array.insert(position :: int, value :: Variant, ) :: {:ok :: label, state :: State, int}
spec Array.is_empty() :: {:ok :: label, state :: State, bool}
spec Array.is_read_only() :: {:ok :: label, state :: State, bool}
spec Array.is_same_typed(array :: Array, ) :: {:ok :: label, state :: State, bool}
spec Array.is_typed() :: {:ok :: label, state :: State, bool}
spec Array.make_read_only() :: {:ok :: label, state :: State, }
spec Array.map(method :: Callable, ) :: {:ok :: label, state :: State, Array}
spec Array.max() :: {:ok :: label, state :: State, Variant}
spec Array.min() :: {:ok :: label, state :: State, Variant}
spec Array.pick_random() :: {:ok :: label, state :: State, Variant}
spec Array.pop_at(position :: int, ) :: {:ok :: label, state :: State, Variant}
spec Array.pop_back() :: {:ok :: label, state :: State, Variant}
spec Array.pop_front() :: {:ok :: label, state :: State, Variant}
spec Array.push_back(value :: Variant, ) :: {:ok :: label, state :: State, }
spec Array.push_front(value :: Variant, ) :: {:ok :: label, state :: State, }
spec Array.reduce(method :: Callable, accum :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec Array.remove_at(position :: int, ) :: {:ok :: label, state :: State, }
spec Array.resize(size :: int, ) :: {:ok :: label, state :: State, int}
spec Array.reverse() :: {:ok :: label, state :: State, }
spec Array.rfind(what :: Variant, from :: int, ) :: {:ok :: label, state :: State, int}
spec Array.shuffle() :: {:ok :: label, state :: State, }
spec Array.size() :: {:ok :: label, state :: State, int}
spec Array.slice(begin :: int, end :: int, step :: int, deep :: bool, ) :: {:ok :: label, state :: State, Array}
spec Array.sort() :: {:ok :: label, state :: State, }
spec Array.sort_custom(func :: Callable, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.add_blend_shape(name :: StringName, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.add_surface_from_arrays(primitive :: enum::Mesh.PrimitiveType, arrays :: Array, blend_shapes :: typedarray::Array, lods :: Dictionary, flags :: bitfield::Mesh.ArrayFormat, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.clear_blend_shapes() :: {:ok :: label, state :: State, }
spec ArrayMesh.clear_surfaces() :: {:ok :: label, state :: State, }
spec ArrayMesh.get_blend_shape_count() :: {:ok :: label, state :: State, }
spec ArrayMesh.get_blend_shape_mode() :: {:ok :: label, state :: State, }
spec ArrayMesh.get_blend_shape_name(index :: int, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.get_custom_aabb() :: {:ok :: label, state :: State, }
spec ArrayMesh.get_shadow_mesh() :: {:ok :: label, state :: State, }
spec ArrayMesh.lightmap_unwrap(transform :: Transform3D, texel_size :: float, unwrap_mesh :: bool, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.regen_normal_maps() :: {:ok :: label, state :: State, }
spec ArrayMesh.set_blend_shape_mode(mode :: enum::Mesh.BlendShapeMode, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.set_blend_shape_name(index :: int, name :: StringName, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.set_custom_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.set_shadow_mesh(mesh :: ArrayMesh, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_find_by_name(name :: String, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_get_array_index_len(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_get_array_len(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_get_format(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_get_name(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_get_primitive_type(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_set_name(surf_idx :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_update_attribute_region(surf_idx :: int, offset :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_update_skin_region(surf_idx :: int, offset :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec ArrayMesh.surface_update_vertex_region(surf_idx :: int, offset :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec ArrayOccluder3D.set_arrays(vertices :: PackedVector3Array, indices :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec ArrayOccluder3D.set_indices(indices :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec ArrayOccluder3D.set_vertices(vertices :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec AspectRatioContainer.get_alignment_horizontal() :: {:ok :: label, state :: State, }
spec AspectRatioContainer.get_alignment_vertical() :: {:ok :: label, state :: State, }
spec AspectRatioContainer.get_ratio() :: {:ok :: label, state :: State, }
spec AspectRatioContainer.get_stretch_mode() :: {:ok :: label, state :: State, }
spec AspectRatioContainer.set_alignment_horizontal(alignment_horizontal :: enum::AspectRatioContainer.AlignmentMode, ) :: {:ok :: label, state :: State, }
spec AspectRatioContainer.set_alignment_vertical(alignment_vertical :: enum::AspectRatioContainer.AlignmentMode, ) :: {:ok :: label, state :: State, }
spec AspectRatioContainer.set_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec AspectRatioContainer.set_stretch_mode(stretch_mode :: enum::AspectRatioContainer.StretchMode, ) :: {:ok :: label, state :: State, }
spec AtlasTexture.get_atlas() :: {:ok :: label, state :: State, }
spec AtlasTexture.get_margin() :: {:ok :: label, state :: State, }
spec AtlasTexture.get_region() :: {:ok :: label, state :: State, }
spec AtlasTexture.has_filter_clip() :: {:ok :: label, state :: State, }
spec AtlasTexture.set_atlas(atlas :: Texture2D, ) :: {:ok :: label, state :: State, }
spec AtlasTexture.set_filter_clip(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AtlasTexture.set_margin(margin :: Rect2, ) :: {:ok :: label, state :: State, }
spec AtlasTexture.set_region(region :: Rect2, ) :: {:ok :: label, state :: State, }
spec AudioEffect._instantiate() :: {:ok :: label, state :: State, }
spec AudioEffectAmplify.get_volume_db() :: {:ok :: label, state :: State, }
spec AudioEffectAmplify.set_volume_db(volume :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCapture.can_get_buffer(frames :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectCapture.clear_buffer() :: {:ok :: label, state :: State, }
spec AudioEffectCapture.get_buffer(frames :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectCapture.get_buffer_length() :: {:ok :: label, state :: State, }
spec AudioEffectCapture.get_buffer_length_frames() :: {:ok :: label, state :: State, }
spec AudioEffectCapture.get_discarded_frames() :: {:ok :: label, state :: State, }
spec AudioEffectCapture.get_frames_available() :: {:ok :: label, state :: State, }
spec AudioEffectCapture.get_pushed_frames() :: {:ok :: label, state :: State, }
spec AudioEffectCapture.set_buffer_length(buffer_length_seconds :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_dry() :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_count() :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_cutoff_hz(voice_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_delay_ms(voice_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_depth_ms(voice_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_level_db(voice_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_pan(voice_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_voice_rate_hz(voice_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.get_wet() :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_dry(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_count(voices :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_cutoff_hz(voice_idx :: int, cutoff_hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_delay_ms(voice_idx :: int, delay_ms :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_depth_ms(voice_idx :: int, depth_ms :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_level_db(voice_idx :: int, level_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_pan(voice_idx :: int, pan :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_voice_rate_hz(voice_idx :: int, rate_hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectChorus.set_wet(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_attack_us() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_gain() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_mix() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_ratio() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_release_ms() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_sidechain() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.get_threshold() :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_attack_us(attack_us :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_gain(gain :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_mix(mix :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_release_ms(release_ms :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_sidechain(sidechain :: StringName, ) :: {:ok :: label, state :: State, }
spec AudioEffectCompressor.set_threshold(threshold :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_dry() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_feedback_delay_ms() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_feedback_level_db() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_feedback_lowpass() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_tap1_delay_ms() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_tap1_level_db() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_tap1_pan() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_tap2_delay_ms() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_tap2_level_db() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.get_tap2_pan() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.is_feedback_active() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.is_tap1_active() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.is_tap2_active() :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_dry(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_feedback_active(amount :: bool, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_feedback_delay_ms(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_feedback_level_db(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_feedback_lowpass(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap1_active(amount :: bool, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap1_delay_ms(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap1_level_db(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap1_pan(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap2_active(amount :: bool, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap2_delay_ms(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap2_level_db(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDelay.set_tap2_pan(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.get_drive() :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.get_keep_hf_hz() :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.get_mode() :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.get_post_gain() :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.get_pre_gain() :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.set_drive(drive :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.set_keep_hf_hz(keep_hf_hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.set_mode(mode :: enum::AudioEffectDistortion.Mode, ) :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.set_post_gain(post_gain :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectDistortion.set_pre_gain(pre_gain :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectEQ.get_band_count() :: {:ok :: label, state :: State, }
spec AudioEffectEQ.get_band_gain_db(band_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectEQ.set_band_gain_db(band_idx :: int, volume_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectFilter.get_cutoff() :: {:ok :: label, state :: State, }
spec AudioEffectFilter.get_db() :: {:ok :: label, state :: State, }
spec AudioEffectFilter.get_gain() :: {:ok :: label, state :: State, }
spec AudioEffectFilter.get_resonance() :: {:ok :: label, state :: State, }
spec AudioEffectFilter.set_cutoff(freq :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectFilter.set_db(amount :: enum::AudioEffectFilter.FilterDB, ) :: {:ok :: label, state :: State, }
spec AudioEffectFilter.set_gain(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectFilter.set_resonance(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectInstance._process(src_buffer :: const void*, dst_buffer :: AudioFrame*, frame_count :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectInstance._process_silence() :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.get_ceiling_db() :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.get_soft_clip_db() :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.get_soft_clip_ratio() :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.get_threshold_db() :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.set_ceiling_db(ceiling :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.set_soft_clip_db(soft_clip :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.set_soft_clip_ratio(soft_clip :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectLimiter.set_threshold_db(threshold :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPanner.get_pan() :: {:ok :: label, state :: State, }
spec AudioEffectPanner.set_pan(cpanume :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.get_depth() :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.get_feedback() :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.get_range_max_hz() :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.get_range_min_hz() :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.get_rate_hz() :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.set_depth(depth :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.set_feedback(fbk :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.set_range_max_hz(hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.set_range_min_hz(hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPhaser.set_rate_hz(hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectPitchShift.get_fft_size() :: {:ok :: label, state :: State, }
spec AudioEffectPitchShift.get_oversampling() :: {:ok :: label, state :: State, }
spec AudioEffectPitchShift.get_pitch_scale() :: {:ok :: label, state :: State, }
spec AudioEffectPitchShift.set_fft_size(size :: enum::AudioEffectPitchShift.FFTSize, ) :: {:ok :: label, state :: State, }
spec AudioEffectPitchShift.set_oversampling(amount :: int, ) :: {:ok :: label, state :: State, }
spec AudioEffectPitchShift.set_pitch_scale(rate :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectRecord.get_format() :: {:ok :: label, state :: State, }
spec AudioEffectRecord.get_recording() :: {:ok :: label, state :: State, }
spec AudioEffectRecord.is_recording_active() :: {:ok :: label, state :: State, }
spec AudioEffectRecord.set_format(format :: enum::AudioStreamWAV.Format, ) :: {:ok :: label, state :: State, }
spec AudioEffectRecord.set_recording_active(record :: bool, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_damping() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_dry() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_hpf() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_predelay_feedback() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_predelay_msec() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_room_size() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_spread() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.get_wet() :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_damping(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_dry(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_hpf(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_predelay_feedback(feedback :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_predelay_msec(msec :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_room_size(size :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_spread(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectReverb.set_wet(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzer.get_buffer_length() :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzer.get_fft_size() :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzer.get_tap_back_pos() :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzer.set_buffer_length(seconds :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzer.set_fft_size(size :: enum::AudioEffectSpectrumAnalyzer.FFTSize, ) :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzer.set_tap_back_pos(seconds :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectSpectrumAnalyzerInstance.get_magnitude_for_frequency_range(from_hz :: float, to_hz :: float, mode :: enum::AudioEffectSpectrumAnalyzerInstance.MagnitudeMode, ) :: {:ok :: label, state :: State, }
spec AudioEffectStereoEnhance.get_pan_pullout() :: {:ok :: label, state :: State, }
spec AudioEffectStereoEnhance.get_surround() :: {:ok :: label, state :: State, }
spec AudioEffectStereoEnhance.get_time_pullout() :: {:ok :: label, state :: State, }
spec AudioEffectStereoEnhance.set_pan_pullout(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectStereoEnhance.set_surround(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioEffectStereoEnhance.set_time_pullout(amount :: float, ) :: {:ok :: label, state :: State, }
spec AudioListener2D.clear_current() :: {:ok :: label, state :: State, }
spec AudioListener2D.is_current() :: {:ok :: label, state :: State, }
spec AudioListener2D.make_current() :: {:ok :: label, state :: State, }
spec AudioListener3D.clear_current() :: {:ok :: label, state :: State, }
spec AudioListener3D.get_listener_transform() :: {:ok :: label, state :: State, }
spec AudioListener3D.is_current() :: {:ok :: label, state :: State, }
spec AudioListener3D.make_current() :: {:ok :: label, state :: State, }
spec AudioServer.add_bus(at_position :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.add_bus_effect(bus_idx :: int, effect :: AudioEffect, at_position :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.generate_bus_layout() :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_channels(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_count() :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_effect(bus_idx :: int, effect_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_effect_count(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_effect_instance(bus_idx :: int, effect_idx :: int, channel :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_index(bus_name :: StringName, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_name(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_peak_volume_left_db(bus_idx :: int, channel :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_peak_volume_right_db(bus_idx :: int, channel :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_send(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_bus_volume_db(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.get_input_device() :: {:ok :: label, state :: State, }
spec AudioServer.get_input_device_list() :: {:ok :: label, state :: State, }
spec AudioServer.get_mix_rate() :: {:ok :: label, state :: State, }
spec AudioServer.get_output_device() :: {:ok :: label, state :: State, }
spec AudioServer.get_output_device_list() :: {:ok :: label, state :: State, }
spec AudioServer.get_output_latency() :: {:ok :: label, state :: State, }
spec AudioServer.get_playback_speed_scale() :: {:ok :: label, state :: State, }
spec AudioServer.get_speaker_mode() :: {:ok :: label, state :: State, }
spec AudioServer.get_time_since_last_mix() :: {:ok :: label, state :: State, }
spec AudioServer.get_time_to_next_mix() :: {:ok :: label, state :: State, }
spec AudioServer.is_bus_bypassing_effects(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.is_bus_effect_enabled(bus_idx :: int, effect_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.is_bus_mute(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.is_bus_solo(bus_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.lock() :: {:ok :: label, state :: State, }
spec AudioServer.move_bus(index :: int, to_index :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.remove_bus(index :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.remove_bus_effect(bus_idx :: int, effect_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_bypass_effects(bus_idx :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_count(amount :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_effect_enabled(bus_idx :: int, effect_idx :: int, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_layout(bus_layout :: AudioBusLayout, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_mute(bus_idx :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_name(bus_idx :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_send(bus_idx :: int, send :: StringName, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_solo(bus_idx :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_bus_volume_db(bus_idx :: int, volume_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_enable_tagging_used_audio_streams(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_input_device(name :: String, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_output_device(name :: String, ) :: {:ok :: label, state :: State, }
spec AudioServer.set_playback_speed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioServer.swap_bus_effects(bus_idx :: int, effect_idx :: int, by_effect_idx :: int, ) :: {:ok :: label, state :: State, }
spec AudioServer.unlock() :: {:ok :: label, state :: State, }
spec AudioStream._get_beat_count() :: {:ok :: label, state :: State, }
spec AudioStream._get_bpm() :: {:ok :: label, state :: State, }
spec AudioStream._get_length() :: {:ok :: label, state :: State, }
spec AudioStream._get_stream_name() :: {:ok :: label, state :: State, }
spec AudioStream._instantiate_playback() :: {:ok :: label, state :: State, }
spec AudioStream._is_monophonic() :: {:ok :: label, state :: State, }
spec AudioStream.get_length() :: {:ok :: label, state :: State, }
spec AudioStream.instantiate_playback() :: {:ok :: label, state :: State, }
spec AudioStream.is_monophonic() :: {:ok :: label, state :: State, }
spec AudioStreamGenerator.get_buffer_length() :: {:ok :: label, state :: State, }
spec AudioStreamGenerator.get_mix_rate() :: {:ok :: label, state :: State, }
spec AudioStreamGenerator.set_buffer_length(seconds :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamGenerator.set_mix_rate(hz :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamGeneratorPlayback.can_push_buffer(amount :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamGeneratorPlayback.clear_buffer() :: {:ok :: label, state :: State, }
spec AudioStreamGeneratorPlayback.get_frames_available() :: {:ok :: label, state :: State, }
spec AudioStreamGeneratorPlayback.get_skips() :: {:ok :: label, state :: State, }
spec AudioStreamGeneratorPlayback.push_buffer(frames :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec AudioStreamGeneratorPlayback.push_frame(frame :: Vector2, ) :: {:ok :: label, state :: State, }
spec AudioStreamMP3.get_bar_beats() :: {:ok :: label, state :: State, }
spec AudioStreamMP3.get_beat_count() :: {:ok :: label, state :: State, }
spec AudioStreamMP3.get_bpm() :: {:ok :: label, state :: State, }
spec AudioStreamMP3.get_data() :: {:ok :: label, state :: State, }
spec AudioStreamMP3.get_loop_offset() :: {:ok :: label, state :: State, }
spec AudioStreamMP3.has_loop() :: {:ok :: label, state :: State, }
spec AudioStreamMP3.set_bar_beats(count :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamMP3.set_beat_count(count :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamMP3.set_bpm(bpm :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamMP3.set_data(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec AudioStreamMP3.set_loop(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamMP3.set_loop_offset(seconds :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.get_bar_beats() :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.get_beat_count() :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.get_bpm() :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.get_loop_offset() :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.get_packet_sequence() :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.has_loop() :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.set_bar_beats(count :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.set_beat_count(count :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.set_bpm(bpm :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.set_loop(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.set_loop_offset(seconds :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamOggVorbis.set_packet_sequence(packet_sequence :: OggPacketSequence, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._get_loop_count() :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._get_playback_position() :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._is_playing() :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._mix(buffer :: AudioFrame*, rate_scale :: float, frames :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._seek(position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._start(from_pos :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._stop() :: {:ok :: label, state :: State, }
spec AudioStreamPlayback._tag_used_streams() :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackPolyphonic.is_stream_playing(stream :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackPolyphonic.play_stream(stream :: AudioStream, from_offset :: float, volume_db :: float, pitch_scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackPolyphonic.set_stream_pitch_scale(stream :: int, pitch_scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackPolyphonic.set_stream_volume(stream :: int, volume_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackPolyphonic.stop_stream(stream :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackResampled._get_stream_sampling_rate() :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackResampled._mix_resampled(dst_buffer :: AudioFrame*, frame_count :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlaybackResampled.begin_resample() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_bus() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_max_polyphony() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_mix_target() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_pitch_scale() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_playback_position() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_stream() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_stream_paused() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_stream_playback() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.get_volume_db() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.has_stream_playback() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.is_autoplay_enabled() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.is_playing() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.play(from_position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.seek(to_position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_autoplay(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_bus(bus :: StringName, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_max_polyphony(max_polyphony :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_mix_target(mix_target :: enum::AudioStreamPlayer.MixTarget, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_pitch_scale(pitch_scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_stream(stream :: AudioStream, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_stream_paused(pause :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.set_volume_db(volume_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer.stop() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_area_mask() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_attenuation() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_bus() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_max_distance() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_max_polyphony() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_panning_strength() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_pitch_scale() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_playback_position() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_stream() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_stream_paused() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_stream_playback() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.get_volume_db() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.has_stream_playback() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.is_autoplay_enabled() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.is_playing() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.play(from_position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.seek(to_position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_area_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_attenuation(curve :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_autoplay(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_bus(bus :: StringName, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_max_distance(pixels :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_max_polyphony(max_polyphony :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_panning_strength(panning_strength :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_pitch_scale(pitch_scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_stream(stream :: AudioStream, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_stream_paused(pause :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.set_volume_db(volume_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer2D.stop() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_area_mask() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_attenuation_filter_cutoff_hz() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_attenuation_filter_db() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_attenuation_model() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_bus() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_doppler_tracking() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_emission_angle() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_emission_angle_filter_attenuation_db() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_max_db() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_max_distance() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_max_polyphony() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_panning_strength() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_pitch_scale() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_playback_position() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_stream() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_stream_paused() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_stream_playback() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_unit_size() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.get_volume_db() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.has_stream_playback() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.is_autoplay_enabled() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.is_emission_angle_enabled() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.is_playing() :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.play(from_position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.seek(to_position :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_area_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_attenuation_filter_cutoff_hz(degrees :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_attenuation_filter_db(db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_attenuation_model(model :: enum::AudioStreamPlayer3D.AttenuationModel, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_autoplay(enable :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_bus(bus :: StringName, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_doppler_tracking(mode :: enum::AudioStreamPlayer3D.DopplerTracking, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_emission_angle(degrees :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_emission_angle_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_emission_angle_filter_attenuation_db(db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_max_db(max_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_max_distance(meters :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_max_polyphony(max_polyphony :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_panning_strength(panning_strength :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_pitch_scale(pitch_scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_stream(stream :: AudioStream, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_stream_paused(pause :: bool, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_unit_size(unit_size :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.set_volume_db(volume_db :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamPlayer3D.stop() :: {:ok :: label, state :: State, }
spec AudioStreamPolyphonic.get_polyphony() :: {:ok :: label, state :: State, }
spec AudioStreamPolyphonic.set_polyphony(voices :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.add_stream(index :: int, stream :: AudioStream, weight :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.get_playback_mode() :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.get_random_pitch() :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.get_random_volume_offset_db() :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.get_stream(index :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.get_stream_probability_weight(index :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.get_streams_count() :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.move_stream(index_from :: int, index_to :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.remove_stream(index :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.set_playback_mode(mode :: enum::AudioStreamRandomizer.PlaybackMode, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.set_random_pitch(scale :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.set_random_volume_offset_db(db_offset :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.set_stream(index :: int, stream :: AudioStream, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.set_stream_probability_weight(index :: int, weight :: float, ) :: {:ok :: label, state :: State, }
spec AudioStreamRandomizer.set_streams_count(count :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.get_data() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.get_format() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.get_loop_begin() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.get_loop_end() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.get_loop_mode() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.get_mix_rate() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.is_stereo() :: {:ok :: label, state :: State, }
spec AudioStreamWAV.save_to_wav(path :: String, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_data(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_format(format :: enum::AudioStreamWAV.Format, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_loop_begin(loop_begin :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_loop_end(loop_end :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_loop_mode(loop_mode :: enum::AudioStreamWAV.LoopMode, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_mix_rate(mix_rate :: int, ) :: {:ok :: label, state :: State, }
spec AudioStreamWAV.set_stereo(stereo :: bool, ) :: {:ok :: label, state :: State, }
spec BackBufferCopy.get_copy_mode() :: {:ok :: label, state :: State, }
spec BackBufferCopy.get_rect() :: {:ok :: label, state :: State, }
spec BackBufferCopy.set_copy_mode(copy_mode :: enum::BackBufferCopy.CopyMode, ) :: {:ok :: label, state :: State, }
spec BackBufferCopy.set_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec BaseButton._pressed() :: {:ok :: label, state :: State, }
spec BaseButton._toggled(button_pressed :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.get_action_mode() :: {:ok :: label, state :: State, }
spec BaseButton.get_button_group() :: {:ok :: label, state :: State, }
spec BaseButton.get_button_mask() :: {:ok :: label, state :: State, }
spec BaseButton.get_draw_mode() :: {:ok :: label, state :: State, }
spec BaseButton.get_shortcut() :: {:ok :: label, state :: State, }
spec BaseButton.is_disabled() :: {:ok :: label, state :: State, }
spec BaseButton.is_hovered() :: {:ok :: label, state :: State, }
spec BaseButton.is_keep_pressed_outside() :: {:ok :: label, state :: State, }
spec BaseButton.is_pressed() :: {:ok :: label, state :: State, }
spec BaseButton.is_shortcut_feedback() :: {:ok :: label, state :: State, }
spec BaseButton.is_shortcut_in_tooltip_enabled() :: {:ok :: label, state :: State, }
spec BaseButton.is_toggle_mode() :: {:ok :: label, state :: State, }
spec BaseButton.set_action_mode(mode :: enum::BaseButton.ActionMode, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_button_group(button_group :: ButtonGroup, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_button_mask(mask :: bitfield::MouseButtonMask, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_disabled(disabled :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_keep_pressed_outside(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_pressed_no_signal(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_shortcut(shortcut :: Shortcut, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_shortcut_feedback(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_shortcut_in_tooltip(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec BaseButton.set_toggle_mode(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_albedo() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_alpha_antialiasing() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_alpha_antialiasing_edge() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_alpha_hash_scale() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_alpha_scissor_threshold() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_anisotropy() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_ao_light_affect() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_ao_texture_channel() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_backlight() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_billboard_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_blend_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_clearcoat() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_clearcoat_roughness() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_cull_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_depth_draw_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_detail_blend_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_detail_uv() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_diffuse_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_distance_fade() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_distance_fade_max_distance() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_distance_fade_min_distance() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_emission() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_emission_energy_multiplier() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_emission_intensity() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_emission_operator() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_feature(feature :: enum::BaseMaterial3D.Feature, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_flag(flag :: enum::BaseMaterial3D.Flags, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_grow() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_heightmap_deep_parallax_flip_binormal() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_heightmap_deep_parallax_flip_tangent() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_heightmap_deep_parallax_max_layers() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_heightmap_deep_parallax_min_layers() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_heightmap_scale() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_metallic() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_metallic_texture_channel() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_msdf_outline_size() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_msdf_pixel_range() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_normal_scale() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_particles_anim_h_frames() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_particles_anim_loop() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_particles_anim_v_frames() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_point_size() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_proximity_fade_distance() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_refraction() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_refraction_texture_channel() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_rim() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_rim_tint() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_roughness() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_roughness_texture_channel() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_shading_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_specular() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_specular_mode() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_subsurface_scattering_strength() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_texture(param :: enum::BaseMaterial3D.TextureParam, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_texture_filter() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_transmittance_boost() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_transmittance_color() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_transmittance_depth() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_transparency() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_uv1_offset() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_uv1_scale() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_uv1_triplanar_blend_sharpness() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_uv2_offset() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_uv2_scale() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.get_uv2_triplanar_blend_sharpness() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.is_grow_enabled() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.is_heightmap_deep_parallax_enabled() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.is_proximity_fade_enabled() :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_albedo(albedo :: Color, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_alpha_antialiasing(alpha_aa :: enum::BaseMaterial3D.AlphaAntiAliasing, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_alpha_antialiasing_edge(edge :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_alpha_hash_scale(threshold :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_alpha_scissor_threshold(threshold :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_anisotropy(anisotropy :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_ao_light_affect(amount :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_ao_texture_channel(channel :: enum::BaseMaterial3D.TextureChannel, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_backlight(backlight :: Color, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_billboard_mode(mode :: enum::BaseMaterial3D.BillboardMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_blend_mode(blend_mode :: enum::BaseMaterial3D.BlendMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_clearcoat(clearcoat :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_clearcoat_roughness(clearcoat_roughness :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_cull_mode(cull_mode :: enum::BaseMaterial3D.CullMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_depth_draw_mode(depth_draw_mode :: enum::BaseMaterial3D.DepthDrawMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_detail_blend_mode(detail_blend_mode :: enum::BaseMaterial3D.BlendMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_detail_uv(detail_uv :: enum::BaseMaterial3D.DetailUV, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_diffuse_mode(diffuse_mode :: enum::BaseMaterial3D.DiffuseMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_distance_fade(mode :: enum::BaseMaterial3D.DistanceFadeMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_distance_fade_max_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_distance_fade_min_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_emission(emission :: Color, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_emission_energy_multiplier(emission_energy_multiplier :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_emission_intensity(emission_energy_multiplier :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_emission_operator(operator :: enum::BaseMaterial3D.EmissionOperator, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_feature(feature :: enum::BaseMaterial3D.Feature, enable :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_flag(flag :: enum::BaseMaterial3D.Flags, enable :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_grow(amount :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_grow_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_heightmap_deep_parallax(enable :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_heightmap_deep_parallax_flip_binormal(flip :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_heightmap_deep_parallax_flip_tangent(flip :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_heightmap_deep_parallax_max_layers(layer :: int, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_heightmap_deep_parallax_min_layers(layer :: int, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_heightmap_scale(heightmap_scale :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_metallic(metallic :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_metallic_texture_channel(channel :: enum::BaseMaterial3D.TextureChannel, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_msdf_outline_size(size :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_msdf_pixel_range(range :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_normal_scale(normal_scale :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_particles_anim_h_frames(frames :: int, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_particles_anim_loop(loop :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_particles_anim_v_frames(frames :: int, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_point_size(point_size :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_proximity_fade_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_proximity_fade_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_refraction(refraction :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_refraction_texture_channel(channel :: enum::BaseMaterial3D.TextureChannel, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_rim(rim :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_rim_tint(rim_tint :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_roughness(roughness :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_roughness_texture_channel(channel :: enum::BaseMaterial3D.TextureChannel, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_shading_mode(shading_mode :: enum::BaseMaterial3D.ShadingMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_specular(specular :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_specular_mode(specular_mode :: enum::BaseMaterial3D.SpecularMode, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_subsurface_scattering_strength(strength :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_texture(param :: enum::BaseMaterial3D.TextureParam, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_texture_filter(mode :: enum::BaseMaterial3D.TextureFilter, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_transmittance_boost(boost :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_transmittance_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_transmittance_depth(depth :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_transparency(transparency :: enum::BaseMaterial3D.Transparency, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_uv1_offset(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_uv1_scale(scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_uv1_triplanar_blend_sharpness(sharpness :: float, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_uv2_offset(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_uv2_scale(scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec BaseMaterial3D.set_uv2_triplanar_blend_sharpness(sharpness :: float, ) :: {:ok :: label, state :: State, }
spec Basis.determinant() :: {:ok :: label, state :: State, float}
spec Basis.from_euler(euler :: Vector3, order :: int, ) :: {:ok :: label, state :: State, Basis}
spec Basis.from_scale(scale :: Vector3, ) :: {:ok :: label, state :: State, Basis}
spec Basis.get_euler(order :: int, ) :: {:ok :: label, state :: State, Vector3}
spec Basis.get_rotation_quaternion() :: {:ok :: label, state :: State, Quaternion}
spec Basis.get_scale() :: {:ok :: label, state :: State, Vector3}
spec Basis.inverse() :: {:ok :: label, state :: State, Basis}
spec Basis.is_equal_approx(b :: Basis, ) :: {:ok :: label, state :: State, bool}
spec Basis.is_finite() :: {:ok :: label, state :: State, bool}
spec Basis.looking_at(target :: Vector3, up :: Vector3, ) :: {:ok :: label, state :: State, Basis}
spec Basis.orthonormalized() :: {:ok :: label, state :: State, Basis}
spec Basis.rotated(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, Basis}
spec Basis.scaled(scale :: Vector3, ) :: {:ok :: label, state :: State, Basis}
spec Basis.slerp(to :: Basis, weight :: float, ) :: {:ok :: label, state :: State, Basis}
spec Basis.tdotx(with :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Basis.tdoty(with :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Basis.tdotz(with :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Basis.transposed() :: {:ok :: label, state :: State, Basis}
spec BitMap.convert_to_image() :: {:ok :: label, state :: State, }
spec BitMap.create(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec BitMap.create_from_image_alpha(image :: Image, threshold :: float, ) :: {:ok :: label, state :: State, }
spec BitMap.get_bit(x :: int, y :: int, ) :: {:ok :: label, state :: State, }
spec BitMap.get_bitv(position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec BitMap.get_size() :: {:ok :: label, state :: State, }
spec BitMap.get_true_bit_count() :: {:ok :: label, state :: State, }
spec BitMap.grow_mask(pixels :: int, rect :: Rect2i, ) :: {:ok :: label, state :: State, }
spec BitMap.opaque_to_polygons(rect :: Rect2i, epsilon :: float, ) :: {:ok :: label, state :: State, }
spec BitMap.resize(new_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec BitMap.set_bit(x :: int, y :: int, bit :: bool, ) :: {:ok :: label, state :: State, }
spec BitMap.set_bit_rect(rect :: Rect2i, bit :: bool, ) :: {:ok :: label, state :: State, }
spec BitMap.set_bitv(position :: Vector2i, bit :: bool, ) :: {:ok :: label, state :: State, }
spec Bone2D.apply_rest() :: {:ok :: label, state :: State, }
spec Bone2D.get_autocalculate_length_and_angle() :: {:ok :: label, state :: State, }
spec Bone2D.get_bone_angle() :: {:ok :: label, state :: State, }
spec Bone2D.get_index_in_skeleton() :: {:ok :: label, state :: State, }
spec Bone2D.get_length() :: {:ok :: label, state :: State, }
spec Bone2D.get_rest() :: {:ok :: label, state :: State, }
spec Bone2D.get_skeleton_rest() :: {:ok :: label, state :: State, }
spec Bone2D.set_autocalculate_length_and_angle(auto_calculate :: bool, ) :: {:ok :: label, state :: State, }
spec Bone2D.set_bone_angle(angle :: float, ) :: {:ok :: label, state :: State, }
spec Bone2D.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec Bone2D.set_rest(rest :: Transform2D, ) :: {:ok :: label, state :: State, }
spec BoneAttachment3D.get_bone_idx() :: {:ok :: label, state :: State, }
spec BoneAttachment3D.get_bone_name() :: {:ok :: label, state :: State, }
spec BoneAttachment3D.get_external_skeleton() :: {:ok :: label, state :: State, }
spec BoneAttachment3D.get_override_pose() :: {:ok :: label, state :: State, }
spec BoneAttachment3D.get_use_external_skeleton() :: {:ok :: label, state :: State, }
spec BoneAttachment3D.on_bone_pose_update(bone_index :: int, ) :: {:ok :: label, state :: State, }
spec BoneAttachment3D.set_bone_idx(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec BoneAttachment3D.set_bone_name(bone_name :: String, ) :: {:ok :: label, state :: State, }
spec BoneAttachment3D.set_external_skeleton(external_skeleton :: NodePath, ) :: {:ok :: label, state :: State, }
spec BoneAttachment3D.set_override_pose(override_pose :: bool, ) :: {:ok :: label, state :: State, }
spec BoneAttachment3D.set_use_external_skeleton(use_external_skeleton :: bool, ) :: {:ok :: label, state :: State, }
spec BoneMap.find_profile_bone_name(skeleton_bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec BoneMap.get_profile() :: {:ok :: label, state :: State, }
spec BoneMap.get_skeleton_bone_name(profile_bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec BoneMap.set_profile(profile :: SkeletonProfile, ) :: {:ok :: label, state :: State, }
spec BoneMap.set_skeleton_bone_name(profile_bone_name :: StringName, skeleton_bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec BoxContainer.add_spacer(begin :: bool, ) :: {:ok :: label, state :: State, }
spec BoxContainer.get_alignment() :: {:ok :: label, state :: State, }
spec BoxContainer.is_vertical() :: {:ok :: label, state :: State, }
spec BoxContainer.set_alignment(alignment :: enum::BoxContainer.AlignmentMode, ) :: {:ok :: label, state :: State, }
spec BoxContainer.set_vertical(vertical :: bool, ) :: {:ok :: label, state :: State, }
spec BoxMesh.get_size() :: {:ok :: label, state :: State, }
spec BoxMesh.get_subdivide_depth() :: {:ok :: label, state :: State, }
spec BoxMesh.get_subdivide_height() :: {:ok :: label, state :: State, }
spec BoxMesh.get_subdivide_width() :: {:ok :: label, state :: State, }
spec BoxMesh.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec BoxMesh.set_subdivide_depth(divisions :: int, ) :: {:ok :: label, state :: State, }
spec BoxMesh.set_subdivide_height(divisions :: int, ) :: {:ok :: label, state :: State, }
spec BoxMesh.set_subdivide_width(subdivide :: int, ) :: {:ok :: label, state :: State, }
spec BoxOccluder3D.get_size() :: {:ok :: label, state :: State, }
spec BoxOccluder3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec BoxShape3D.get_size() :: {:ok :: label, state :: State, }
spec BoxShape3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec Button.get_button_icon() :: {:ok :: label, state :: State, }
spec Button.get_clip_text() :: {:ok :: label, state :: State, }
spec Button.get_icon_alignment() :: {:ok :: label, state :: State, }
spec Button.get_language() :: {:ok :: label, state :: State, }
spec Button.get_text() :: {:ok :: label, state :: State, }
spec Button.get_text_alignment() :: {:ok :: label, state :: State, }
spec Button.get_text_direction() :: {:ok :: label, state :: State, }
spec Button.get_text_overrun_behavior() :: {:ok :: label, state :: State, }
spec Button.is_expand_icon() :: {:ok :: label, state :: State, }
spec Button.is_flat() :: {:ok :: label, state :: State, }
spec Button.set_button_icon(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Button.set_clip_text(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Button.set_expand_icon(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Button.set_flat(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Button.set_icon_alignment(icon_alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec Button.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec Button.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec Button.set_text_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec Button.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec Button.set_text_overrun_behavior(overrun_behavior :: enum::TextServer.OverrunBehavior, ) :: {:ok :: label, state :: State, }
spec ButtonGroup.get_buttons() :: {:ok :: label, state :: State, }
spec ButtonGroup.get_pressed_button() :: {:ok :: label, state :: State, }
spec CPUParticles2D.convert_from_particles(particles :: Node, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_amount() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_color() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_color_initial_ramp() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_color_ramp() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_direction() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_draw_order() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_emission_colors() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_emission_normals() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_emission_points() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_emission_rect_extents() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_emission_shape() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_emission_sphere_radius() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_explosiveness_ratio() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_fixed_fps() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_fractional_delta() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_gravity() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_lifetime() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_lifetime_randomness() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_one_shot() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_param_curve(param :: enum::CPUParticles2D.Parameter, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_param_max(param :: enum::CPUParticles2D.Parameter, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_param_min(param :: enum::CPUParticles2D.Parameter, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_particle_flag(particle_flag :: enum::CPUParticles2D.ParticleFlags, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_pre_process_time() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_randomness_ratio() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_scale_curve_x() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_scale_curve_y() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_speed_scale() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_split_scale() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_spread() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_texture() :: {:ok :: label, state :: State, }
spec CPUParticles2D.get_use_local_coordinates() :: {:ok :: label, state :: State, }
spec CPUParticles2D.is_emitting() :: {:ok :: label, state :: State, }
spec CPUParticles2D.restart() :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_amount(amount :: int, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_color_initial_ramp(ramp :: Gradient, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_color_ramp(ramp :: Gradient, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_direction(direction :: Vector2, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_draw_order(order :: enum::CPUParticles2D.DrawOrder, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emission_colors(array :: PackedColorArray, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emission_normals(array :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emission_points(array :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emission_rect_extents(extents :: Vector2, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emission_shape(shape :: enum::CPUParticles2D.EmissionShape, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emission_sphere_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_emitting(emitting :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_explosiveness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_fixed_fps(fps :: int, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_fractional_delta(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_gravity(accel_vec :: Vector2, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_lifetime(secs :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_lifetime_randomness(random :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_one_shot(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_param_curve(param :: enum::CPUParticles2D.Parameter, curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_param_max(param :: enum::CPUParticles2D.Parameter, value :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_param_min(param :: enum::CPUParticles2D.Parameter, value :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_particle_flag(particle_flag :: enum::CPUParticles2D.ParticleFlags, enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_pre_process_time(secs :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_randomness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_scale_curve_x(scale_curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_scale_curve_y(scale_curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_speed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_split_scale(split_scale :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_spread(spread :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CPUParticles2D.set_use_local_coordinates(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.convert_from_particles(particles :: Node, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_amount() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_color() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_color_initial_ramp() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_color_ramp() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_direction() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_draw_order() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_box_extents() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_colors() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_normals() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_points() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_ring_axis() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_ring_height() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_ring_inner_radius() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_ring_radius() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_shape() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_emission_sphere_radius() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_explosiveness_ratio() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_fixed_fps() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_flatness() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_fractional_delta() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_gravity() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_lifetime() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_lifetime_randomness() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_mesh() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_one_shot() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_param_curve(param :: enum::CPUParticles3D.Parameter, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_param_max(param :: enum::CPUParticles3D.Parameter, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_param_min(param :: enum::CPUParticles3D.Parameter, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_particle_flag(particle_flag :: enum::CPUParticles3D.ParticleFlags, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_pre_process_time() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_randomness_ratio() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_scale_curve_x() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_scale_curve_y() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_scale_curve_z() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_speed_scale() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_split_scale() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_spread() :: {:ok :: label, state :: State, }
spec CPUParticles3D.get_use_local_coordinates() :: {:ok :: label, state :: State, }
spec CPUParticles3D.is_emitting() :: {:ok :: label, state :: State, }
spec CPUParticles3D.restart() :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_amount(amount :: int, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_color_initial_ramp(ramp :: Gradient, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_color_ramp(ramp :: Gradient, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_direction(direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_draw_order(order :: enum::CPUParticles3D.DrawOrder, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_box_extents(extents :: Vector3, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_colors(array :: PackedColorArray, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_normals(array :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_points(array :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_ring_axis(axis :: Vector3, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_ring_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_ring_inner_radius(inner_radius :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_ring_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_shape(shape :: enum::CPUParticles3D.EmissionShape, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emission_sphere_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_emitting(emitting :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_explosiveness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_fixed_fps(fps :: int, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_flatness(amount :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_fractional_delta(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_gravity(accel_vec :: Vector3, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_lifetime(secs :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_lifetime_randomness(random :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_one_shot(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_param_curve(param :: enum::CPUParticles3D.Parameter, curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_param_max(param :: enum::CPUParticles3D.Parameter, value :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_param_min(param :: enum::CPUParticles3D.Parameter, value :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_particle_flag(particle_flag :: enum::CPUParticles3D.ParticleFlags, enable :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_pre_process_time(secs :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_randomness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_scale_curve_x(scale_curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_scale_curve_y(scale_curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_scale_curve_z(scale_curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_speed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_split_scale(split_scale :: bool, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_spread(degrees :: float, ) :: {:ok :: label, state :: State, }
spec CPUParticles3D.set_use_local_coordinates(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CSGBox3D.get_material() :: {:ok :: label, state :: State, }
spec CSGBox3D.get_size() :: {:ok :: label, state :: State, }
spec CSGBox3D.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CSGBox3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec CSGCylinder3D.get_height() :: {:ok :: label, state :: State, }
spec CSGCylinder3D.get_material() :: {:ok :: label, state :: State, }
spec CSGCylinder3D.get_radius() :: {:ok :: label, state :: State, }
spec CSGCylinder3D.get_sides() :: {:ok :: label, state :: State, }
spec CSGCylinder3D.get_smooth_faces() :: {:ok :: label, state :: State, }
spec CSGCylinder3D.is_cone() :: {:ok :: label, state :: State, }
spec CSGCylinder3D.set_cone(cone :: bool, ) :: {:ok :: label, state :: State, }
spec CSGCylinder3D.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CSGCylinder3D.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CSGCylinder3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CSGCylinder3D.set_sides(sides :: int, ) :: {:ok :: label, state :: State, }
spec CSGCylinder3D.set_smooth_faces(smooth_faces :: bool, ) :: {:ok :: label, state :: State, }
spec CSGMesh3D.get_material() :: {:ok :: label, state :: State, }
spec CSGMesh3D.get_mesh() :: {:ok :: label, state :: State, }
spec CSGMesh3D.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CSGMesh3D.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_depth() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_material() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_mode() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_path_interval() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_path_interval_type() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_path_node() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_path_rotation() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_path_simplify_angle() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_path_u_distance() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_polygon() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_smooth_faces() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_spin_degrees() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.get_spin_sides() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.is_path_continuous_u() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.is_path_joined() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.is_path_local() :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_depth(depth :: float, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_mode(mode :: enum::CSGPolygon3D.Mode, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_continuous_u(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_interval(interval :: float, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_interval_type(interval_type :: enum::CSGPolygon3D.PathIntervalType, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_joined(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_local(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_node(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_rotation(path_rotation :: enum::CSGPolygon3D.PathRotation, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_simplify_angle(degrees :: float, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_path_u_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_smooth_faces(smooth_faces :: bool, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_spin_degrees(degrees :: float, ) :: {:ok :: label, state :: State, }
spec CSGPolygon3D.set_spin_sides(spin_sides :: int, ) :: {:ok :: label, state :: State, }
spec CSGPrimitive3D.get_flip_faces() :: {:ok :: label, state :: State, }
spec CSGPrimitive3D.set_flip_faces(flip_faces :: bool, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.get_collision_layer() :: {:ok :: label, state :: State, }
spec CSGShape3D.get_collision_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec CSGShape3D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.get_collision_priority() :: {:ok :: label, state :: State, }
spec CSGShape3D.get_meshes() :: {:ok :: label, state :: State, }
spec CSGShape3D.get_operation() :: {:ok :: label, state :: State, }
spec CSGShape3D.get_snap() :: {:ok :: label, state :: State, }
spec CSGShape3D.is_calculating_tangents() :: {:ok :: label, state :: State, }
spec CSGShape3D.is_root_shape() :: {:ok :: label, state :: State, }
spec CSGShape3D.is_using_collision() :: {:ok :: label, state :: State, }
spec CSGShape3D.set_calculate_tangents(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_collision_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_collision_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_collision_priority(priority :: float, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_operation(operation :: enum::CSGShape3D.Operation, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_snap(snap :: float, ) :: {:ok :: label, state :: State, }
spec CSGShape3D.set_use_collision(operation :: bool, ) :: {:ok :: label, state :: State, }
spec CSGSphere3D.get_material() :: {:ok :: label, state :: State, }
spec CSGSphere3D.get_radial_segments() :: {:ok :: label, state :: State, }
spec CSGSphere3D.get_radius() :: {:ok :: label, state :: State, }
spec CSGSphere3D.get_rings() :: {:ok :: label, state :: State, }
spec CSGSphere3D.get_smooth_faces() :: {:ok :: label, state :: State, }
spec CSGSphere3D.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CSGSphere3D.set_radial_segments(radial_segments :: int, ) :: {:ok :: label, state :: State, }
spec CSGSphere3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CSGSphere3D.set_rings(rings :: int, ) :: {:ok :: label, state :: State, }
spec CSGSphere3D.set_smooth_faces(smooth_faces :: bool, ) :: {:ok :: label, state :: State, }
spec CSGTorus3D.get_inner_radius() :: {:ok :: label, state :: State, }
spec CSGTorus3D.get_material() :: {:ok :: label, state :: State, }
spec CSGTorus3D.get_outer_radius() :: {:ok :: label, state :: State, }
spec CSGTorus3D.get_ring_sides() :: {:ok :: label, state :: State, }
spec CSGTorus3D.get_sides() :: {:ok :: label, state :: State, }
spec CSGTorus3D.get_smooth_faces() :: {:ok :: label, state :: State, }
spec CSGTorus3D.set_inner_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CSGTorus3D.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CSGTorus3D.set_outer_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CSGTorus3D.set_ring_sides(sides :: int, ) :: {:ok :: label, state :: State, }
spec CSGTorus3D.set_sides(sides :: int, ) :: {:ok :: label, state :: State, }
spec CSGTorus3D.set_smooth_faces(smooth_faces :: bool, ) :: {:ok :: label, state :: State, }
spec Callable.bind() :: {:ok :: label, state :: State, Callable}
spec Callable.bindv(arguments :: Array, ) :: {:ok :: label, state :: State, Callable}
spec Callable.call() :: {:ok :: label, state :: State, Variant}
spec Callable.call_deferred() :: {:ok :: label, state :: State, }
spec Callable.callv(arguments :: Array, ) :: {:ok :: label, state :: State, Variant}
spec Callable.get_bound_arguments() :: {:ok :: label, state :: State, Array}
spec Callable.get_bound_arguments_count() :: {:ok :: label, state :: State, int}
spec Callable.get_method() :: {:ok :: label, state :: State, StringName}
spec Callable.get_object() :: {:ok :: label, state :: State, Object}
spec Callable.get_object_id() :: {:ok :: label, state :: State, int}
spec Callable.hash() :: {:ok :: label, state :: State, int}
spec Callable.is_custom() :: {:ok :: label, state :: State, bool}
spec Callable.is_null() :: {:ok :: label, state :: State, bool}
spec Callable.is_standard() :: {:ok :: label, state :: State, bool}
spec Callable.is_valid() :: {:ok :: label, state :: State, bool}
spec Callable.rpc() :: {:ok :: label, state :: State, }
spec Callable.rpc_id(peer_id :: int, ) :: {:ok :: label, state :: State, }
spec Callable.unbind(argcount :: int, ) :: {:ok :: label, state :: State, Callable}
spec CallbackTweener.set_delay(delay :: float, ) :: {:ok :: label, state :: State, }
spec Camera2D.align() :: {:ok :: label, state :: State, }
spec Camera2D.force_update_scroll() :: {:ok :: label, state :: State, }
spec Camera2D.get_anchor_mode() :: {:ok :: label, state :: State, }
spec Camera2D.get_custom_viewport() :: {:ok :: label, state :: State, }
spec Camera2D.get_drag_horizontal_offset() :: {:ok :: label, state :: State, }
spec Camera2D.get_drag_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec Camera2D.get_drag_vertical_offset() :: {:ok :: label, state :: State, }
spec Camera2D.get_limit(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec Camera2D.get_offset() :: {:ok :: label, state :: State, }
spec Camera2D.get_position_smoothing_speed() :: {:ok :: label, state :: State, }
spec Camera2D.get_process_callback() :: {:ok :: label, state :: State, }
spec Camera2D.get_rotation_smoothing_speed() :: {:ok :: label, state :: State, }
spec Camera2D.get_screen_center_position() :: {:ok :: label, state :: State, }
spec Camera2D.get_target_position() :: {:ok :: label, state :: State, }
spec Camera2D.get_zoom() :: {:ok :: label, state :: State, }
spec Camera2D.is_current() :: {:ok :: label, state :: State, }
spec Camera2D.is_drag_horizontal_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_drag_vertical_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_ignoring_rotation() :: {:ok :: label, state :: State, }
spec Camera2D.is_limit_drawing_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_limit_smoothing_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_margin_drawing_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_position_smoothing_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_rotation_smoothing_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.is_screen_drawing_enabled() :: {:ok :: label, state :: State, }
spec Camera2D.make_current() :: {:ok :: label, state :: State, }
spec Camera2D.reset_smoothing() :: {:ok :: label, state :: State, }
spec Camera2D.set_anchor_mode(anchor_mode :: enum::Camera2D.AnchorMode, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_custom_viewport(viewport :: Node, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_drag_horizontal_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_drag_horizontal_offset(offset :: float, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_drag_margin(margin :: enum::Side, drag_margin :: float, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_drag_vertical_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_drag_vertical_offset(offset :: float, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_ignore_rotation(ignore :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_limit(margin :: enum::Side, limit :: int, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_limit_drawing_enabled(limit_drawing_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_limit_smoothing_enabled(limit_smoothing_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_margin_drawing_enabled(margin_drawing_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_position_smoothing_enabled(position_smoothing_speed :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_position_smoothing_speed(position_smoothing_speed :: float, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_process_callback(mode :: enum::Camera2D.Camera2DProcessCallback, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_rotation_smoothing_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_rotation_smoothing_speed(speed :: float, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_screen_drawing_enabled(screen_drawing_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera2D.set_zoom(zoom :: Vector2, ) :: {:ok :: label, state :: State, }
spec Camera3D.clear_current(enable_next :: bool, ) :: {:ok :: label, state :: State, }
spec Camera3D.get_attributes() :: {:ok :: label, state :: State, }
spec Camera3D.get_camera_rid() :: {:ok :: label, state :: State, }
spec Camera3D.get_camera_transform() :: {:ok :: label, state :: State, }
spec Camera3D.get_cull_mask() :: {:ok :: label, state :: State, }
spec Camera3D.get_cull_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec Camera3D.get_doppler_tracking() :: {:ok :: label, state :: State, }
spec Camera3D.get_environment() :: {:ok :: label, state :: State, }
spec Camera3D.get_far() :: {:ok :: label, state :: State, }
spec Camera3D.get_fov() :: {:ok :: label, state :: State, }
spec Camera3D.get_frustum() :: {:ok :: label, state :: State, }
spec Camera3D.get_frustum_offset() :: {:ok :: label, state :: State, }
spec Camera3D.get_h_offset() :: {:ok :: label, state :: State, }
spec Camera3D.get_keep_aspect_mode() :: {:ok :: label, state :: State, }
spec Camera3D.get_near() :: {:ok :: label, state :: State, }
spec Camera3D.get_override_projection() :: {:ok :: label, state :: State, }
spec Camera3D.get_projection() :: {:ok :: label, state :: State, }
spec Camera3D.get_pyramid_shape_rid() :: {:ok :: label, state :: State, }
spec Camera3D.get_size() :: {:ok :: label, state :: State, }
spec Camera3D.get_v_offset() :: {:ok :: label, state :: State, }
spec Camera3D.is_current() :: {:ok :: label, state :: State, }
spec Camera3D.is_position_behind(world_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Camera3D.is_position_in_frustum(world_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Camera3D.make_current() :: {:ok :: label, state :: State, }
spec Camera3D.project_local_ray_normal(screen_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Camera3D.project_position(screen_point :: Vector2, z_depth :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.project_ray_normal(screen_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Camera3D.project_ray_origin(screen_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_attributes(env :: CameraAttributes, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_cull_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_cull_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_current(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_doppler_tracking(mode :: enum::Camera3D.DopplerTracking, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_environment(env :: Environment, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_far(far :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_fov(fov :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_frustum(size :: float, offset :: Vector2, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_frustum_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_h_offset(offset :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_keep_aspect_mode(mode :: enum::Camera3D.KeepAspect, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_near(near :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_orthogonal(size :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_override_projection(projection_matrix :: Projection, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_perspective(fov :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_projection(mode :: enum::Camera3D.ProjectionType, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_size(size :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.set_v_offset(offset :: float, ) :: {:ok :: label, state :: State, }
spec Camera3D.unproject_position(world_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec CameraAttributes.get_auto_exposure_scale() :: {:ok :: label, state :: State, }
spec CameraAttributes.get_auto_exposure_speed() :: {:ok :: label, state :: State, }
spec CameraAttributes.get_exposure_multiplier() :: {:ok :: label, state :: State, }
spec CameraAttributes.get_exposure_sensitivity() :: {:ok :: label, state :: State, }
spec CameraAttributes.is_auto_exposure_enabled() :: {:ok :: label, state :: State, }
spec CameraAttributes.set_auto_exposure_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CameraAttributes.set_auto_exposure_scale(exposure_grey :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributes.set_auto_exposure_speed(exposure_speed :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributes.set_exposure_multiplier(multiplier :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributes.set_exposure_sensitivity(sensitivity :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_aperture() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_auto_exposure_max_exposure_value() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_auto_exposure_min_exposure_value() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_far() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_focal_length() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_focus_distance() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_fov() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_near() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.get_shutter_speed() :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_aperture(aperture :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_auto_exposure_max_exposure_value(exposure_value_max :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_auto_exposure_min_exposure_value(exposure_value_min :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_far(far :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_focal_length(focal_length :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_focus_distance(focus_distance :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_near(near :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPhysical.set_shutter_speed(shutter_speed :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_auto_exposure_max_sensitivity() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_auto_exposure_min_sensitivity() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_dof_blur_amount() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_dof_blur_far_distance() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_dof_blur_far_transition() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_dof_blur_near_distance() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.get_dof_blur_near_transition() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.is_dof_blur_far_enabled() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.is_dof_blur_near_enabled() :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_auto_exposure_max_sensitivity(max_sensitivity :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_auto_exposure_min_sensitivity(min_sensitivity :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_amount(amount :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_far_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_far_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_far_transition(distance :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_near_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_near_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CameraAttributesPractical.set_dof_blur_near_transition(distance :: float, ) :: {:ok :: label, state :: State, }
spec CameraFeed.get_datatype() :: {:ok :: label, state :: State, }
spec CameraFeed.get_id() :: {:ok :: label, state :: State, }
spec CameraFeed.get_name() :: {:ok :: label, state :: State, }
spec CameraFeed.get_position() :: {:ok :: label, state :: State, }
spec CameraFeed.get_transform() :: {:ok :: label, state :: State, }
spec CameraFeed.is_active() :: {:ok :: label, state :: State, }
spec CameraFeed.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec CameraFeed.set_transform(transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec CameraServer.add_feed(feed :: CameraFeed, ) :: {:ok :: label, state :: State, }
spec CameraServer.feeds() :: {:ok :: label, state :: State, }
spec CameraServer.get_feed(index :: int, ) :: {:ok :: label, state :: State, }
spec CameraServer.get_feed_count() :: {:ok :: label, state :: State, }
spec CameraServer.remove_feed(feed :: CameraFeed, ) :: {:ok :: label, state :: State, }
spec CameraTexture.get_camera_active() :: {:ok :: label, state :: State, }
spec CameraTexture.get_camera_feed_id() :: {:ok :: label, state :: State, }
spec CameraTexture.get_which_feed() :: {:ok :: label, state :: State, }
spec CameraTexture.set_camera_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec CameraTexture.set_camera_feed_id(feed_id :: int, ) :: {:ok :: label, state :: State, }
spec CameraTexture.set_which_feed(which_feed :: enum::CameraServer.FeedImage, ) :: {:ok :: label, state :: State, }
spec CanvasGroup.get_clear_margin() :: {:ok :: label, state :: State, }
spec CanvasGroup.get_fit_margin() :: {:ok :: label, state :: State, }
spec CanvasGroup.is_using_mipmaps() :: {:ok :: label, state :: State, }
spec CanvasGroup.set_clear_margin(clear_margin :: float, ) :: {:ok :: label, state :: State, }
spec CanvasGroup.set_fit_margin(fit_margin :: float, ) :: {:ok :: label, state :: State, }
spec CanvasGroup.set_use_mipmaps(use_mipmaps :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem._draw() :: {:ok :: label, state :: State, }
spec CanvasItem.draw_animation_slice(animation_length :: float, slice_begin :: float, slice_end :: float, offset :: float, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_arc(center :: Vector2, radius :: float, start_angle :: float, end_angle :: float, point_count :: int, color :: Color, width :: float, antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_char(font :: Font, pos :: Vector2, char :: String, font_size :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_char_outline(font :: Font, pos :: Vector2, char :: String, font_size :: int, size :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_circle(position :: Vector2, radius :: float, color :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_colored_polygon(points :: PackedVector2Array, color :: Color, uvs :: PackedVector2Array, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_dashed_line(from :: Vector2, to :: Vector2, color :: Color, width :: float, dash :: float, aligned :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_end_animation() :: {:ok :: label, state :: State, }
spec CanvasItem.draw_lcd_texture_rect_region(texture :: Texture2D, rect :: Rect2, src_rect :: Rect2, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_line(from :: Vector2, to :: Vector2, color :: Color, width :: float, antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_mesh(mesh :: Mesh, texture :: Texture2D, transform :: Transform2D, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_msdf_texture_rect_region(texture :: Texture2D, rect :: Rect2, src_rect :: Rect2, modulate :: Color, outline :: float, pixel_range :: float, scale :: float, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_multiline(points :: PackedVector2Array, color :: Color, width :: float, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_multiline_colors(points :: PackedVector2Array, colors :: PackedColorArray, width :: float, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_multiline_string(font :: Font, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, max_lines :: int, modulate :: Color, brk_flags :: bitfield::TextServer.LineBreakFlag, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_multiline_string_outline(font :: Font, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, max_lines :: int, size :: int, modulate :: Color, brk_flags :: bitfield::TextServer.LineBreakFlag, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_multimesh(multimesh :: MultiMesh, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_polygon(points :: PackedVector2Array, colors :: PackedColorArray, uvs :: PackedVector2Array, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_polyline(points :: PackedVector2Array, color :: Color, width :: float, antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_polyline_colors(points :: PackedVector2Array, colors :: PackedColorArray, width :: float, antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_primitive(points :: PackedVector2Array, colors :: PackedColorArray, uvs :: PackedVector2Array, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_rect(rect :: Rect2, color :: Color, filled :: bool, width :: float, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_set_transform(position :: Vector2, rotation :: float, scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_set_transform_matrix(xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_string(font :: Font, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, modulate :: Color, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_string_outline(font :: Font, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, size :: int, modulate :: Color, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_style_box(style_box :: StyleBox, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_texture(texture :: Texture2D, position :: Vector2, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_texture_rect(texture :: Texture2D, rect :: Rect2, tile :: bool, modulate :: Color, transpose :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.draw_texture_rect_region(texture :: Texture2D, rect :: Rect2, src_rect :: Rect2, modulate :: Color, transpose :: bool, clip_uv :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.force_update_transform() :: {:ok :: label, state :: State, }
spec CanvasItem.get_canvas() :: {:ok :: label, state :: State, }
spec CanvasItem.get_canvas_item() :: {:ok :: label, state :: State, }
spec CanvasItem.get_canvas_transform() :: {:ok :: label, state :: State, }
spec CanvasItem.get_clip_children_mode() :: {:ok :: label, state :: State, }
spec CanvasItem.get_global_mouse_position() :: {:ok :: label, state :: State, }
spec CanvasItem.get_global_transform() :: {:ok :: label, state :: State, }
spec CanvasItem.get_global_transform_with_canvas() :: {:ok :: label, state :: State, }
spec CanvasItem.get_light_mask() :: {:ok :: label, state :: State, }
spec CanvasItem.get_local_mouse_position() :: {:ok :: label, state :: State, }
spec CanvasItem.get_material() :: {:ok :: label, state :: State, }
spec CanvasItem.get_modulate() :: {:ok :: label, state :: State, }
spec CanvasItem.get_screen_transform() :: {:ok :: label, state :: State, }
spec CanvasItem.get_self_modulate() :: {:ok :: label, state :: State, }
spec CanvasItem.get_texture_filter() :: {:ok :: label, state :: State, }
spec CanvasItem.get_texture_repeat() :: {:ok :: label, state :: State, }
spec CanvasItem.get_transform() :: {:ok :: label, state :: State, }
spec CanvasItem.get_use_parent_material() :: {:ok :: label, state :: State, }
spec CanvasItem.get_viewport_rect() :: {:ok :: label, state :: State, }
spec CanvasItem.get_viewport_transform() :: {:ok :: label, state :: State, }
spec CanvasItem.get_visibility_layer() :: {:ok :: label, state :: State, }
spec CanvasItem.get_visibility_layer_bit(layer :: int, ) :: {:ok :: label, state :: State, }
spec CanvasItem.get_world_2d() :: {:ok :: label, state :: State, }
spec CanvasItem.get_z_index() :: {:ok :: label, state :: State, }
spec CanvasItem.hide() :: {:ok :: label, state :: State, }
spec CanvasItem.is_draw_behind_parent_enabled() :: {:ok :: label, state :: State, }
spec CanvasItem.is_local_transform_notification_enabled() :: {:ok :: label, state :: State, }
spec CanvasItem.is_set_as_top_level() :: {:ok :: label, state :: State, }
spec CanvasItem.is_transform_notification_enabled() :: {:ok :: label, state :: State, }
spec CanvasItem.is_visible() :: {:ok :: label, state :: State, }
spec CanvasItem.is_visible_in_tree() :: {:ok :: label, state :: State, }
spec CanvasItem.is_y_sort_enabled() :: {:ok :: label, state :: State, }
spec CanvasItem.is_z_relative() :: {:ok :: label, state :: State, }
spec CanvasItem.make_canvas_position_local(screen_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec CanvasItem.make_input_local(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec CanvasItem.move_to_front() :: {:ok :: label, state :: State, }
spec CanvasItem.queue_redraw() :: {:ok :: label, state :: State, }
spec CanvasItem.set_as_top_level(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_clip_children_mode(mode :: enum::CanvasItem.ClipChildrenMode, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_draw_behind_parent(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_light_mask(light_mask :: int, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_modulate(modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_notify_local_transform(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_notify_transform(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_self_modulate(self_modulate :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_texture_filter(mode :: enum::CanvasItem.TextureFilter, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_texture_repeat(mode :: enum::CanvasItem.TextureRepeat, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_use_parent_material(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_visibility_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_visibility_layer_bit(layer :: int, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_y_sort_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_z_as_relative(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItem.set_z_index(z_index :: int, ) :: {:ok :: label, state :: State, }
spec CanvasItem.show() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.get_blend_mode() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.get_light_mode() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.get_particles_anim_h_frames() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.get_particles_anim_loop() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.get_particles_anim_v_frames() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.get_particles_animation() :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.set_blend_mode(blend_mode :: enum::CanvasItemMaterial.BlendMode, ) :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.set_light_mode(light_mode :: enum::CanvasItemMaterial.LightMode, ) :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.set_particles_anim_h_frames(frames :: int, ) :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.set_particles_anim_loop(loop :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.set_particles_anim_v_frames(frames :: int, ) :: {:ok :: label, state :: State, }
spec CanvasItemMaterial.set_particles_animation(particles_anim :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.get_canvas() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_custom_viewport() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_final_transform() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_follow_viewport_scale() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_layer() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_offset() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_rotation() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_scale() :: {:ok :: label, state :: State, }
spec CanvasLayer.get_transform() :: {:ok :: label, state :: State, }
spec CanvasLayer.hide() :: {:ok :: label, state :: State, }
spec CanvasLayer.is_following_viewport() :: {:ok :: label, state :: State, }
spec CanvasLayer.is_visible() :: {:ok :: label, state :: State, }
spec CanvasLayer.set_custom_viewport(viewport :: Node, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_follow_viewport(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_follow_viewport_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_rotation(radians :: float, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_scale(scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_transform(transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.set_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec CanvasLayer.show() :: {:ok :: label, state :: State, }
spec CanvasModulate.get_color() :: {:ok :: label, state :: State, }
spec CanvasModulate.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.get_diffuse_texture() :: {:ok :: label, state :: State, }
spec CanvasTexture.get_normal_texture() :: {:ok :: label, state :: State, }
spec CanvasTexture.get_specular_color() :: {:ok :: label, state :: State, }
spec CanvasTexture.get_specular_shininess() :: {:ok :: label, state :: State, }
spec CanvasTexture.get_specular_texture() :: {:ok :: label, state :: State, }
spec CanvasTexture.get_texture_filter() :: {:ok :: label, state :: State, }
spec CanvasTexture.get_texture_repeat() :: {:ok :: label, state :: State, }
spec CanvasTexture.set_diffuse_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.set_normal_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.set_specular_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.set_specular_shininess(shininess :: float, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.set_specular_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.set_texture_filter(filter :: enum::CanvasItem.TextureFilter, ) :: {:ok :: label, state :: State, }
spec CanvasTexture.set_texture_repeat(repeat :: enum::CanvasItem.TextureRepeat, ) :: {:ok :: label, state :: State, }
spec CapsuleMesh.get_height() :: {:ok :: label, state :: State, }
spec CapsuleMesh.get_radial_segments() :: {:ok :: label, state :: State, }
spec CapsuleMesh.get_radius() :: {:ok :: label, state :: State, }
spec CapsuleMesh.get_rings() :: {:ok :: label, state :: State, }
spec CapsuleMesh.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CapsuleMesh.set_radial_segments(segments :: int, ) :: {:ok :: label, state :: State, }
spec CapsuleMesh.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CapsuleMesh.set_rings(rings :: int, ) :: {:ok :: label, state :: State, }
spec CapsuleShape2D.get_height() :: {:ok :: label, state :: State, }
spec CapsuleShape2D.get_radius() :: {:ok :: label, state :: State, }
spec CapsuleShape2D.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CapsuleShape2D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CapsuleShape3D.get_height() :: {:ok :: label, state :: State, }
spec CapsuleShape3D.get_radius() :: {:ok :: label, state :: State, }
spec CapsuleShape3D.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CapsuleShape3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CenterContainer.is_using_top_left() :: {:ok :: label, state :: State, }
spec CenterContainer.set_use_top_left(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.get_color() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_elapsed_time() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_environment() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_font() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_glyph_count() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_glyph_flags() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_glyph_index() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_offset() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_range() :: {:ok :: label, state :: State, }
spec CharFXTransform.get_relative_index() :: {:ok :: label, state :: State, }
spec CharFXTransform.is_outline() :: {:ok :: label, state :: State, }
spec CharFXTransform.is_visible() :: {:ok :: label, state :: State, }
spec CharFXTransform.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_elapsed_time(time :: float, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_environment(environment :: Dictionary, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_font(font :: RID, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_glyph_count(glyph_count :: int, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_glyph_flags(glyph_flags :: int, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_glyph_index(glyph_index :: int, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_outline(outline :: bool, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_range(range :: Vector2i, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_relative_index(relative_index :: int, ) :: {:ok :: label, state :: State, }
spec CharFXTransform.set_visibility(visibility :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_floor_angle(up_direction :: Vector2, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_floor_max_angle() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_floor_normal() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_floor_snap_length() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_last_motion() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_last_slide_collision() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_max_slides() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_motion_mode() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_platform_floor_layers() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_platform_on_leave() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_platform_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_platform_wall_layers() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_position_delta() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_real_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_safe_margin() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_slide_collision(slide_idx :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_slide_collision_count() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_up_direction() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_wall_min_slide_angle() :: {:ok :: label, state :: State, }
spec CharacterBody2D.get_wall_normal() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_floor_block_on_wall_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_floor_constant_speed_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_floor_stop_on_slope_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_on_ceiling() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_on_ceiling_only() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_on_floor() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_on_floor_only() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_on_wall() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_on_wall_only() :: {:ok :: label, state :: State, }
spec CharacterBody2D.is_slide_on_ceiling_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody2D.move_and_slide() :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_floor_block_on_wall_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_floor_constant_speed_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_floor_max_angle(radians :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_floor_snap_length(floor_snap_length :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_floor_stop_on_slope_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_max_slides(max_slides :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_motion_mode(mode :: enum::CharacterBody2D.MotionMode, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_platform_floor_layers(exclude_layer :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_platform_on_leave(on_leave_apply_velocity :: enum::CharacterBody2D.PlatformOnLeave, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_platform_wall_layers(exclude_layer :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_safe_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_slide_on_ceiling_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_up_direction(up_direction :: Vector2, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_velocity(velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec CharacterBody2D.set_wall_min_slide_angle(radians :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_floor_angle(up_direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_floor_max_angle() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_floor_normal() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_floor_snap_length() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_last_motion() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_last_slide_collision() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_max_slides() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_motion_mode() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_platform_angular_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_platform_floor_layers() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_platform_on_leave() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_platform_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_platform_wall_layers() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_position_delta() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_real_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_safe_margin() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_slide_collision(slide_idx :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_slide_collision_count() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_up_direction() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_velocity() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_wall_min_slide_angle() :: {:ok :: label, state :: State, }
spec CharacterBody3D.get_wall_normal() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_floor_block_on_wall_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_floor_constant_speed_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_floor_stop_on_slope_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_on_ceiling() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_on_ceiling_only() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_on_floor() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_on_floor_only() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_on_wall() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_on_wall_only() :: {:ok :: label, state :: State, }
spec CharacterBody3D.is_slide_on_ceiling_enabled() :: {:ok :: label, state :: State, }
spec CharacterBody3D.move_and_slide() :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_floor_block_on_wall_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_floor_constant_speed_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_floor_max_angle(radians :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_floor_snap_length(floor_snap_length :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_floor_stop_on_slope_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_max_slides(max_slides :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_motion_mode(mode :: enum::CharacterBody3D.MotionMode, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_platform_floor_layers(exclude_layer :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_platform_on_leave(on_leave_apply_velocity :: enum::CharacterBody3D.PlatformOnLeave, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_platform_wall_layers(exclude_layer :: int, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_safe_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_slide_on_ceiling_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_up_direction(up_direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec CharacterBody3D.set_wall_min_slide_angle(radians :: float, ) :: {:ok :: label, state :: State, }
spec CircleShape2D.get_radius() :: {:ok :: label, state :: State, }
spec CircleShape2D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec ClassDB.can_instantiate(class :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_exists(class :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_enum_constants(class :: StringName, enum :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_enum_list(class :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_integer_constant(class :: StringName, name :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_integer_constant_enum(class :: StringName, name :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_integer_constant_list(class :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_method_list(class :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_property(object :: Object, property :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_property_list(class :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_signal(class :: StringName, signal :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_get_signal_list(class :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_has_enum(class :: StringName, name :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_has_integer_constant(class :: StringName, name :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_has_method(class :: StringName, method :: StringName, no_inheritance :: bool, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_has_signal(class :: StringName, signal :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.class_set_property(object :: Object, property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec ClassDB.get_class_list() :: {:ok :: label, state :: State, }
spec ClassDB.get_inheriters_from_class(class :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.get_parent_class(class :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.instantiate(class :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.is_class_enabled(class :: StringName, ) :: {:ok :: label, state :: State, }
spec ClassDB.is_parent_class(class :: StringName, inherits :: StringName, ) :: {:ok :: label, state :: State, }
spec CodeEdit._confirm_code_completion(replace :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit._filter_code_completion_candidates(candidates :: typedarray::Dictionary, ) :: {:ok :: label, state :: State, }
spec CodeEdit._request_code_completion(force :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.add_auto_brace_completion_pair(start_key :: String, end_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.add_code_completion_option(type :: enum::CodeEdit.CodeCompletionKind, display_text :: String, insert_text :: String, text_color :: Color, icon :: Resource, value :: Variant, ) :: {:ok :: label, state :: State, }
spec CodeEdit.add_comment_delimiter(start_key :: String, end_key :: String, line_only :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.add_string_delimiter(start_key :: String, end_key :: String, line_only :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.can_fold_line(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.cancel_code_completion() :: {:ok :: label, state :: State, }
spec CodeEdit.clear_bookmarked_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.clear_breakpointed_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.clear_comment_delimiters() :: {:ok :: label, state :: State, }
spec CodeEdit.clear_executing_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.clear_string_delimiters() :: {:ok :: label, state :: State, }
spec CodeEdit.confirm_code_completion(replace :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.do_indent() :: {:ok :: label, state :: State, }
spec CodeEdit.fold_all_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.fold_line(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_auto_brace_completion_close_key(open_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_auto_brace_completion_pairs() :: {:ok :: label, state :: State, }
spec CodeEdit.get_auto_indent_prefixes() :: {:ok :: label, state :: State, }
spec CodeEdit.get_bookmarked_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.get_breakpointed_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.get_code_completion_option(index :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_code_completion_options() :: {:ok :: label, state :: State, }
spec CodeEdit.get_code_completion_prefixes() :: {:ok :: label, state :: State, }
spec CodeEdit.get_code_completion_selected_index() :: {:ok :: label, state :: State, }
spec CodeEdit.get_comment_delimiters() :: {:ok :: label, state :: State, }
spec CodeEdit.get_delimiter_end_key(delimiter_index :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_delimiter_end_position(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_delimiter_start_key(delimiter_index :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_delimiter_start_position(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.get_executing_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.get_folded_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.get_indent_size() :: {:ok :: label, state :: State, }
spec CodeEdit.get_line_length_guidelines() :: {:ok :: label, state :: State, }
spec CodeEdit.get_string_delimiters() :: {:ok :: label, state :: State, }
spec CodeEdit.get_text_for_code_completion() :: {:ok :: label, state :: State, }
spec CodeEdit.get_text_for_symbol_lookup() :: {:ok :: label, state :: State, }
spec CodeEdit.has_auto_brace_completion_close_key(close_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.has_auto_brace_completion_open_key(open_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.has_comment_delimiter(start_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.has_string_delimiter(start_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.indent_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.is_auto_brace_completion_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.is_auto_indent_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.is_code_completion_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.is_draw_line_numbers_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.is_drawing_bookmarks_gutter() :: {:ok :: label, state :: State, }
spec CodeEdit.is_drawing_breakpoints_gutter() :: {:ok :: label, state :: State, }
spec CodeEdit.is_drawing_executing_lines_gutter() :: {:ok :: label, state :: State, }
spec CodeEdit.is_drawing_fold_gutter() :: {:ok :: label, state :: State, }
spec CodeEdit.is_highlight_matching_braces_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.is_in_comment(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.is_in_string(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.is_indent_using_spaces() :: {:ok :: label, state :: State, }
spec CodeEdit.is_line_bookmarked(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.is_line_breakpointed(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.is_line_executing(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.is_line_folded(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.is_line_folding_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.is_line_numbers_zero_padded() :: {:ok :: label, state :: State, }
spec CodeEdit.is_symbol_lookup_on_click_enabled() :: {:ok :: label, state :: State, }
spec CodeEdit.remove_comment_delimiter(start_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.remove_string_delimiter(start_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.request_code_completion(force :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_auto_brace_completion_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_auto_brace_completion_pairs(pairs :: Dictionary, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_auto_indent_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_auto_indent_prefixes(prefixes :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_code_completion_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_code_completion_prefixes(prefixes :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_code_completion_selected_index(index :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_code_hint(code_hint :: String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_code_hint_draw_below(draw_below :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_comment_delimiters(comment_delimiters :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_draw_bookmarks_gutter(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_draw_breakpoints_gutter(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_draw_executing_lines_gutter(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_draw_fold_gutter(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_draw_line_numbers(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_highlight_matching_braces_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_indent_size(size :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_indent_using_spaces(use_spaces :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_line_as_bookmarked(line :: int, bookmarked :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_line_as_breakpoint(line :: int, breakpointed :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_line_as_executing(line :: int, executing :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_line_folding_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_line_length_guidelines(guideline_columns :: typedarray::int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_line_numbers_zero_padded(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_string_delimiters(string_delimiters :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_symbol_lookup_on_click_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.set_symbol_lookup_word_as_valid(valid :: bool, ) :: {:ok :: label, state :: State, }
spec CodeEdit.toggle_foldable_line(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.unfold_all_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.unfold_line(line :: int, ) :: {:ok :: label, state :: State, }
spec CodeEdit.unindent_lines() :: {:ok :: label, state :: State, }
spec CodeEdit.update_code_completion_options(force :: bool, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.add_color_region(start_key :: String, end_key :: String, color :: Color, line_only :: bool, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.add_keyword_color(keyword :: String, color :: Color, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.add_member_keyword_color(member_keyword :: String, color :: Color, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.clear_color_regions() :: {:ok :: label, state :: State, }
spec CodeHighlighter.clear_keyword_colors() :: {:ok :: label, state :: State, }
spec CodeHighlighter.clear_member_keyword_colors() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_color_regions() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_function_color() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_keyword_color(keyword :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_keyword_colors() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_member_keyword_color(member_keyword :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_member_keyword_colors() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_member_variable_color() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_number_color() :: {:ok :: label, state :: State, }
spec CodeHighlighter.get_symbol_color() :: {:ok :: label, state :: State, }
spec CodeHighlighter.has_color_region(start_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.has_keyword_color(keyword :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.has_member_keyword_color(member_keyword :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.remove_color_region(start_key :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.remove_keyword_color(keyword :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.remove_member_keyword_color(member_keyword :: String, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_color_regions(color_regions :: Dictionary, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_function_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_keyword_colors(keywords :: Dictionary, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_member_keyword_colors(member_keyword :: Dictionary, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_member_variable_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_number_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CodeHighlighter.set_symbol_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D._input_event(viewport :: Viewport, event :: InputEvent, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D._mouse_enter() :: {:ok :: label, state :: State, }
spec CollisionObject2D._mouse_exit() :: {:ok :: label, state :: State, }
spec CollisionObject2D._mouse_shape_enter(shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D._mouse_shape_exit(shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.create_shape_owner(owner :: Object, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_collision_layer() :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_collision_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_collision_mask() :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_collision_priority() :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_disable_mode() :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_rid() :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_shape_owner_one_way_collision_margin(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.get_shape_owners() :: {:ok :: label, state :: State, }
spec CollisionObject2D.is_pickable() :: {:ok :: label, state :: State, }
spec CollisionObject2D.is_shape_owner_disabled(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.is_shape_owner_one_way_collision_enabled(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.remove_shape_owner(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_collision_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_collision_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_collision_priority(priority :: float, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_disable_mode(mode :: enum::CollisionObject2D.DisableMode, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.set_pickable(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_find_owner(shape_index :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_add_shape(owner_id :: int, shape :: Shape2D, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_clear_shapes(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_get_owner(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_get_shape(owner_id :: int, shape_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_get_shape_count(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_get_shape_index(owner_id :: int, shape_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_get_transform(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_remove_shape(owner_id :: int, shape_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_set_disabled(owner_id :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_set_one_way_collision(owner_id :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_set_one_way_collision_margin(owner_id :: int, margin :: float, ) :: {:ok :: label, state :: State, }
spec CollisionObject2D.shape_owner_set_transform(owner_id :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D._input_event(camera :: Camera3D, event :: InputEvent, position :: Vector3, normal :: Vector3, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D._mouse_enter() :: {:ok :: label, state :: State, }
spec CollisionObject3D._mouse_exit() :: {:ok :: label, state :: State, }
spec CollisionObject3D.create_shape_owner(owner :: Object, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_capture_input_on_drag() :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_collision_layer() :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_collision_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_collision_priority() :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_disable_mode() :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_rid() :: {:ok :: label, state :: State, }
spec CollisionObject3D.get_shape_owners() :: {:ok :: label, state :: State, }
spec CollisionObject3D.is_ray_pickable() :: {:ok :: label, state :: State, }
spec CollisionObject3D.is_shape_owner_disabled(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.remove_shape_owner(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_capture_input_on_drag(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_collision_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_collision_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_collision_priority(priority :: float, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_disable_mode(mode :: enum::CollisionObject3D.DisableMode, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.set_ray_pickable(ray_pickable :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_find_owner(shape_index :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_add_shape(owner_id :: int, shape :: Shape3D, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_clear_shapes(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_get_owner(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_get_shape(owner_id :: int, shape_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_get_shape_count(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_get_shape_index(owner_id :: int, shape_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_get_transform(owner_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_remove_shape(owner_id :: int, shape_id :: int, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_set_disabled(owner_id :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionObject3D.shape_owner_set_transform(owner_id :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.get_build_mode() :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.get_one_way_collision_margin() :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.get_polygon() :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.is_disabled() :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.is_one_way_collision_enabled() :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.set_build_mode(build_mode :: enum::CollisionPolygon2D.BuildMode, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.set_disabled(disabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.set_one_way_collision(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.set_one_way_collision_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon2D.set_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.get_depth() :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.get_margin() :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.get_polygon() :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.is_disabled() :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.set_depth(depth :: float, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.set_disabled(disabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec CollisionPolygon3D.set_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec CollisionShape2D.get_debug_color() :: {:ok :: label, state :: State, }
spec CollisionShape2D.get_one_way_collision_margin() :: {:ok :: label, state :: State, }
spec CollisionShape2D.get_shape() :: {:ok :: label, state :: State, }
spec CollisionShape2D.is_disabled() :: {:ok :: label, state :: State, }
spec CollisionShape2D.is_one_way_collision_enabled() :: {:ok :: label, state :: State, }
spec CollisionShape2D.set_debug_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CollisionShape2D.set_disabled(disabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionShape2D.set_one_way_collision(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionShape2D.set_one_way_collision_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec CollisionShape2D.set_shape(shape :: Shape2D, ) :: {:ok :: label, state :: State, }
spec CollisionShape3D.get_shape() :: {:ok :: label, state :: State, }
spec CollisionShape3D.is_disabled() :: {:ok :: label, state :: State, }
spec CollisionShape3D.make_convex_from_siblings() :: {:ok :: label, state :: State, }
spec CollisionShape3D.resource_changed(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec CollisionShape3D.set_disabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec CollisionShape3D.set_shape(shape :: Shape3D, ) :: {:ok :: label, state :: State, }
spec Color.blend(over :: Color, ) :: {:ok :: label, state :: State, Color}
spec Color.clamp(min :: Color, max :: Color, ) :: {:ok :: label, state :: State, Color}
spec Color.darkened(amount :: float, ) :: {:ok :: label, state :: State, Color}
spec Color.from_hsv(h :: float, s :: float, v :: float, alpha :: float, ) :: {:ok :: label, state :: State, Color}
spec Color.from_ok_hsl(h :: float, s :: float, l :: float, alpha :: float, ) :: {:ok :: label, state :: State, Color}
spec Color.from_rgbe9995(rgbe :: int, ) :: {:ok :: label, state :: State, Color}
spec Color.from_string(str :: String, default :: Color, ) :: {:ok :: label, state :: State, Color}
spec Color.get_luminance() :: {:ok :: label, state :: State, float}
spec Color.hex(hex :: int, ) :: {:ok :: label, state :: State, Color}
spec Color.hex64(hex :: int, ) :: {:ok :: label, state :: State, Color}
spec Color.html(rgba :: String, ) :: {:ok :: label, state :: State, Color}
spec Color.html_is_valid(color :: String, ) :: {:ok :: label, state :: State, bool}
spec Color.inverted() :: {:ok :: label, state :: State, Color}
spec Color.is_equal_approx(to :: Color, ) :: {:ok :: label, state :: State, bool}
spec Color.lerp(to :: Color, weight :: float, ) :: {:ok :: label, state :: State, Color}
spec Color.lightened(amount :: float, ) :: {:ok :: label, state :: State, Color}
spec Color.linear_to_srgb() :: {:ok :: label, state :: State, Color}
spec Color.srgb_to_linear() :: {:ok :: label, state :: State, Color}
spec Color.to_abgr32() :: {:ok :: label, state :: State, int}
spec Color.to_abgr64() :: {:ok :: label, state :: State, int}
spec Color.to_argb32() :: {:ok :: label, state :: State, int}
spec Color.to_argb64() :: {:ok :: label, state :: State, int}
spec Color.to_html(with_alpha :: bool, ) :: {:ok :: label, state :: State, String}
spec Color.to_rgba32() :: {:ok :: label, state :: State, int}
spec Color.to_rgba64() :: {:ok :: label, state :: State, int}
spec ColorPicker.add_preset(color :: Color, ) :: {:ok :: label, state :: State, }
spec ColorPicker.add_recent_preset(color :: Color, ) :: {:ok :: label, state :: State, }
spec ColorPicker.are_modes_visible() :: {:ok :: label, state :: State, }
spec ColorPicker.are_presets_visible() :: {:ok :: label, state :: State, }
spec ColorPicker.are_sliders_visible() :: {:ok :: label, state :: State, }
spec ColorPicker.are_swatches_enabled() :: {:ok :: label, state :: State, }
spec ColorPicker.erase_preset(color :: Color, ) :: {:ok :: label, state :: State, }
spec ColorPicker.erase_recent_preset(color :: Color, ) :: {:ok :: label, state :: State, }
spec ColorPicker.get_color_mode() :: {:ok :: label, state :: State, }
spec ColorPicker.get_pick_color() :: {:ok :: label, state :: State, }
spec ColorPicker.get_picker_shape() :: {:ok :: label, state :: State, }
spec ColorPicker.get_presets() :: {:ok :: label, state :: State, }
spec ColorPicker.get_recent_presets() :: {:ok :: label, state :: State, }
spec ColorPicker.is_deferred_mode() :: {:ok :: label, state :: State, }
spec ColorPicker.is_editing_alpha() :: {:ok :: label, state :: State, }
spec ColorPicker.is_hex_visible() :: {:ok :: label, state :: State, }
spec ColorPicker.is_sampler_visible() :: {:ok :: label, state :: State, }
spec ColorPicker.set_can_add_swatches(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_color_mode(color_mode :: enum::ColorPicker.ColorModeType, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_deferred_mode(mode :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_edit_alpha(show :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_hex_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_modes_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_pick_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_picker_shape(shape :: enum::ColorPicker.PickerShapeType, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_presets_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_sampler_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPicker.set_sliders_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPickerButton.get_pick_color() :: {:ok :: label, state :: State, }
spec ColorPickerButton.get_picker() :: {:ok :: label, state :: State, }
spec ColorPickerButton.get_popup() :: {:ok :: label, state :: State, }
spec ColorPickerButton.is_editing_alpha() :: {:ok :: label, state :: State, }
spec ColorPickerButton.set_edit_alpha(show :: bool, ) :: {:ok :: label, state :: State, }
spec ColorPickerButton.set_pick_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ColorRect.get_color() :: {:ok :: label, state :: State, }
spec ColorRect.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec CompressedTexture2D.get_load_path() :: {:ok :: label, state :: State, }
spec CompressedTexture2D.load(path :: String, ) :: {:ok :: label, state :: State, }
spec CompressedTexture3D.get_load_path() :: {:ok :: label, state :: State, }
spec CompressedTexture3D.load(path :: String, ) :: {:ok :: label, state :: State, }
spec CompressedTextureLayered.get_load_path() :: {:ok :: label, state :: State, }
spec CompressedTextureLayered.load(path :: String, ) :: {:ok :: label, state :: State, }
spec ConcavePolygonShape2D.get_segments() :: {:ok :: label, state :: State, }
spec ConcavePolygonShape2D.set_segments(segments :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec ConcavePolygonShape3D.get_faces() :: {:ok :: label, state :: State, }
spec ConcavePolygonShape3D.is_backface_collision_enabled() :: {:ok :: label, state :: State, }
spec ConcavePolygonShape3D.set_backface_collision_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ConcavePolygonShape3D.set_faces(faces :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec ConeTwistJoint3D.get_param(param :: enum::ConeTwistJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec ConeTwistJoint3D.set_param(param :: enum::ConeTwistJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec ConfigFile.clear() :: {:ok :: label, state :: State, }
spec ConfigFile.encode_to_text() :: {:ok :: label, state :: State, }
spec ConfigFile.erase_section(section :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.erase_section_key(section :: String, key :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.get_section_keys(section :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.get_sections() :: {:ok :: label, state :: State, }
spec ConfigFile.get_value(section :: String, key :: String, default :: Variant, ) :: {:ok :: label, state :: State, }
spec ConfigFile.has_section(section :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.has_section_key(section :: String, key :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.load(path :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.load_encrypted(path :: String, key :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec ConfigFile.load_encrypted_pass(path :: String, password :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.parse(data :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.save(path :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.save_encrypted(path :: String, key :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec ConfigFile.save_encrypted_pass(path :: String, password :: String, ) :: {:ok :: label, state :: State, }
spec ConfigFile.set_value(section :: String, key :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec ConfirmationDialog.get_cancel_button() :: {:ok :: label, state :: State, }
spec ConfirmationDialog.get_cancel_button_text() :: {:ok :: label, state :: State, }
spec ConfirmationDialog.set_cancel_button_text(text :: String, ) :: {:ok :: label, state :: State, }
spec Container._get_allowed_size_flags_horizontal() :: {:ok :: label, state :: State, }
spec Container._get_allowed_size_flags_vertical() :: {:ok :: label, state :: State, }
spec Container.fit_child_in_rect(child :: Control, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec Container.queue_sort() :: {:ok :: label, state :: State, }
spec Control._can_drop_data(at_position :: Vector2, data :: Variant, ) :: {:ok :: label, state :: State, }
spec Control._drop_data(at_position :: Vector2, data :: Variant, ) :: {:ok :: label, state :: State, }
spec Control._get_drag_data(at_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control._get_minimum_size() :: {:ok :: label, state :: State, }
spec Control._gui_input(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Control._has_point(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control._make_custom_tooltip(for_text :: String, ) :: {:ok :: label, state :: State, }
spec Control._structured_text_parser(args :: Array, text :: String, ) :: {:ok :: label, state :: State, }
spec Control.accept_event() :: {:ok :: label, state :: State, }
spec Control.add_theme_color_override(name :: StringName, color :: Color, ) :: {:ok :: label, state :: State, }
spec Control.add_theme_constant_override(name :: StringName, constant :: int, ) :: {:ok :: label, state :: State, }
spec Control.add_theme_font_override(name :: StringName, font :: Font, ) :: {:ok :: label, state :: State, }
spec Control.add_theme_font_size_override(name :: StringName, font_size :: int, ) :: {:ok :: label, state :: State, }
spec Control.add_theme_icon_override(name :: StringName, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Control.add_theme_stylebox_override(name :: StringName, stylebox :: StyleBox, ) :: {:ok :: label, state :: State, }
spec Control.begin_bulk_theme_override() :: {:ok :: label, state :: State, }
spec Control.end_bulk_theme_override() :: {:ok :: label, state :: State, }
spec Control.find_next_valid_focus() :: {:ok :: label, state :: State, }
spec Control.find_prev_valid_focus() :: {:ok :: label, state :: State, }
spec Control.force_drag(data :: Variant, preview :: Control, ) :: {:ok :: label, state :: State, }
spec Control.get_anchor(side :: enum::Side, ) :: {:ok :: label, state :: State, }
spec Control.get_begin() :: {:ok :: label, state :: State, }
spec Control.get_combined_minimum_size() :: {:ok :: label, state :: State, }
spec Control.get_cursor_shape(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.get_custom_minimum_size() :: {:ok :: label, state :: State, }
spec Control.get_default_cursor_shape() :: {:ok :: label, state :: State, }
spec Control.get_end() :: {:ok :: label, state :: State, }
spec Control.get_focus_mode() :: {:ok :: label, state :: State, }
spec Control.get_focus_neighbor(side :: enum::Side, ) :: {:ok :: label, state :: State, }
spec Control.get_focus_next() :: {:ok :: label, state :: State, }
spec Control.get_focus_previous() :: {:ok :: label, state :: State, }
spec Control.get_global_position() :: {:ok :: label, state :: State, }
spec Control.get_global_rect() :: {:ok :: label, state :: State, }
spec Control.get_h_grow_direction() :: {:ok :: label, state :: State, }
spec Control.get_h_size_flags() :: {:ok :: label, state :: State, }
spec Control.get_layout_direction() :: {:ok :: label, state :: State, }
spec Control.get_minimum_size() :: {:ok :: label, state :: State, }
spec Control.get_mouse_filter() :: {:ok :: label, state :: State, }
spec Control.get_offset(offset :: enum::Side, ) :: {:ok :: label, state :: State, }
spec Control.get_parent_area_size() :: {:ok :: label, state :: State, }
spec Control.get_parent_control() :: {:ok :: label, state :: State, }
spec Control.get_pivot_offset() :: {:ok :: label, state :: State, }
spec Control.get_position() :: {:ok :: label, state :: State, }
spec Control.get_rect() :: {:ok :: label, state :: State, }
spec Control.get_rotation() :: {:ok :: label, state :: State, }
spec Control.get_rotation_degrees() :: {:ok :: label, state :: State, }
spec Control.get_scale() :: {:ok :: label, state :: State, }
spec Control.get_screen_position() :: {:ok :: label, state :: State, }
spec Control.get_shortcut_context() :: {:ok :: label, state :: State, }
spec Control.get_size() :: {:ok :: label, state :: State, }
spec Control.get_stretch_ratio() :: {:ok :: label, state :: State, }
spec Control.get_theme() :: {:ok :: label, state :: State, }
spec Control.get_theme_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.get_theme_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.get_theme_default_base_scale() :: {:ok :: label, state :: State, }
spec Control.get_theme_default_font() :: {:ok :: label, state :: State, }
spec Control.get_theme_default_font_size() :: {:ok :: label, state :: State, }
spec Control.get_theme_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.get_theme_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.get_theme_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.get_theme_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.get_theme_type_variation() :: {:ok :: label, state :: State, }
spec Control.get_tooltip(at_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.get_tooltip_text() :: {:ok :: label, state :: State, }
spec Control.get_v_grow_direction() :: {:ok :: label, state :: State, }
spec Control.get_v_size_flags() :: {:ok :: label, state :: State, }
spec Control.grab_click_focus() :: {:ok :: label, state :: State, }
spec Control.grab_focus() :: {:ok :: label, state :: State, }
spec Control.has_focus() :: {:ok :: label, state :: State, }
spec Control.has_theme_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_color_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_constant_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_font_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_font_size_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_icon_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.has_theme_stylebox_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.is_auto_translating() :: {:ok :: label, state :: State, }
spec Control.is_clipping_contents() :: {:ok :: label, state :: State, }
spec Control.is_drag_successful() :: {:ok :: label, state :: State, }
spec Control.is_force_pass_scroll_events() :: {:ok :: label, state :: State, }
spec Control.is_layout_rtl() :: {:ok :: label, state :: State, }
spec Control.is_localizing_numeral_system() :: {:ok :: label, state :: State, }
spec Control.release_focus() :: {:ok :: label, state :: State, }
spec Control.remove_theme_color_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.remove_theme_constant_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.remove_theme_font_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.remove_theme_font_size_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.remove_theme_icon_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.remove_theme_stylebox_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.reset_size() :: {:ok :: label, state :: State, }
spec Control.set_anchor(side :: enum::Side, anchor :: float, keep_offset :: bool, push_opposite_anchor :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_anchor_and_offset(side :: enum::Side, anchor :: float, offset :: float, push_opposite_anchor :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_anchors_and_offsets_preset(preset :: enum::Control.LayoutPreset, resize_mode :: enum::Control.LayoutPresetMode, margin :: int, ) :: {:ok :: label, state :: State, }
spec Control.set_anchors_preset(preset :: enum::Control.LayoutPreset, keep_offsets :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_auto_translate(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_begin(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.set_clip_contents(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_custom_minimum_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.set_default_cursor_shape(shape :: enum::Control.CursorShape, ) :: {:ok :: label, state :: State, }
spec Control.set_drag_forwarding(drag_func :: Callable, can_drop_func :: Callable, drop_func :: Callable, ) :: {:ok :: label, state :: State, }
spec Control.set_drag_preview(control :: Control, ) :: {:ok :: label, state :: State, }
spec Control.set_end(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.set_focus_mode(mode :: enum::Control.FocusMode, ) :: {:ok :: label, state :: State, }
spec Control.set_focus_neighbor(side :: enum::Side, neighbor :: NodePath, ) :: {:ok :: label, state :: State, }
spec Control.set_focus_next(next :: NodePath, ) :: {:ok :: label, state :: State, }
spec Control.set_focus_previous(previous :: NodePath, ) :: {:ok :: label, state :: State, }
spec Control.set_force_pass_scroll_events(force_pass_scroll_events :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_global_position(position :: Vector2, keep_offsets :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_h_grow_direction(direction :: enum::Control.GrowDirection, ) :: {:ok :: label, state :: State, }
spec Control.set_h_size_flags(flags :: bitfield::Control.SizeFlags, ) :: {:ok :: label, state :: State, }
spec Control.set_layout_direction(direction :: enum::Control.LayoutDirection, ) :: {:ok :: label, state :: State, }
spec Control.set_localize_numeral_system(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_mouse_filter(filter :: enum::Control.MouseFilter, ) :: {:ok :: label, state :: State, }
spec Control.set_offset(side :: enum::Side, offset :: float, ) :: {:ok :: label, state :: State, }
spec Control.set_offsets_preset(preset :: enum::Control.LayoutPreset, resize_mode :: enum::Control.LayoutPresetMode, margin :: int, ) :: {:ok :: label, state :: State, }
spec Control.set_pivot_offset(pivot_offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.set_position(position :: Vector2, keep_offsets :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_rotation(radians :: float, ) :: {:ok :: label, state :: State, }
spec Control.set_rotation_degrees(degrees :: float, ) :: {:ok :: label, state :: State, }
spec Control.set_scale(scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec Control.set_shortcut_context(node :: Node, ) :: {:ok :: label, state :: State, }
spec Control.set_size(size :: Vector2, keep_offsets :: bool, ) :: {:ok :: label, state :: State, }
spec Control.set_stretch_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec Control.set_theme(theme :: Theme, ) :: {:ok :: label, state :: State, }
spec Control.set_theme_type_variation(theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Control.set_tooltip_text(hint :: String, ) :: {:ok :: label, state :: State, }
spec Control.set_v_grow_direction(direction :: enum::Control.GrowDirection, ) :: {:ok :: label, state :: State, }
spec Control.set_v_size_flags(flags :: bitfield::Control.SizeFlags, ) :: {:ok :: label, state :: State, }
spec Control.update_minimum_size() :: {:ok :: label, state :: State, }
spec Control.warp_mouse(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec ConvexPolygonShape2D.get_points() :: {:ok :: label, state :: State, }
spec ConvexPolygonShape2D.set_point_cloud(point_cloud :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec ConvexPolygonShape2D.set_points(points :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec ConvexPolygonShape3D.get_points() :: {:ok :: label, state :: State, }
spec ConvexPolygonShape3D.set_points(points :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec Crypto.constant_time_compare(trusted :: PackedByteArray, received :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Crypto.decrypt(key :: CryptoKey, ciphertext :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Crypto.encrypt(key :: CryptoKey, plaintext :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Crypto.generate_random_bytes(size :: int, ) :: {:ok :: label, state :: State, }
spec Crypto.generate_rsa(size :: int, ) :: {:ok :: label, state :: State, }
spec Crypto.generate_self_signed_certificate(key :: CryptoKey, issuer_name :: String, not_before :: String, not_after :: String, ) :: {:ok :: label, state :: State, }
spec Crypto.hmac_digest(hash_type :: enum::HashingContext.HashType, key :: PackedByteArray, msg :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Crypto.sign(hash_type :: enum::HashingContext.HashType, hash :: PackedByteArray, key :: CryptoKey, ) :: {:ok :: label, state :: State, }
spec Crypto.verify(hash_type :: enum::HashingContext.HashType, hash :: PackedByteArray, signature :: PackedByteArray, key :: CryptoKey, ) :: {:ok :: label, state :: State, }
spec CryptoKey.is_public_only() :: {:ok :: label, state :: State, }
spec CryptoKey.load(path :: String, public_only :: bool, ) :: {:ok :: label, state :: State, }
spec CryptoKey.load_from_string(string_key :: String, public_only :: bool, ) :: {:ok :: label, state :: State, }
spec CryptoKey.save(path :: String, public_only :: bool, ) :: {:ok :: label, state :: State, }
spec CryptoKey.save_to_string(public_only :: bool, ) :: {:ok :: label, state :: State, }
spec Cubemap.create_placeholder() :: {:ok :: label, state :: State, }
spec CubemapArray.create_placeholder() :: {:ok :: label, state :: State, }
spec Curve.add_point(position :: Vector2, left_tangent :: float, right_tangent :: float, left_mode :: enum::Curve.TangentMode, right_mode :: enum::Curve.TangentMode, ) :: {:ok :: label, state :: State, }
spec Curve.bake() :: {:ok :: label, state :: State, }
spec Curve.clean_dupes() :: {:ok :: label, state :: State, }
spec Curve.clear_points() :: {:ok :: label, state :: State, }
spec Curve.get_bake_resolution() :: {:ok :: label, state :: State, }
spec Curve.get_max_value() :: {:ok :: label, state :: State, }
spec Curve.get_min_value() :: {:ok :: label, state :: State, }
spec Curve.get_point_count() :: {:ok :: label, state :: State, }
spec Curve.get_point_left_mode(index :: int, ) :: {:ok :: label, state :: State, }
spec Curve.get_point_left_tangent(index :: int, ) :: {:ok :: label, state :: State, }
spec Curve.get_point_position(index :: int, ) :: {:ok :: label, state :: State, }
spec Curve.get_point_right_mode(index :: int, ) :: {:ok :: label, state :: State, }
spec Curve.get_point_right_tangent(index :: int, ) :: {:ok :: label, state :: State, }
spec Curve.remove_point(index :: int, ) :: {:ok :: label, state :: State, }
spec Curve.sample(offset :: float, ) :: {:ok :: label, state :: State, }
spec Curve.sample_baked(offset :: float, ) :: {:ok :: label, state :: State, }
spec Curve.set_bake_resolution(resolution :: int, ) :: {:ok :: label, state :: State, }
spec Curve.set_max_value(max :: float, ) :: {:ok :: label, state :: State, }
spec Curve.set_min_value(min :: float, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_count(count :: int, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_left_mode(index :: int, mode :: enum::Curve.TangentMode, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_left_tangent(index :: int, tangent :: float, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_offset(index :: int, offset :: float, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_right_mode(index :: int, mode :: enum::Curve.TangentMode, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_right_tangent(index :: int, tangent :: float, ) :: {:ok :: label, state :: State, }
spec Curve.set_point_value(index :: int, y :: float, ) :: {:ok :: label, state :: State, }
spec Curve2D.add_point(position :: Vector2, in :: Vector2, out :: Vector2, index :: int, ) :: {:ok :: label, state :: State, }
spec Curve2D.clear_points() :: {:ok :: label, state :: State, }
spec Curve2D.get_bake_interval() :: {:ok :: label, state :: State, }
spec Curve2D.get_baked_length() :: {:ok :: label, state :: State, }
spec Curve2D.get_baked_points() :: {:ok :: label, state :: State, }
spec Curve2D.get_closest_offset(to_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Curve2D.get_closest_point(to_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Curve2D.get_point_count() :: {:ok :: label, state :: State, }
spec Curve2D.get_point_in(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve2D.get_point_out(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve2D.get_point_position(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve2D.remove_point(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve2D.sample(idx :: int, t :: float, ) :: {:ok :: label, state :: State, }
spec Curve2D.sample_baked(offset :: float, cubic :: bool, ) :: {:ok :: label, state :: State, }
spec Curve2D.sample_baked_with_rotation(offset :: float, cubic :: bool, ) :: {:ok :: label, state :: State, }
spec Curve2D.samplef(fofs :: float, ) :: {:ok :: label, state :: State, }
spec Curve2D.set_bake_interval(distance :: float, ) :: {:ok :: label, state :: State, }
spec Curve2D.set_point_count(count :: int, ) :: {:ok :: label, state :: State, }
spec Curve2D.set_point_in(idx :: int, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Curve2D.set_point_out(idx :: int, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Curve2D.set_point_position(idx :: int, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Curve2D.tessellate(max_stages :: int, tolerance_degrees :: float, ) :: {:ok :: label, state :: State, }
spec Curve2D.tessellate_even_length(max_stages :: int, tolerance_length :: float, ) :: {:ok :: label, state :: State, }
spec Curve3D.add_point(position :: Vector3, in :: Vector3, out :: Vector3, index :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.clear_points() :: {:ok :: label, state :: State, }
spec Curve3D.get_bake_interval() :: {:ok :: label, state :: State, }
spec Curve3D.get_baked_length() :: {:ok :: label, state :: State, }
spec Curve3D.get_baked_points() :: {:ok :: label, state :: State, }
spec Curve3D.get_baked_tilts() :: {:ok :: label, state :: State, }
spec Curve3D.get_baked_up_vectors() :: {:ok :: label, state :: State, }
spec Curve3D.get_closest_offset(to_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Curve3D.get_closest_point(to_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Curve3D.get_point_count() :: {:ok :: label, state :: State, }
spec Curve3D.get_point_in(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.get_point_out(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.get_point_position(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.get_point_tilt(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.is_up_vector_enabled() :: {:ok :: label, state :: State, }
spec Curve3D.remove_point(idx :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.sample(idx :: int, t :: float, ) :: {:ok :: label, state :: State, }
spec Curve3D.sample_baked(offset :: float, cubic :: bool, ) :: {:ok :: label, state :: State, }
spec Curve3D.sample_baked_up_vector(offset :: float, apply_tilt :: bool, ) :: {:ok :: label, state :: State, }
spec Curve3D.sample_baked_with_rotation(offset :: float, cubic :: bool, apply_tilt :: bool, ) :: {:ok :: label, state :: State, }
spec Curve3D.samplef(fofs :: float, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_bake_interval(distance :: float, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_point_count(count :: int, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_point_in(idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_point_out(idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_point_position(idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_point_tilt(idx :: int, tilt :: float, ) :: {:ok :: label, state :: State, }
spec Curve3D.set_up_vector_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Curve3D.tessellate(max_stages :: int, tolerance_degrees :: float, ) :: {:ok :: label, state :: State, }
spec Curve3D.tessellate_even_length(max_stages :: int, tolerance_length :: float, ) :: {:ok :: label, state :: State, }
spec CurveTexture.get_curve() :: {:ok :: label, state :: State, }
spec CurveTexture.get_texture_mode() :: {:ok :: label, state :: State, }
spec CurveTexture.set_curve(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CurveTexture.set_texture_mode(texture_mode :: enum::CurveTexture.TextureMode, ) :: {:ok :: label, state :: State, }
spec CurveTexture.set_width(width :: int, ) :: {:ok :: label, state :: State, }
spec CurveXYZTexture.get_curve_x() :: {:ok :: label, state :: State, }
spec CurveXYZTexture.get_curve_y() :: {:ok :: label, state :: State, }
spec CurveXYZTexture.get_curve_z() :: {:ok :: label, state :: State, }
spec CurveXYZTexture.set_curve_x(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CurveXYZTexture.set_curve_y(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CurveXYZTexture.set_curve_z(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec CurveXYZTexture.set_width(width :: int, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.get_bottom_radius() :: {:ok :: label, state :: State, }
spec CylinderMesh.get_height() :: {:ok :: label, state :: State, }
spec CylinderMesh.get_radial_segments() :: {:ok :: label, state :: State, }
spec CylinderMesh.get_rings() :: {:ok :: label, state :: State, }
spec CylinderMesh.get_top_radius() :: {:ok :: label, state :: State, }
spec CylinderMesh.is_cap_bottom() :: {:ok :: label, state :: State, }
spec CylinderMesh.is_cap_top() :: {:ok :: label, state :: State, }
spec CylinderMesh.set_bottom_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.set_cap_bottom(cap_bottom :: bool, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.set_cap_top(cap_top :: bool, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.set_radial_segments(segments :: int, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.set_rings(rings :: int, ) :: {:ok :: label, state :: State, }
spec CylinderMesh.set_top_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec CylinderShape3D.get_height() :: {:ok :: label, state :: State, }
spec CylinderShape3D.get_radius() :: {:ok :: label, state :: State, }
spec CylinderShape3D.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec CylinderShape3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec DTLSServer.setup(server_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec DTLSServer.take_connection(udp_peer :: PacketPeerUDP, ) :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.get_damping() :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.get_length() :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.get_rest_length() :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.get_stiffness() :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.set_damping(damping :: float, ) :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.set_rest_length(rest_length :: float, ) :: {:ok :: label, state :: State, }
spec DampedSpringJoint2D.set_stiffness(stiffness :: float, ) :: {:ok :: label, state :: State, }
spec Decal.get_albedo_mix() :: {:ok :: label, state :: State, }
spec Decal.get_cull_mask() :: {:ok :: label, state :: State, }
spec Decal.get_distance_fade_begin() :: {:ok :: label, state :: State, }
spec Decal.get_distance_fade_length() :: {:ok :: label, state :: State, }
spec Decal.get_emission_energy() :: {:ok :: label, state :: State, }
spec Decal.get_lower_fade() :: {:ok :: label, state :: State, }
spec Decal.get_modulate() :: {:ok :: label, state :: State, }
spec Decal.get_normal_fade() :: {:ok :: label, state :: State, }
spec Decal.get_size() :: {:ok :: label, state :: State, }
spec Decal.get_texture(type :: enum::Decal.DecalTexture, ) :: {:ok :: label, state :: State, }
spec Decal.get_upper_fade() :: {:ok :: label, state :: State, }
spec Decal.is_distance_fade_enabled() :: {:ok :: label, state :: State, }
spec Decal.set_albedo_mix(energy :: float, ) :: {:ok :: label, state :: State, }
spec Decal.set_cull_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec Decal.set_distance_fade_begin(distance :: float, ) :: {:ok :: label, state :: State, }
spec Decal.set_distance_fade_length(distance :: float, ) :: {:ok :: label, state :: State, }
spec Decal.set_emission_energy(energy :: float, ) :: {:ok :: label, state :: State, }
spec Decal.set_enable_distance_fade(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Decal.set_lower_fade(fade :: float, ) :: {:ok :: label, state :: State, }
spec Decal.set_modulate(color :: Color, ) :: {:ok :: label, state :: State, }
spec Decal.set_normal_fade(fade :: float, ) :: {:ok :: label, state :: State, }
spec Decal.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec Decal.set_texture(type :: enum::Decal.DecalTexture, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Decal.set_upper_fade(fade :: float, ) :: {:ok :: label, state :: State, }
spec Dictionary.clear() :: {:ok :: label, state :: State, }
spec Dictionary.duplicate(deep :: bool, ) :: {:ok :: label, state :: State, Dictionary}
spec Dictionary.erase(key :: Variant, ) :: {:ok :: label, state :: State, bool}
spec Dictionary.find_key(value :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec Dictionary.get(key :: Variant, default :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec Dictionary.has(key :: Variant, ) :: {:ok :: label, state :: State, bool}
spec Dictionary.has_all(keys :: Array, ) :: {:ok :: label, state :: State, bool}
spec Dictionary.hash() :: {:ok :: label, state :: State, int}
spec Dictionary.is_empty() :: {:ok :: label, state :: State, bool}
spec Dictionary.is_read_only() :: {:ok :: label, state :: State, bool}
spec Dictionary.keys() :: {:ok :: label, state :: State, Array}
spec Dictionary.make_read_only() :: {:ok :: label, state :: State, }
spec Dictionary.merge(dictionary :: Dictionary, overwrite :: bool, ) :: {:ok :: label, state :: State, }
spec Dictionary.size() :: {:ok :: label, state :: State, int}
spec Dictionary.values() :: {:ok :: label, state :: State, Array}
spec DirAccess.change_dir(to_dir :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.copy(from :: String, to :: String, chmod_flags :: int, ) :: {:ok :: label, state :: State, }
spec DirAccess.copy_absolute(from :: String, to :: String, chmod_flags :: int, ) :: {:ok :: label, state :: State, }
spec DirAccess.current_is_dir() :: {:ok :: label, state :: State, }
spec DirAccess.dir_exists(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.dir_exists_absolute(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.file_exists(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.get_current_dir(include_drive :: bool, ) :: {:ok :: label, state :: State, }
spec DirAccess.get_current_drive() :: {:ok :: label, state :: State, }
spec DirAccess.get_directories() :: {:ok :: label, state :: State, }
spec DirAccess.get_directories_at(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.get_drive_count() :: {:ok :: label, state :: State, }
spec DirAccess.get_drive_name(idx :: int, ) :: {:ok :: label, state :: State, }
spec DirAccess.get_files() :: {:ok :: label, state :: State, }
spec DirAccess.get_files_at(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.get_include_hidden() :: {:ok :: label, state :: State, }
spec DirAccess.get_include_navigational() :: {:ok :: label, state :: State, }
spec DirAccess.get_next() :: {:ok :: label, state :: State, }
spec DirAccess.get_open_error() :: {:ok :: label, state :: State, }
spec DirAccess.get_space_left() :: {:ok :: label, state :: State, }
spec DirAccess.list_dir_begin() :: {:ok :: label, state :: State, }
spec DirAccess.list_dir_end() :: {:ok :: label, state :: State, }
spec DirAccess.make_dir(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.make_dir_absolute(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.make_dir_recursive(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.make_dir_recursive_absolute(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.open(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.remove(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.remove_absolute(path :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.rename(from :: String, to :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.rename_absolute(from :: String, to :: String, ) :: {:ok :: label, state :: State, }
spec DirAccess.set_include_hidden(enable :: bool, ) :: {:ok :: label, state :: State, }
spec DirAccess.set_include_navigational(enable :: bool, ) :: {:ok :: label, state :: State, }
spec DirectionalLight2D.get_max_distance() :: {:ok :: label, state :: State, }
spec DirectionalLight2D.set_max_distance(pixels :: float, ) :: {:ok :: label, state :: State, }
spec DirectionalLight3D.get_shadow_mode() :: {:ok :: label, state :: State, }
spec DirectionalLight3D.get_sky_mode() :: {:ok :: label, state :: State, }
spec DirectionalLight3D.is_blend_splits_enabled() :: {:ok :: label, state :: State, }
spec DirectionalLight3D.set_blend_splits(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec DirectionalLight3D.set_shadow_mode(mode :: enum::DirectionalLight3D.ShadowMode, ) :: {:ok :: label, state :: State, }
spec DirectionalLight3D.set_sky_mode(mode :: enum::DirectionalLight3D.SkyMode, ) :: {:ok :: label, state :: State, }
spec DisplayServer.clipboard_get() :: {:ok :: label, state :: State, }
spec DisplayServer.clipboard_get_primary() :: {:ok :: label, state :: State, }
spec DisplayServer.clipboard_has() :: {:ok :: label, state :: State, }
spec DisplayServer.clipboard_set(clipboard :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.clipboard_set_primary(clipboard_primary :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.cursor_get_shape() :: {:ok :: label, state :: State, }
spec DisplayServer.cursor_set_custom_image(cursor :: Resource, shape :: enum::DisplayServer.CursorShape, hotspot :: Vector2, ) :: {:ok :: label, state :: State, }
spec DisplayServer.cursor_set_shape(shape :: enum::DisplayServer.CursorShape, ) :: {:ok :: label, state :: State, }
spec DisplayServer.dialog_input_text(title :: String, description :: String, existing_text :: String, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec DisplayServer.dialog_show(title :: String, description :: String, buttons :: PackedStringArray, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec DisplayServer.enable_for_stealing_focus(process_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.force_process_and_drop_events() :: {:ok :: label, state :: State, }
spec DisplayServer.get_accent_color() :: {:ok :: label, state :: State, }
spec DisplayServer.get_display_cutouts() :: {:ok :: label, state :: State, }
spec DisplayServer.get_display_safe_area() :: {:ok :: label, state :: State, }
spec DisplayServer.get_name() :: {:ok :: label, state :: State, }
spec DisplayServer.get_primary_screen() :: {:ok :: label, state :: State, }
spec DisplayServer.get_screen_count() :: {:ok :: label, state :: State, }
spec DisplayServer.get_screen_from_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec DisplayServer.get_swap_cancel_ok() :: {:ok :: label, state :: State, }
spec DisplayServer.get_window_at_screen_position(position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec DisplayServer.get_window_list() :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_check_item(menu_root :: String, label :: String, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_icon_check_item(menu_root :: String, icon :: Texture2D, label :: String, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_icon_item(menu_root :: String, icon :: Texture2D, label :: String, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_icon_radio_check_item(menu_root :: String, icon :: Texture2D, label :: String, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_item(menu_root :: String, label :: String, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_multistate_item(menu_root :: String, label :: String, max_states :: int, default_state :: int, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_radio_check_item(menu_root :: String, label :: String, callback :: Callable, key_callback :: Callable, tag :: Variant, accelerator :: enum::Key, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_separator(menu_root :: String, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_add_submenu_item(menu_root :: String, label :: String, submenu :: String, index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_clear(menu_root :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_accelerator(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_callback(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_count(menu_root :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_icon(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_indentation_level(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_index_from_tag(menu_root :: String, tag :: Variant, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_index_from_text(menu_root :: String, text :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_key_callback(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_max_states(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_state(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_submenu(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_tag(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_text(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_get_item_tooltip(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_is_item_checkable(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_is_item_checked(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_is_item_disabled(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_is_item_radio_checkable(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_remove_item(menu_root :: String, idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_accelerator(menu_root :: String, idx :: int, keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_callback(menu_root :: String, idx :: int, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_checkable(menu_root :: String, idx :: int, checkable :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_checked(menu_root :: String, idx :: int, checked :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_disabled(menu_root :: String, idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_icon(menu_root :: String, idx :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_indentation_level(menu_root :: String, idx :: int, level :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_key_callback(menu_root :: String, idx :: int, key_callback :: Callable, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_max_states(menu_root :: String, idx :: int, max_states :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_radio_checkable(menu_root :: String, idx :: int, checkable :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_state(menu_root :: String, idx :: int, state :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_submenu(menu_root :: String, idx :: int, submenu :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_tag(menu_root :: String, idx :: int, tag :: Variant, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_text(menu_root :: String, idx :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.global_menu_set_item_tooltip(menu_root :: String, idx :: int, tooltip :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.has_feature(feature :: enum::DisplayServer.Feature, ) :: {:ok :: label, state :: State, }
spec DisplayServer.ime_get_selection() :: {:ok :: label, state :: State, }
spec DisplayServer.ime_get_text() :: {:ok :: label, state :: State, }
spec DisplayServer.is_dark_mode() :: {:ok :: label, state :: State, }
spec DisplayServer.is_dark_mode_supported() :: {:ok :: label, state :: State, }
spec DisplayServer.is_touchscreen_available() :: {:ok :: label, state :: State, }
spec DisplayServer.keyboard_get_current_layout() :: {:ok :: label, state :: State, }
spec DisplayServer.keyboard_get_keycode_from_physical(keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec DisplayServer.keyboard_get_layout_count() :: {:ok :: label, state :: State, }
spec DisplayServer.keyboard_get_layout_language(index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.keyboard_get_layout_name(index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.keyboard_set_current_layout(index :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.mouse_get_button_state() :: {:ok :: label, state :: State, }
spec DisplayServer.mouse_get_mode() :: {:ok :: label, state :: State, }
spec DisplayServer.mouse_get_position() :: {:ok :: label, state :: State, }
spec DisplayServer.mouse_set_mode(mouse_mode :: enum::DisplayServer.MouseMode, ) :: {:ok :: label, state :: State, }
spec DisplayServer.process_events() :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_dpi(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_max_scale() :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_orientation(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_position(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_refresh_rate(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_scale(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_size(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_get_usable_rect(screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_is_kept_on() :: {:ok :: label, state :: State, }
spec DisplayServer.screen_set_keep_on(enable :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.screen_set_orientation(orientation :: enum::DisplayServer.ScreenOrientation, screen :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.set_icon(image :: Image, ) :: {:ok :: label, state :: State, }
spec DisplayServer.set_native_icon(filename :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.tablet_get_current_driver() :: {:ok :: label, state :: State, }
spec DisplayServer.tablet_get_driver_count() :: {:ok :: label, state :: State, }
spec DisplayServer.tablet_get_driver_name(idx :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.tablet_set_current_driver(name :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.tts_get_voices() :: {:ok :: label, state :: State, }
spec DisplayServer.tts_get_voices_for_language(language :: String, ) :: {:ok :: label, state :: State, }
spec DisplayServer.tts_is_paused() :: {:ok :: label, state :: State, }
spec DisplayServer.tts_is_speaking() :: {:ok :: label, state :: State, }
spec DisplayServer.tts_pause() :: {:ok :: label, state :: State, }
spec DisplayServer.tts_resume() :: {:ok :: label, state :: State, }
spec DisplayServer.tts_set_utterance_callback(event :: enum::DisplayServer.TTSUtteranceEvent, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec DisplayServer.tts_speak(text :: String, voice :: String, volume :: int, pitch :: float, rate :: float, utterance_id :: int, interrupt :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.tts_stop() :: {:ok :: label, state :: State, }
spec DisplayServer.virtual_keyboard_get_height() :: {:ok :: label, state :: State, }
spec DisplayServer.virtual_keyboard_hide() :: {:ok :: label, state :: State, }
spec DisplayServer.virtual_keyboard_show(existing_text :: String, position :: Rect2, type :: enum::DisplayServer.VirtualKeyboardType, max_length :: int, cursor_start :: int, cursor_end :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.warp_mouse(position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_can_draw(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_active_popup() :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_attached_instance_id(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_current_screen(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_flag(flag :: enum::DisplayServer.WindowFlags, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_max_size(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_min_size(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_mode(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_native_handle(handle_type :: enum::DisplayServer.HandleType, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_popup_safe_rect(window :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_position(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_position_with_decorations(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_safe_title_margins(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_size(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_size_with_decorations(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_get_vsync_mode(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_is_maximize_allowed(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_maximize_on_title_dbl_click() :: {:ok :: label, state :: State, }
spec DisplayServer.window_minimize_on_title_dbl_click() :: {:ok :: label, state :: State, }
spec DisplayServer.window_move_to_foreground(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_request_attention(window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_current_screen(screen :: int, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_drop_files_callback(callback :: Callable, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_exclusive(window_id :: int, exclusive :: bool, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_flag(flag :: enum::DisplayServer.WindowFlags, enabled :: bool, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_ime_active(active :: bool, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_ime_position(position :: Vector2i, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_input_event_callback(callback :: Callable, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_input_text_callback(callback :: Callable, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_max_size(max_size :: Vector2i, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_min_size(min_size :: Vector2i, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_mode(mode :: enum::DisplayServer.WindowMode, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_mouse_passthrough(region :: PackedVector2Array, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_popup_safe_rect(window :: int, rect :: Rect2i, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_position(position :: Vector2i, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_rect_changed_callback(callback :: Callable, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_size(size :: Vector2i, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_title(title :: String, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_transient(window_id :: int, parent_window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_vsync_mode(vsync_mode :: enum::DisplayServer.VSyncMode, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_window_buttons_offset(offset :: Vector2i, window_id :: int, ) :: {:ok :: label, state :: State, }
spec DisplayServer.window_set_window_event_callback(callback :: Callable, window_id :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.bandwidth_limit(in_bandwidth :: int, out_bandwidth :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.broadcast(channel :: int, packet :: PackedByteArray, flags :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.channel_limit(limit :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.compress(mode :: enum::ENetConnection.CompressionMode, ) :: {:ok :: label, state :: State, }
spec ENetConnection.connect_to_host(address :: String, port :: int, channels :: int, data :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.create_host(max_peers :: int, max_channels :: int, in_bandwidth :: int, out_bandwidth :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.create_host_bound(bind_address :: String, bind_port :: int, max_peers :: int, max_channels :: int, in_bandwidth :: int, out_bandwidth :: int, ) :: {:ok :: label, state :: State, }
spec ENetConnection.destroy() :: {:ok :: label, state :: State, }
spec ENetConnection.dtls_client_setup(hostname :: String, client_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec ENetConnection.dtls_server_setup(server_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec ENetConnection.flush() :: {:ok :: label, state :: State, }
spec ENetConnection.get_local_port() :: {:ok :: label, state :: State, }
spec ENetConnection.get_max_channels() :: {:ok :: label, state :: State, }
spec ENetConnection.get_peers() :: {:ok :: label, state :: State, }
spec ENetConnection.pop_statistic(statistic :: enum::ENetConnection.HostStatistic, ) :: {:ok :: label, state :: State, }
spec ENetConnection.refuse_new_connections(refuse :: bool, ) :: {:ok :: label, state :: State, }
spec ENetConnection.service(timeout :: int, ) :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.add_mesh_peer(peer_id :: int, host :: ENetConnection, ) :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.create_client(address :: String, port :: int, channel_count :: int, in_bandwidth :: int, out_bandwidth :: int, local_port :: int, ) :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.create_mesh(unique_id :: int, ) :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.create_server(port :: int, max_clients :: int, max_channels :: int, in_bandwidth :: int, out_bandwidth :: int, ) :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.get_host() :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.get_peer(id :: int, ) :: {:ok :: label, state :: State, }
spec ENetMultiplayerPeer.set_bind_ip(ip :: String, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.get_channels() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.get_remote_address() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.get_remote_port() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.get_state() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.get_statistic(statistic :: enum::ENetPacketPeer.PeerStatistic, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.is_active() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.peer_disconnect(data :: int, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.peer_disconnect_later(data :: int, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.peer_disconnect_now(data :: int, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.ping() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.ping_interval(ping_interval :: int, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.reset() :: {:ok :: label, state :: State, }
spec ENetPacketPeer.send(channel :: int, packet :: PackedByteArray, flags :: int, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.set_timeout(timeout :: int, timeout_min :: int, timeout_max :: int, ) :: {:ok :: label, state :: State, }
spec ENetPacketPeer.throttle_configure(interval :: int, acceleration :: int, deceleration :: int, ) :: {:ok :: label, state :: State, }
spec EditorCommandPalette.add_command(command_name :: String, key_name :: String, binded_callable :: Callable, shortcut_text :: String, ) :: {:ok :: label, state :: State, }
spec EditorCommandPalette.remove_command(key_name :: String, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerPlugin._capture(message :: String, data :: Array, session_id :: int, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerPlugin._has_capture(capture :: String, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerPlugin._setup_session(session_id :: int, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerPlugin.get_session(id :: int, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerPlugin.get_sessions() :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.add_session_tab(control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.is_active() :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.is_breaked() :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.is_debuggable() :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.remove_session_tab(control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.send_message(message :: String, data :: Array, ) :: {:ok :: label, state :: State, }
spec EditorDebuggerSession.toggle_profiler(profiler :: String, enable :: bool, data :: Array, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._begin_customize_resources(platform :: EditorExportPlatform, features :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._begin_customize_scenes(platform :: EditorExportPlatform, features :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._customize_resource(resource :: Resource, path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._customize_scene(scene :: Node, path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._end_customize_resources() :: {:ok :: label, state :: State, }
spec EditorExportPlugin._end_customize_scenes() :: {:ok :: label, state :: State, }
spec EditorExportPlugin._export_begin(features :: PackedStringArray, is_debug :: bool, path :: String, flags :: int, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._export_end() :: {:ok :: label, state :: State, }
spec EditorExportPlugin._export_file(path :: String, type :: String, features :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._get_customization_configuration_hash() :: {:ok :: label, state :: State, }
spec EditorExportPlugin._get_export_features(platform :: EditorExportPlatform, debug :: bool, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin._get_name() :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_file(path :: String, file :: PackedByteArray, remap :: bool, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_bundle_file(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_cpp_code(code :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_embedded_framework(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_framework(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_linker_flags(flags :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_plist_content(plist_content :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_ios_project_static_lib(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_macos_plugin_file(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.add_shared_object(path :: String, tags :: PackedStringArray, target :: String, ) :: {:ok :: label, state :: State, }
spec EditorExportPlugin.skip() :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.get_feature_name(feature :: enum::EditorFeatureProfile.Feature, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.is_class_disabled(class_name :: StringName, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.is_class_editor_disabled(class_name :: StringName, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.is_class_property_disabled(class_name :: StringName, property :: StringName, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.is_feature_disabled(feature :: enum::EditorFeatureProfile.Feature, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.load_from_file(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.save_to_file(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.set_disable_class(class_name :: StringName, disable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.set_disable_class_editor(class_name :: StringName, disable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.set_disable_class_property(class_name :: StringName, property :: StringName, disable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorFeatureProfile.set_disable_feature(feature :: enum::EditorFeatureProfile.Feature, disable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.add_filter(filter :: String, description :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.clear_filters() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_access() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_current_dir() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_current_file() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_current_path() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_display_mode() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_file_mode() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_filters() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_line_edit() :: {:ok :: label, state :: State, }
spec EditorFileDialog.get_vbox() :: {:ok :: label, state :: State, }
spec EditorFileDialog.invalidate() :: {:ok :: label, state :: State, }
spec EditorFileDialog.is_overwrite_warning_disabled() :: {:ok :: label, state :: State, }
spec EditorFileDialog.is_showing_hidden_files() :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_access(access :: enum::EditorFileDialog.Access, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_current_dir(dir :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_current_file(file :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_current_path(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_disable_overwrite_warning(disable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_display_mode(mode :: enum::EditorFileDialog.DisplayMode, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_file_mode(mode :: enum::EditorFileDialog.FileMode, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_filters(filters :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorFileDialog.set_show_hidden_files(show :: bool, ) :: {:ok :: label, state :: State, }
spec EditorFileSystem.get_file_type(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileSystem.get_filesystem() :: {:ok :: label, state :: State, }
spec EditorFileSystem.get_filesystem_path(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileSystem.get_scanning_progress() :: {:ok :: label, state :: State, }
spec EditorFileSystem.is_scanning() :: {:ok :: label, state :: State, }
spec EditorFileSystem.reimport_files(files :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorFileSystem.scan() :: {:ok :: label, state :: State, }
spec EditorFileSystem.scan_sources() :: {:ok :: label, state :: State, }
spec EditorFileSystem.update_file(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.find_dir_index(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.find_file_index(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file_count() :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file_import_is_valid(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file_path(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file_script_class_extends(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file_script_class_name(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_file_type(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_name() :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_parent() :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_path() :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_subdir(idx :: int, ) :: {:ok :: label, state :: State, }
spec EditorFileSystemDirectory.get_subdir_count() :: {:ok :: label, state :: State, }
spec EditorFileSystemImportFormatSupportQuery._get_file_extensions() :: {:ok :: label, state :: State, }
spec EditorFileSystemImportFormatSupportQuery._is_active() :: {:ok :: label, state :: State, }
spec EditorFileSystemImportFormatSupportQuery._query() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_import_options(path :: String, preset_index :: int, ) :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_import_order() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_importer_name() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_option_visibility(path :: String, option_name :: StringName, options :: Dictionary, ) :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_preset_count() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_preset_name(preset_index :: int, ) :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_priority() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_recognized_extensions() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_resource_type() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_save_extension() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._get_visible_name() :: {:ok :: label, state :: State, }
spec EditorImportPlugin._import(source_file :: String, save_path :: String, options :: Dictionary, platform_variants :: typedarray::String, gen_files :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec EditorImportPlugin.append_import_external_resource(path :: String, custom_options :: Dictionary, custom_importer :: String, generator_parameters :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorInspector.get_selected_path() :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin._can_handle(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin._parse_begin(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin._parse_category(object :: Object, category :: String, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin._parse_end(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin._parse_group(object :: Object, group :: String, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin._parse_property(object :: Object, type :: enum::Variant.Type, name :: String, hint_type :: enum::PropertyHint, hint_string :: String, usage_flags :: bitfield::PropertyUsageFlags, wide :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin.add_custom_control(control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin.add_property_editor(property :: String, editor :: Control, add_to_end :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInspectorPlugin.add_property_editor_for_multiple_properties(label :: String, properties :: PackedStringArray, editor :: Control, ) :: {:ok :: label, state :: State, }
spec EditorInterface.edit_node(node :: Node, ) :: {:ok :: label, state :: State, }
spec EditorInterface.edit_resource(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec EditorInterface.edit_script(script :: Script, line :: int, column :: int, grab_focus :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.get_base_control() :: {:ok :: label, state :: State, }
spec EditorInterface.get_command_palette() :: {:ok :: label, state :: State, }
spec EditorInterface.get_current_directory() :: {:ok :: label, state :: State, }
spec EditorInterface.get_current_path() :: {:ok :: label, state :: State, }
spec EditorInterface.get_edited_scene_root() :: {:ok :: label, state :: State, }
spec EditorInterface.get_editor_main_screen() :: {:ok :: label, state :: State, }
spec EditorInterface.get_editor_paths() :: {:ok :: label, state :: State, }
spec EditorInterface.get_editor_scale() :: {:ok :: label, state :: State, }
spec EditorInterface.get_editor_settings() :: {:ok :: label, state :: State, }
spec EditorInterface.get_file_system_dock() :: {:ok :: label, state :: State, }
spec EditorInterface.get_inspector() :: {:ok :: label, state :: State, }
spec EditorInterface.get_open_scenes() :: {:ok :: label, state :: State, }
spec EditorInterface.get_playing_scene() :: {:ok :: label, state :: State, }
spec EditorInterface.get_resource_filesystem() :: {:ok :: label, state :: State, }
spec EditorInterface.get_resource_previewer() :: {:ok :: label, state :: State, }
spec EditorInterface.get_script_editor() :: {:ok :: label, state :: State, }
spec EditorInterface.get_selected_paths() :: {:ok :: label, state :: State, }
spec EditorInterface.get_selection() :: {:ok :: label, state :: State, }
spec EditorInterface.inspect_object(object :: Object, for_property :: String, inspector_only :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.is_distraction_free_mode_enabled() :: {:ok :: label, state :: State, }
spec EditorInterface.is_movie_maker_enabled() :: {:ok :: label, state :: State, }
spec EditorInterface.is_playing_scene() :: {:ok :: label, state :: State, }
spec EditorInterface.is_plugin_enabled(plugin :: String, ) :: {:ok :: label, state :: State, }
spec EditorInterface.make_mesh_previews(meshes :: typedarray::Mesh, preview_size :: int, ) :: {:ok :: label, state :: State, }
spec EditorInterface.open_scene_from_path(scene_filepath :: String, ) :: {:ok :: label, state :: State, }
spec EditorInterface.play_current_scene() :: {:ok :: label, state :: State, }
spec EditorInterface.play_custom_scene(scene_filepath :: String, ) :: {:ok :: label, state :: State, }
spec EditorInterface.play_main_scene() :: {:ok :: label, state :: State, }
spec EditorInterface.reload_scene_from_path(scene_filepath :: String, ) :: {:ok :: label, state :: State, }
spec EditorInterface.restart_editor(save :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.save_scene() :: {:ok :: label, state :: State, }
spec EditorInterface.save_scene_as(path :: String, with_preview :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.select_file(file :: String, ) :: {:ok :: label, state :: State, }
spec EditorInterface.set_distraction_free_mode(enter :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.set_main_screen_editor(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorInterface.set_movie_maker_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.set_plugin_enabled(plugin :: String, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec EditorInterface.stop_playing_scene() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._commit_handle(id :: int, secondary :: bool, restore :: Variant, cancel :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._commit_subgizmos(ids :: PackedInt32Array, restores :: typedarray::Transform3D, cancel :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._get_handle_name(id :: int, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._get_handle_value(id :: int, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._get_subgizmo_transform(id :: int, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._is_handle_highlighted(id :: int, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._redraw() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._set_handle(id :: int, secondary :: bool, camera :: Camera3D, point :: Vector2, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._set_subgizmo_transform(id :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._subgizmos_intersect_frustum(camera :: Camera3D, frustum :: typedarray::Plane, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo._subgizmos_intersect_ray(camera :: Camera3D, point :: Vector2, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.add_collision_segments(segments :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.add_collision_triangles(triangles :: TriangleMesh, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.add_handles(handles :: PackedVector3Array, material :: Material, ids :: PackedInt32Array, billboard :: bool, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.add_lines(lines :: PackedVector3Array, material :: Material, billboard :: bool, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.add_mesh(mesh :: Mesh, material :: Material, transform :: Transform3D, skeleton :: SkinReference, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.add_unscaled_billboard(material :: Material, default_scale :: float, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.clear() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.get_node_3d() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.get_plugin() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.get_subgizmo_selection() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.is_subgizmo_selected(id :: int, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.set_hidden(hidden :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmo.set_node_3d(node :: Node, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._can_be_hidden() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._commit_handle(gizmo :: EditorNode3DGizmo, handle_id :: int, secondary :: bool, restore :: Variant, cancel :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._commit_subgizmos(gizmo :: EditorNode3DGizmo, ids :: PackedInt32Array, restores :: typedarray::Transform3D, cancel :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._create_gizmo(for_node_3d :: Node3D, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._get_gizmo_name() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._get_handle_name(gizmo :: EditorNode3DGizmo, handle_id :: int, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._get_handle_value(gizmo :: EditorNode3DGizmo, handle_id :: int, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._get_priority() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._get_subgizmo_transform(gizmo :: EditorNode3DGizmo, subgizmo_id :: int, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._has_gizmo(for_node_3d :: Node3D, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._is_handle_highlighted(gizmo :: EditorNode3DGizmo, handle_id :: int, secondary :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._is_selectable_when_hidden() :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._redraw(gizmo :: EditorNode3DGizmo, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._set_handle(gizmo :: EditorNode3DGizmo, handle_id :: int, secondary :: bool, camera :: Camera3D, screen_pos :: Vector2, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._set_subgizmo_transform(gizmo :: EditorNode3DGizmo, subgizmo_id :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._subgizmos_intersect_frustum(gizmo :: EditorNode3DGizmo, camera :: Camera3D, frustum_planes :: typedarray::Plane, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin._subgizmos_intersect_ray(gizmo :: EditorNode3DGizmo, camera :: Camera3D, screen_pos :: Vector2, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin.add_material(name :: String, material :: StandardMaterial3D, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin.create_handle_material(name :: String, billboard :: bool, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin.create_icon_material(name :: String, texture :: Texture2D, on_top :: bool, color :: Color, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin.create_material(name :: String, color :: Color, billboard :: bool, on_top :: bool, use_vertex_color :: bool, ) :: {:ok :: label, state :: State, }
spec EditorNode3DGizmoPlugin.get_material(name :: String, gizmo :: EditorNode3DGizmo, ) :: {:ok :: label, state :: State, }
spec EditorPaths.get_cache_dir() :: {:ok :: label, state :: State, }
spec EditorPaths.get_config_dir() :: {:ok :: label, state :: State, }
spec EditorPaths.get_data_dir() :: {:ok :: label, state :: State, }
spec EditorPaths.get_project_settings_dir() :: {:ok :: label, state :: State, }
spec EditorPaths.get_self_contained_file() :: {:ok :: label, state :: State, }
spec EditorPaths.is_self_contained() :: {:ok :: label, state :: State, }
spec EditorPlugin._apply_changes() :: {:ok :: label, state :: State, }
spec EditorPlugin._build() :: {:ok :: label, state :: State, }
spec EditorPlugin._clear() :: {:ok :: label, state :: State, }
spec EditorPlugin._disable_plugin() :: {:ok :: label, state :: State, }
spec EditorPlugin._edit(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._enable_plugin() :: {:ok :: label, state :: State, }
spec EditorPlugin._forward_3d_draw_over_viewport(viewport_control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._forward_3d_force_draw_over_viewport(viewport_control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._forward_3d_gui_input(viewport_camera :: Camera3D, event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._forward_canvas_draw_over_viewport(viewport_control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._forward_canvas_force_draw_over_viewport(viewport_control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._forward_canvas_gui_input(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._get_breakpoints() :: {:ok :: label, state :: State, }
spec EditorPlugin._get_plugin_icon() :: {:ok :: label, state :: State, }
spec EditorPlugin._get_plugin_name() :: {:ok :: label, state :: State, }
spec EditorPlugin._get_state() :: {:ok :: label, state :: State, }
spec EditorPlugin._get_window_layout(configuration :: ConfigFile, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._handles(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._has_main_screen() :: {:ok :: label, state :: State, }
spec EditorPlugin._make_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._save_external_data() :: {:ok :: label, state :: State, }
spec EditorPlugin._set_state(state :: Dictionary, ) :: {:ok :: label, state :: State, }
spec EditorPlugin._set_window_layout(configuration :: ConfigFile, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_autoload_singleton(name :: String, path :: String, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_control_to_bottom_panel(control :: Control, title :: String, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_control_to_container(container :: enum::EditorPlugin.CustomControlContainer, control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_control_to_dock(slot :: enum::EditorPlugin.DockSlot, control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_custom_type(type :: String, base :: String, script :: Script, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_debugger_plugin(script :: EditorDebuggerPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_export_plugin(plugin :: EditorExportPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_import_plugin(importer :: EditorImportPlugin, first_priority :: bool, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_inspector_plugin(plugin :: EditorInspectorPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_node_3d_gizmo_plugin(plugin :: EditorNode3DGizmoPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_resource_conversion_plugin(plugin :: EditorResourceConversionPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_scene_format_importer_plugin(scene_format_importer :: EditorSceneFormatImporter, first_priority :: bool, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_scene_post_import_plugin(scene_import_plugin :: EditorScenePostImportPlugin, first_priority :: bool, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_tool_menu_item(name :: String, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_tool_submenu_item(name :: String, submenu :: PopupMenu, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_translation_parser_plugin(parser :: EditorTranslationParserPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.add_undo_redo_inspector_hook_callback(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.get_editor_interface() :: {:ok :: label, state :: State, }
spec EditorPlugin.get_export_as_menu() :: {:ok :: label, state :: State, }
spec EditorPlugin.get_script_create_dialog() :: {:ok :: label, state :: State, }
spec EditorPlugin.get_undo_redo() :: {:ok :: label, state :: State, }
spec EditorPlugin.hide_bottom_panel() :: {:ok :: label, state :: State, }
spec EditorPlugin.make_bottom_panel_item_visible(item :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.queue_save_layout() :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_autoload_singleton(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_control_from_bottom_panel(control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_control_from_container(container :: enum::EditorPlugin.CustomControlContainer, control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_control_from_docks(control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_custom_type(type :: String, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_debugger_plugin(script :: EditorDebuggerPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_export_plugin(plugin :: EditorExportPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_import_plugin(importer :: EditorImportPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_inspector_plugin(plugin :: EditorInspectorPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_node_3d_gizmo_plugin(plugin :: EditorNode3DGizmoPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_resource_conversion_plugin(plugin :: EditorResourceConversionPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_scene_format_importer_plugin(scene_format_importer :: EditorSceneFormatImporter, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_scene_post_import_plugin(scene_import_plugin :: EditorScenePostImportPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_tool_menu_item(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_translation_parser_plugin(parser :: EditorTranslationParserPlugin, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.remove_undo_redo_inspector_hook_callback(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec EditorPlugin.set_force_draw_over_forwarding_enabled() :: {:ok :: label, state :: State, }
spec EditorPlugin.set_input_event_forwarding_always_enabled() :: {:ok :: label, state :: State, }
spec EditorPlugin.update_overlays() :: {:ok :: label, state :: State, }
spec EditorProperty._set_read_only(read_only :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty._update_property() :: {:ok :: label, state :: State, }
spec EditorProperty.add_focusable(control :: Control, ) :: {:ok :: label, state :: State, }
spec EditorProperty.emit_changed(property :: StringName, value :: Variant, field :: StringName, changing :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.get_edited_object() :: {:ok :: label, state :: State, }
spec EditorProperty.get_edited_property() :: {:ok :: label, state :: State, }
spec EditorProperty.get_label() :: {:ok :: label, state :: State, }
spec EditorProperty.is_checkable() :: {:ok :: label, state :: State, }
spec EditorProperty.is_checked() :: {:ok :: label, state :: State, }
spec EditorProperty.is_deletable() :: {:ok :: label, state :: State, }
spec EditorProperty.is_draw_warning() :: {:ok :: label, state :: State, }
spec EditorProperty.is_keying() :: {:ok :: label, state :: State, }
spec EditorProperty.is_read_only() :: {:ok :: label, state :: State, }
spec EditorProperty.set_bottom_editor(editor :: Control, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_checkable(checkable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_checked(checked :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_deletable(deletable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_draw_warning(draw_warning :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_keying(keying :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_label(text :: String, ) :: {:ok :: label, state :: State, }
spec EditorProperty.set_read_only(read_only :: bool, ) :: {:ok :: label, state :: State, }
spec EditorProperty.update_property() :: {:ok :: label, state :: State, }
spec EditorResourceConversionPlugin._convert(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec EditorResourceConversionPlugin._converts_to() :: {:ok :: label, state :: State, }
spec EditorResourceConversionPlugin._handles(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker._handle_menu_selected(id :: int, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker._set_create_options(menu_node :: Object, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker.get_allowed_types() :: {:ok :: label, state :: State, }
spec EditorResourcePicker.get_base_type() :: {:ok :: label, state :: State, }
spec EditorResourcePicker.get_edited_resource() :: {:ok :: label, state :: State, }
spec EditorResourcePicker.is_editable() :: {:ok :: label, state :: State, }
spec EditorResourcePicker.is_toggle_mode() :: {:ok :: label, state :: State, }
spec EditorResourcePicker.set_base_type(base_type :: String, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker.set_editable(enable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker.set_edited_resource(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker.set_toggle_mode(enable :: bool, ) :: {:ok :: label, state :: State, }
spec EditorResourcePicker.set_toggle_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreview.add_preview_generator(generator :: EditorResourcePreviewGenerator, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreview.check_for_invalidation(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreview.queue_edited_resource_preview(resource :: Resource, receiver :: Object, receiver_func :: StringName, userdata :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreview.queue_resource_preview(path :: String, receiver :: Object, receiver_func :: StringName, userdata :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreview.remove_preview_generator(generator :: EditorResourcePreviewGenerator, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreviewGenerator._can_generate_small_preview() :: {:ok :: label, state :: State, }
spec EditorResourcePreviewGenerator._generate(resource :: Resource, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreviewGenerator._generate_from_path(path :: String, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec EditorResourcePreviewGenerator._generate_small_preview_automatically() :: {:ok :: label, state :: State, }
spec EditorResourcePreviewGenerator._handles(type :: String, ) :: {:ok :: label, state :: State, }
spec EditorSceneFormatImporter._get_extensions() :: {:ok :: label, state :: State, }
spec EditorSceneFormatImporter._get_import_flags() :: {:ok :: label, state :: State, }
spec EditorSceneFormatImporter._get_import_options(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorSceneFormatImporter._get_option_visibility(path :: String, for_animation :: bool, option :: String, ) :: {:ok :: label, state :: State, }
spec EditorSceneFormatImporter._import_scene(path :: String, flags :: int, options :: Dictionary, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImport._post_import(scene :: Node, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImport.get_source_file() :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._get_import_options(path :: String, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._get_internal_import_options(category :: int, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._get_internal_option_update_view_required(category :: int, option :: String, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._get_internal_option_visibility(category :: int, for_animation :: bool, option :: String, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._get_option_visibility(path :: String, for_animation :: bool, option :: String, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._internal_process(category :: int, base_node :: Node, node :: Node, resource :: Resource, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._post_process(scene :: Node, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin._pre_process(scene :: Node, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin.add_import_option(name :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin.add_import_option_advanced(type :: enum::Variant.Type, name :: String, default_value :: Variant, hint :: enum::PropertyHint, hint_string :: String, usage_flags :: int, ) :: {:ok :: label, state :: State, }
spec EditorScenePostImportPlugin.get_option_value(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EditorScript._run() :: {:ok :: label, state :: State, }
spec EditorScript.add_root_node(node :: Node, ) :: {:ok :: label, state :: State, }
spec EditorScript.get_editor_interface() :: {:ok :: label, state :: State, }
spec EditorScript.get_scene() :: {:ok :: label, state :: State, }
spec EditorScriptPicker.get_script_owner() :: {:ok :: label, state :: State, }
spec EditorScriptPicker.set_script_owner(owner_node :: Node, ) :: {:ok :: label, state :: State, }
spec EditorSelection.add_node(node :: Node, ) :: {:ok :: label, state :: State, }
spec EditorSelection.clear() :: {:ok :: label, state :: State, }
spec EditorSelection.get_selected_nodes() :: {:ok :: label, state :: State, }
spec EditorSelection.get_transformable_selected_nodes() :: {:ok :: label, state :: State, }
spec EditorSelection.remove_node(node :: Node, ) :: {:ok :: label, state :: State, }
spec EditorSettings.add_property_info(info :: Dictionary, ) :: {:ok :: label, state :: State, }
spec EditorSettings.check_changed_settings_in_group(setting_prefix :: String, ) :: {:ok :: label, state :: State, }
spec EditorSettings.erase(property :: String, ) :: {:ok :: label, state :: State, }
spec EditorSettings.get_changed_settings() :: {:ok :: label, state :: State, }
spec EditorSettings.get_favorites() :: {:ok :: label, state :: State, }
spec EditorSettings.get_project_metadata(section :: String, key :: String, default :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorSettings.get_recent_dirs() :: {:ok :: label, state :: State, }
spec EditorSettings.get_setting(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorSettings.has_setting(name :: String, ) :: {:ok :: label, state :: State, }
spec EditorSettings.mark_setting_changed(setting :: String, ) :: {:ok :: label, state :: State, }
spec EditorSettings.set_builtin_action_override(name :: String, actions_list :: typedarray::InputEvent, ) :: {:ok :: label, state :: State, }
spec EditorSettings.set_favorites(dirs :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorSettings.set_initial_value(name :: StringName, value :: Variant, update_current :: bool, ) :: {:ok :: label, state :: State, }
spec EditorSettings.set_project_metadata(section :: String, key :: String, data :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorSettings.set_recent_dirs(dirs :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec EditorSettings.set_setting(name :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorSpinSlider.get_label() :: {:ok :: label, state :: State, }
spec EditorSpinSlider.get_suffix() :: {:ok :: label, state :: State, }
spec EditorSpinSlider.is_flat() :: {:ok :: label, state :: State, }
spec EditorSpinSlider.is_hiding_slider() :: {:ok :: label, state :: State, }
spec EditorSpinSlider.is_read_only() :: {:ok :: label, state :: State, }
spec EditorSpinSlider.set_flat(flat :: bool, ) :: {:ok :: label, state :: State, }
spec EditorSpinSlider.set_hide_slider(hide_slider :: bool, ) :: {:ok :: label, state :: State, }
spec EditorSpinSlider.set_label(label :: String, ) :: {:ok :: label, state :: State, }
spec EditorSpinSlider.set_read_only(read_only :: bool, ) :: {:ok :: label, state :: State, }
spec EditorSpinSlider.set_suffix(suffix :: String, ) :: {:ok :: label, state :: State, }
spec EditorSyntaxHighlighter._get_name() :: {:ok :: label, state :: State, }
spec EditorSyntaxHighlighter._get_supported_languages() :: {:ok :: label, state :: State, }
spec EditorTranslationParserPlugin._get_recognized_extensions() :: {:ok :: label, state :: State, }
spec EditorTranslationParserPlugin._parse_file(path :: String, msgids :: typedarray::String, msgids_context_plural :: typedarray::Array, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.add_do_method(object :: Object, method :: StringName, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.add_do_property(object :: Object, property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.add_do_reference(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.add_undo_method(object :: Object, method :: StringName, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.add_undo_property(object :: Object, property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.add_undo_reference(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.commit_action(execute :: bool, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.create_action(name :: String, merge_mode :: enum::UndoRedo.MergeMode, custom_context :: Object, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.get_history_undo_redo(id :: int, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.get_object_history_id(object :: Object, ) :: {:ok :: label, state :: State, }
spec EditorUndoRedoManager.is_committing_action() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._checkout_branch(branch_name :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._commit(msg :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._create_branch(branch_name :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._create_remote(remote_name :: String, remote_url :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._discard_file(file_path :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._fetch(remote :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_branch_list() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_current_branch_name() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_diff(identifier :: String, area :: int, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_line_diff(file_path :: String, text :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_modified_files_data() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_previous_commits(max_commits :: int, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_remotes() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._get_vcs_name() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._initialize(project_path :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._pull(remote :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._push(remote :: String, force :: bool, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._remove_branch(branch_name :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._remove_remote(remote_name :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._set_credentials(username :: String, password :: String, ssh_public_key_path :: String, ssh_private_key_path :: String, ssh_passphrase :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._shut_down() :: {:ok :: label, state :: State, }
spec EditorVCSInterface._stage_file(file_path :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface._unstage_file(file_path :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.add_diff_hunks_into_diff_file(diff_file :: Dictionary, diff_hunks :: typedarray::Dictionary, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.add_line_diffs_into_diff_hunk(diff_hunk :: Dictionary, line_diffs :: typedarray::Dictionary, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.create_commit(msg :: String, author :: String, id :: String, unix_timestamp :: int, offset_minutes :: int, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.create_diff_file(new_file :: String, old_file :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.create_diff_hunk(old_start :: int, new_start :: int, old_lines :: int, new_lines :: int, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.create_diff_line(new_line_no :: int, old_line_no :: int, content :: String, status :: String, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.create_status_file(file_path :: String, change_type :: enum::EditorVCSInterface.ChangeType, area :: enum::EditorVCSInterface.TreeArea, ) :: {:ok :: label, state :: State, }
spec EditorVCSInterface.popup_error(msg :: String, ) :: {:ok :: label, state :: State, }
spec EncodedObjectAsID.get_object_id() :: {:ok :: label, state :: State, }
spec EncodedObjectAsID.set_object_id(id :: int, ) :: {:ok :: label, state :: State, }
spec Engine.get_architecture_name() :: {:ok :: label, state :: State, }
spec Engine.get_author_info() :: {:ok :: label, state :: State, }
spec Engine.get_copyright_info() :: {:ok :: label, state :: State, }
spec Engine.get_donor_info() :: {:ok :: label, state :: State, }
spec Engine.get_frames_drawn() :: {:ok :: label, state :: State, }
spec Engine.get_frames_per_second() :: {:ok :: label, state :: State, }
spec Engine.get_license_info() :: {:ok :: label, state :: State, }
spec Engine.get_license_text() :: {:ok :: label, state :: State, }
spec Engine.get_main_loop() :: {:ok :: label, state :: State, }
spec Engine.get_max_fps() :: {:ok :: label, state :: State, }
spec Engine.get_max_physics_steps_per_frame() :: {:ok :: label, state :: State, }
spec Engine.get_physics_frames() :: {:ok :: label, state :: State, }
spec Engine.get_physics_interpolation_fraction() :: {:ok :: label, state :: State, }
spec Engine.get_physics_jitter_fix() :: {:ok :: label, state :: State, }
spec Engine.get_physics_ticks_per_second() :: {:ok :: label, state :: State, }
spec Engine.get_process_frames() :: {:ok :: label, state :: State, }
spec Engine.get_script_language(index :: int, ) :: {:ok :: label, state :: State, }
spec Engine.get_script_language_count() :: {:ok :: label, state :: State, }
spec Engine.get_singleton(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Engine.get_singleton_list() :: {:ok :: label, state :: State, }
spec Engine.get_time_scale() :: {:ok :: label, state :: State, }
spec Engine.get_version_info() :: {:ok :: label, state :: State, }
spec Engine.get_write_movie_path() :: {:ok :: label, state :: State, }
spec Engine.has_singleton(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Engine.is_editor_hint() :: {:ok :: label, state :: State, }
spec Engine.is_in_physics_frame() :: {:ok :: label, state :: State, }
spec Engine.is_printing_error_messages() :: {:ok :: label, state :: State, }
spec Engine.register_script_language(language :: ScriptLanguage, ) :: {:ok :: label, state :: State, }
spec Engine.register_singleton(name :: StringName, instance :: Object, ) :: {:ok :: label, state :: State, }
spec Engine.set_max_fps(max_fps :: int, ) :: {:ok :: label, state :: State, }
spec Engine.set_max_physics_steps_per_frame(max_physics_steps :: int, ) :: {:ok :: label, state :: State, }
spec Engine.set_physics_jitter_fix(physics_jitter_fix :: float, ) :: {:ok :: label, state :: State, }
spec Engine.set_physics_ticks_per_second(physics_ticks_per_second :: int, ) :: {:ok :: label, state :: State, }
spec Engine.set_print_error_messages(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Engine.set_time_scale(time_scale :: float, ) :: {:ok :: label, state :: State, }
spec Engine.unregister_script_language(language :: ScriptLanguage, ) :: {:ok :: label, state :: State, }
spec Engine.unregister_singleton(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.has_capture(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.has_profiler(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.is_active() :: {:ok :: label, state :: State, }
spec EngineDebugger.is_profiling(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.profiler_add_frame_data(name :: StringName, data :: Array, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.profiler_enable(name :: StringName, enable :: bool, arguments :: Array, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.register_message_capture(name :: StringName, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.register_profiler(name :: StringName, profiler :: EngineProfiler, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.send_message(message :: String, data :: Array, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.unregister_message_capture(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EngineDebugger.unregister_profiler(name :: StringName, ) :: {:ok :: label, state :: State, }
spec EngineProfiler._add_frame(data :: Array, ) :: {:ok :: label, state :: State, }
spec EngineProfiler._tick(frame_time :: float, process_time :: float, physics_time :: float, physics_frame_time :: float, ) :: {:ok :: label, state :: State, }
spec EngineProfiler._toggle(enable :: bool, options :: Array, ) :: {:ok :: label, state :: State, }
spec Environment.get_adjustment_brightness() :: {:ok :: label, state :: State, }
spec Environment.get_adjustment_color_correction() :: {:ok :: label, state :: State, }
spec Environment.get_adjustment_contrast() :: {:ok :: label, state :: State, }
spec Environment.get_adjustment_saturation() :: {:ok :: label, state :: State, }
spec Environment.get_ambient_light_color() :: {:ok :: label, state :: State, }
spec Environment.get_ambient_light_energy() :: {:ok :: label, state :: State, }
spec Environment.get_ambient_light_sky_contribution() :: {:ok :: label, state :: State, }
spec Environment.get_ambient_source() :: {:ok :: label, state :: State, }
spec Environment.get_background() :: {:ok :: label, state :: State, }
spec Environment.get_bg_color() :: {:ok :: label, state :: State, }
spec Environment.get_bg_energy_multiplier() :: {:ok :: label, state :: State, }
spec Environment.get_bg_intensity() :: {:ok :: label, state :: State, }
spec Environment.get_camera_feed_id() :: {:ok :: label, state :: State, }
spec Environment.get_canvas_max_layer() :: {:ok :: label, state :: State, }
spec Environment.get_fog_aerial_perspective() :: {:ok :: label, state :: State, }
spec Environment.get_fog_density() :: {:ok :: label, state :: State, }
spec Environment.get_fog_height() :: {:ok :: label, state :: State, }
spec Environment.get_fog_height_density() :: {:ok :: label, state :: State, }
spec Environment.get_fog_light_color() :: {:ok :: label, state :: State, }
spec Environment.get_fog_light_energy() :: {:ok :: label, state :: State, }
spec Environment.get_fog_sky_affect() :: {:ok :: label, state :: State, }
spec Environment.get_fog_sun_scatter() :: {:ok :: label, state :: State, }
spec Environment.get_glow_blend_mode() :: {:ok :: label, state :: State, }
spec Environment.get_glow_bloom() :: {:ok :: label, state :: State, }
spec Environment.get_glow_hdr_bleed_scale() :: {:ok :: label, state :: State, }
spec Environment.get_glow_hdr_bleed_threshold() :: {:ok :: label, state :: State, }
spec Environment.get_glow_hdr_luminance_cap() :: {:ok :: label, state :: State, }
spec Environment.get_glow_intensity() :: {:ok :: label, state :: State, }
spec Environment.get_glow_level(idx :: int, ) :: {:ok :: label, state :: State, }
spec Environment.get_glow_map() :: {:ok :: label, state :: State, }
spec Environment.get_glow_map_strength() :: {:ok :: label, state :: State, }
spec Environment.get_glow_mix() :: {:ok :: label, state :: State, }
spec Environment.get_glow_strength() :: {:ok :: label, state :: State, }
spec Environment.get_reflection_source() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_bounce_feedback() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_cascade0_distance() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_cascades() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_energy() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_max_distance() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_min_cell_size() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_normal_bias() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_probe_bias() :: {:ok :: label, state :: State, }
spec Environment.get_sdfgi_y_scale() :: {:ok :: label, state :: State, }
spec Environment.get_sky() :: {:ok :: label, state :: State, }
spec Environment.get_sky_custom_fov() :: {:ok :: label, state :: State, }
spec Environment.get_sky_rotation() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_ao_channel_affect() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_detail() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_direct_light_affect() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_horizon() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_intensity() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_power() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_radius() :: {:ok :: label, state :: State, }
spec Environment.get_ssao_sharpness() :: {:ok :: label, state :: State, }
spec Environment.get_ssil_intensity() :: {:ok :: label, state :: State, }
spec Environment.get_ssil_normal_rejection() :: {:ok :: label, state :: State, }
spec Environment.get_ssil_radius() :: {:ok :: label, state :: State, }
spec Environment.get_ssil_sharpness() :: {:ok :: label, state :: State, }
spec Environment.get_ssr_depth_tolerance() :: {:ok :: label, state :: State, }
spec Environment.get_ssr_fade_in() :: {:ok :: label, state :: State, }
spec Environment.get_ssr_fade_out() :: {:ok :: label, state :: State, }
spec Environment.get_ssr_max_steps() :: {:ok :: label, state :: State, }
spec Environment.get_tonemap_exposure() :: {:ok :: label, state :: State, }
spec Environment.get_tonemap_white() :: {:ok :: label, state :: State, }
spec Environment.get_tonemapper() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_albedo() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_ambient_inject() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_anisotropy() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_density() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_detail_spread() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_emission() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_emission_energy() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_gi_inject() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_length() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_sky_affect() :: {:ok :: label, state :: State, }
spec Environment.get_volumetric_fog_temporal_reprojection_amount() :: {:ok :: label, state :: State, }
spec Environment.is_adjustment_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_fog_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_glow_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_glow_normalized() :: {:ok :: label, state :: State, }
spec Environment.is_sdfgi_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_sdfgi_reading_sky_light() :: {:ok :: label, state :: State, }
spec Environment.is_sdfgi_using_occlusion() :: {:ok :: label, state :: State, }
spec Environment.is_ssao_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_ssil_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_ssr_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_volumetric_fog_enabled() :: {:ok :: label, state :: State, }
spec Environment.is_volumetric_fog_temporal_reprojection_enabled() :: {:ok :: label, state :: State, }
spec Environment.set_adjustment_brightness(brightness :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_adjustment_color_correction(color_correction :: Texture, ) :: {:ok :: label, state :: State, }
spec Environment.set_adjustment_contrast(contrast :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_adjustment_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_adjustment_saturation(saturation :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ambient_light_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec Environment.set_ambient_light_energy(energy :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ambient_light_sky_contribution(ratio :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ambient_source(source :: enum::Environment.AmbientSource, ) :: {:ok :: label, state :: State, }
spec Environment.set_background(mode :: enum::Environment.BGMode, ) :: {:ok :: label, state :: State, }
spec Environment.set_bg_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec Environment.set_bg_energy_multiplier(energy :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_bg_intensity(energy :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_camera_feed_id(id :: int, ) :: {:ok :: label, state :: State, }
spec Environment.set_canvas_max_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_aerial_perspective(aerial_perspective :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_density(density :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_height(height :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_height_density(height_density :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_light_color(light_color :: Color, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_light_energy(light_energy :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_sky_affect(sky_affect :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_fog_sun_scatter(sun_scatter :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_blend_mode(mode :: enum::Environment.GlowBlendMode, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_bloom(amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_hdr_bleed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_hdr_bleed_threshold(threshold :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_hdr_luminance_cap(amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_intensity(intensity :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_level(idx :: int, intensity :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_map(mode :: Texture, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_map_strength(strength :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_mix(mix :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_normalized(normalize :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_glow_strength(strength :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_reflection_source(source :: enum::Environment.ReflectionSource, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_bounce_feedback(amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_cascade0_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_cascades(amount :: int, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_energy(amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_max_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_min_cell_size(size :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_normal_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_probe_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_read_sky_light(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_use_occlusion(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_sdfgi_y_scale(scale :: enum::Environment.SDFGIYScale, ) :: {:ok :: label, state :: State, }
spec Environment.set_sky(sky :: Sky, ) :: {:ok :: label, state :: State, }
spec Environment.set_sky_custom_fov(scale :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_sky_rotation(euler_radians :: Vector3, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_ao_channel_affect(amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_detail(detail :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_direct_light_affect(amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_horizon(horizon :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_intensity(intensity :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_power(power :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssao_sharpness(sharpness :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssil_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssil_intensity(intensity :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssil_normal_rejection(normal_rejection :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssil_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssil_sharpness(sharpness :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssr_depth_tolerance(depth_tolerance :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssr_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssr_fade_in(fade_in :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssr_fade_out(fade_out :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_ssr_max_steps(max_steps :: int, ) :: {:ok :: label, state :: State, }
spec Environment.set_tonemap_exposure(exposure :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_tonemap_white(white :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_tonemapper(mode :: enum::Environment.ToneMapper, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_albedo(color :: Color, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_ambient_inject(enabled :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_anisotropy(anisotropy :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_density(density :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_detail_spread(detail_spread :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_emission(color :: Color, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_emission_energy(begin :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_gi_inject(gi_inject :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_length(length :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_sky_affect(sky_affect :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_temporal_reprojection_amount(temporal_reprojection_amount :: float, ) :: {:ok :: label, state :: State, }
spec Environment.set_volumetric_fog_temporal_reprojection_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Expression.execute(inputs :: Array, base_instance :: Object, show_error :: bool, const_calls_only :: bool, ) :: {:ok :: label, state :: State, }
spec Expression.get_error_text() :: {:ok :: label, state :: State, }
spec Expression.has_execute_failed() :: {:ok :: label, state :: State, }
spec Expression.parse(expression :: String, input_names :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_cellular_distance_function() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_cellular_jitter() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_cellular_return_type() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_amplitude() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_fractal_gain() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_fractal_lacunarity() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_fractal_octaves() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_fractal_type() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_frequency() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_domain_warp_type() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_fractal_gain() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_fractal_lacunarity() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_fractal_octaves() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_fractal_ping_pong_strength() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_fractal_type() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_fractal_weighted_strength() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_frequency() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_noise_type() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_offset() :: {:ok :: label, state :: State, }
spec FastNoiseLite.get_seed() :: {:ok :: label, state :: State, }
spec FastNoiseLite.is_domain_warp_enabled() :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_cellular_distance_function(func :: enum::FastNoiseLite.CellularDistanceFunction, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_cellular_jitter(jitter :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_cellular_return_type(ret :: enum::FastNoiseLite.CellularReturnType, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_amplitude(domain_warp_amplitude :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_enabled(domain_warp_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_fractal_gain(domain_warp_gain :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_fractal_lacunarity(domain_warp_lacunarity :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_fractal_octaves(domain_warp_octave_count :: int, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_fractal_type(domain_warp_fractal_type :: enum::FastNoiseLite.DomainWarpFractalType, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_frequency(domain_warp_frequency :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_domain_warp_type(domain_warp_type :: enum::FastNoiseLite.DomainWarpType, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_fractal_gain(gain :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_fractal_lacunarity(lacunarity :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_fractal_octaves(octave_count :: int, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_fractal_ping_pong_strength(ping_pong_strength :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_fractal_type(type :: enum::FastNoiseLite.FractalType, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_fractal_weighted_strength(weighted_strength :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_frequency(freq :: float, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_noise_type(type :: enum::FastNoiseLite.NoiseType, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_offset(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec FastNoiseLite.set_seed(seed :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.close() :: {:ok :: label, state :: State, }
spec FileAccess.eof_reached() :: {:ok :: label, state :: State, }
spec FileAccess.file_exists(path :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.flush() :: {:ok :: label, state :: State, }
spec FileAccess.get_16() :: {:ok :: label, state :: State, }
spec FileAccess.get_32() :: {:ok :: label, state :: State, }
spec FileAccess.get_64() :: {:ok :: label, state :: State, }
spec FileAccess.get_8() :: {:ok :: label, state :: State, }
spec FileAccess.get_as_text(skip_cr :: bool, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_buffer(length :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_csv_line(delim :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_double() :: {:ok :: label, state :: State, }
spec FileAccess.get_error() :: {:ok :: label, state :: State, }
spec FileAccess.get_file_as_bytes(path :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_file_as_string(path :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_float() :: {:ok :: label, state :: State, }
spec FileAccess.get_length() :: {:ok :: label, state :: State, }
spec FileAccess.get_line() :: {:ok :: label, state :: State, }
spec FileAccess.get_md5(path :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_modified_time(file :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_open_error() :: {:ok :: label, state :: State, }
spec FileAccess.get_pascal_string() :: {:ok :: label, state :: State, }
spec FileAccess.get_path() :: {:ok :: label, state :: State, }
spec FileAccess.get_path_absolute() :: {:ok :: label, state :: State, }
spec FileAccess.get_position() :: {:ok :: label, state :: State, }
spec FileAccess.get_real() :: {:ok :: label, state :: State, }
spec FileAccess.get_sha256(path :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.get_var(allow_objects :: bool, ) :: {:ok :: label, state :: State, }
spec FileAccess.is_big_endian() :: {:ok :: label, state :: State, }
spec FileAccess.is_open() :: {:ok :: label, state :: State, }
spec FileAccess.open(path :: String, flags :: enum::FileAccess.ModeFlags, ) :: {:ok :: label, state :: State, }
spec FileAccess.open_compressed(path :: String, mode_flags :: enum::FileAccess.ModeFlags, compression_mode :: enum::FileAccess.CompressionMode, ) :: {:ok :: label, state :: State, }
spec FileAccess.open_encrypted(path :: String, mode_flags :: enum::FileAccess.ModeFlags, key :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec FileAccess.open_encrypted_with_pass(path :: String, mode_flags :: enum::FileAccess.ModeFlags, pass :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.seek(position :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.seek_end(position :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.set_big_endian(big_endian :: bool, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_16(value :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_32(value :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_64(value :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_8(value :: int, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_csv_line(values :: PackedStringArray, delim :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_double(value :: float, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_float(value :: float, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_line(line :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_pascal_string(string :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_real(value :: float, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_string(string :: String, ) :: {:ok :: label, state :: State, }
spec FileAccess.store_var(value :: Variant, full_objects :: bool, ) :: {:ok :: label, state :: State, }
spec FileDialog.add_filter(filter :: String, description :: String, ) :: {:ok :: label, state :: State, }
spec FileDialog.clear_filters() :: {:ok :: label, state :: State, }
spec FileDialog.deselect_all() :: {:ok :: label, state :: State, }
spec FileDialog.get_access() :: {:ok :: label, state :: State, }
spec FileDialog.get_current_dir() :: {:ok :: label, state :: State, }
spec FileDialog.get_current_file() :: {:ok :: label, state :: State, }
spec FileDialog.get_current_path() :: {:ok :: label, state :: State, }
spec FileDialog.get_file_mode() :: {:ok :: label, state :: State, }
spec FileDialog.get_filters() :: {:ok :: label, state :: State, }
spec FileDialog.get_line_edit() :: {:ok :: label, state :: State, }
spec FileDialog.get_root_subfolder() :: {:ok :: label, state :: State, }
spec FileDialog.get_vbox() :: {:ok :: label, state :: State, }
spec FileDialog.invalidate() :: {:ok :: label, state :: State, }
spec FileDialog.is_mode_overriding_title() :: {:ok :: label, state :: State, }
spec FileDialog.is_showing_hidden_files() :: {:ok :: label, state :: State, }
spec FileDialog.set_access(access :: enum::FileDialog.Access, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_current_dir(dir :: String, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_current_file(file :: String, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_current_path(path :: String, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_file_mode(mode :: enum::FileDialog.FileMode, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_filters(filters :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_mode_overrides_title(override :: bool, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_root_subfolder(dir :: String, ) :: {:ok :: label, state :: State, }
spec FileDialog.set_show_hidden_files(show :: bool, ) :: {:ok :: label, state :: State, }
spec FileSystemDock.navigate_to_path(path :: String, ) :: {:ok :: label, state :: State, }
spec FlowContainer.get_alignment() :: {:ok :: label, state :: State, }
spec FlowContainer.get_line_count() :: {:ok :: label, state :: State, }
spec FlowContainer.is_vertical() :: {:ok :: label, state :: State, }
spec FlowContainer.set_alignment(alignment :: enum::FlowContainer.AlignmentMode, ) :: {:ok :: label, state :: State, }
spec FlowContainer.set_vertical(vertical :: bool, ) :: {:ok :: label, state :: State, }
spec FogMaterial.get_albedo() :: {:ok :: label, state :: State, }
spec FogMaterial.get_density() :: {:ok :: label, state :: State, }
spec FogMaterial.get_density_texture() :: {:ok :: label, state :: State, }
spec FogMaterial.get_edge_fade() :: {:ok :: label, state :: State, }
spec FogMaterial.get_emission() :: {:ok :: label, state :: State, }
spec FogMaterial.get_height_falloff() :: {:ok :: label, state :: State, }
spec FogMaterial.set_albedo(albedo :: Color, ) :: {:ok :: label, state :: State, }
spec FogMaterial.set_density(density :: float, ) :: {:ok :: label, state :: State, }
spec FogMaterial.set_density_texture(density_texture :: Texture3D, ) :: {:ok :: label, state :: State, }
spec FogMaterial.set_edge_fade(edge_fade :: float, ) :: {:ok :: label, state :: State, }
spec FogMaterial.set_emission(emission :: Color, ) :: {:ok :: label, state :: State, }
spec FogMaterial.set_height_falloff(height_falloff :: float, ) :: {:ok :: label, state :: State, }
spec FogVolume.get_material() :: {:ok :: label, state :: State, }
spec FogVolume.get_shape() :: {:ok :: label, state :: State, }
spec FogVolume.get_size() :: {:ok :: label, state :: State, }
spec FogVolume.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec FogVolume.set_shape(shape :: enum::RenderingServer.FogVolumeShape, ) :: {:ok :: label, state :: State, }
spec FogVolume.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec Font.draw_char(canvas_item :: RID, pos :: Vector2, char :: int, font_size :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec Font.draw_char_outline(canvas_item :: RID, pos :: Vector2, char :: int, font_size :: int, size :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec Font.draw_multiline_string(canvas_item :: RID, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, max_lines :: int, modulate :: Color, brk_flags :: bitfield::TextServer.LineBreakFlag, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec Font.draw_multiline_string_outline(canvas_item :: RID, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, max_lines :: int, size :: int, modulate :: Color, brk_flags :: bitfield::TextServer.LineBreakFlag, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec Font.draw_string(canvas_item :: RID, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, modulate :: Color, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec Font.draw_string_outline(canvas_item :: RID, pos :: Vector2, text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, size :: int, modulate :: Color, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec Font.find_variation(variation_coordinates :: Dictionary, face_index :: int, strength :: float, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Font.get_ascent(font_size :: int, ) :: {:ok :: label, state :: State, }
spec Font.get_char_size(char :: int, font_size :: int, ) :: {:ok :: label, state :: State, }
spec Font.get_descent(font_size :: int, ) :: {:ok :: label, state :: State, }
spec Font.get_face_count() :: {:ok :: label, state :: State, }
spec Font.get_fallbacks() :: {:ok :: label, state :: State, }
spec Font.get_font_name() :: {:ok :: label, state :: State, }
spec Font.get_font_stretch() :: {:ok :: label, state :: State, }
spec Font.get_font_style() :: {:ok :: label, state :: State, }
spec Font.get_font_style_name() :: {:ok :: label, state :: State, }
spec Font.get_font_weight() :: {:ok :: label, state :: State, }
spec Font.get_height(font_size :: int, ) :: {:ok :: label, state :: State, }
spec Font.get_multiline_string_size(text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, max_lines :: int, brk_flags :: bitfield::TextServer.LineBreakFlag, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec Font.get_opentype_features() :: {:ok :: label, state :: State, }
spec Font.get_rids() :: {:ok :: label, state :: State, }
spec Font.get_spacing(spacing :: enum::TextServer.SpacingType, ) :: {:ok :: label, state :: State, }
spec Font.get_string_size(text :: String, alignment :: enum::HorizontalAlignment, width :: float, font_size :: int, jst_flags :: bitfield::TextServer.JustificationFlag, direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec Font.get_supported_chars() :: {:ok :: label, state :: State, }
spec Font.get_supported_feature_list() :: {:ok :: label, state :: State, }
spec Font.get_supported_variation_list() :: {:ok :: label, state :: State, }
spec Font.get_underline_position(font_size :: int, ) :: {:ok :: label, state :: State, }
spec Font.get_underline_thickness(font_size :: int, ) :: {:ok :: label, state :: State, }
spec Font.has_char(char :: int, ) :: {:ok :: label, state :: State, }
spec Font.is_language_supported(language :: String, ) :: {:ok :: label, state :: State, }
spec Font.is_script_supported(script :: String, ) :: {:ok :: label, state :: State, }
spec Font.set_cache_capacity(single_line :: int, multi_line :: int, ) :: {:ok :: label, state :: State, }
spec Font.set_fallbacks(fallbacks :: typedarray::Font, ) :: {:ok :: label, state :: State, }
spec FontFile.clear_cache() :: {:ok :: label, state :: State, }
spec FontFile.clear_glyphs(cache_index :: int, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.clear_kerning_map(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.clear_size_cache(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.clear_textures(cache_index :: int, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.get_antialiasing() :: {:ok :: label, state :: State, }
spec FontFile.get_cache_ascent(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_cache_count() :: {:ok :: label, state :: State, }
spec FontFile.get_cache_descent(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_cache_scale(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_cache_underline_position(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_cache_underline_thickness(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_data() :: {:ok :: label, state :: State, }
spec FontFile.get_embolden(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_face_index(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_fixed_size() :: {:ok :: label, state :: State, }
spec FontFile.get_generate_mipmaps() :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_advance(cache_index :: int, size :: int, glyph :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_index(size :: int, char :: int, variation_selector :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_list(cache_index :: int, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_offset(cache_index :: int, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_size(cache_index :: int, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_texture_idx(cache_index :: int, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_glyph_uv_rect(cache_index :: int, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_hinting() :: {:ok :: label, state :: State, }
spec FontFile.get_kerning(cache_index :: int, size :: int, glyph_pair :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.get_kerning_list(cache_index :: int, size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_language_support_override(language :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.get_language_support_overrides() :: {:ok :: label, state :: State, }
spec FontFile.get_msdf_pixel_range() :: {:ok :: label, state :: State, }
spec FontFile.get_msdf_size() :: {:ok :: label, state :: State, }
spec FontFile.get_opentype_feature_overrides() :: {:ok :: label, state :: State, }
spec FontFile.get_oversampling() :: {:ok :: label, state :: State, }
spec FontFile.get_script_support_override(script :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.get_script_support_overrides() :: {:ok :: label, state :: State, }
spec FontFile.get_size_cache_list(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_subpixel_positioning() :: {:ok :: label, state :: State, }
spec FontFile.get_texture_count(cache_index :: int, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.get_texture_image(cache_index :: int, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_texture_offsets(cache_index :: int, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_transform(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.get_variation_coordinates(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.is_allow_system_fallback() :: {:ok :: label, state :: State, }
spec FontFile.is_force_autohinter() :: {:ok :: label, state :: State, }
spec FontFile.is_multichannel_signed_distance_field() :: {:ok :: label, state :: State, }
spec FontFile.load_bitmap_font(path :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.load_dynamic_font(path :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_cache(cache_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_glyph(cache_index :: int, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_kerning(cache_index :: int, size :: int, glyph_pair :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_language_support_override(language :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_script_support_override(script :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_size_cache(cache_index :: int, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec FontFile.remove_texture(cache_index :: int, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.render_glyph(cache_index :: int, size :: Vector2i, index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.render_range(cache_index :: int, size :: Vector2i, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_allow_system_fallback(allow_system_fallback :: bool, ) :: {:ok :: label, state :: State, }
spec FontFile.set_antialiasing(antialiasing :: enum::TextServer.FontAntialiasing, ) :: {:ok :: label, state :: State, }
spec FontFile.set_cache_ascent(cache_index :: int, size :: int, ascent :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_cache_descent(cache_index :: int, size :: int, descent :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_cache_scale(cache_index :: int, size :: int, scale :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_cache_underline_position(cache_index :: int, size :: int, underline_position :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_cache_underline_thickness(cache_index :: int, size :: int, underline_thickness :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_data(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec FontFile.set_embolden(cache_index :: int, strength :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_face_index(cache_index :: int, face_index :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_fixed_size(fixed_size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_font_name(name :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.set_font_stretch(stretch :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_font_style(style :: bitfield::TextServer.FontStyle, ) :: {:ok :: label, state :: State, }
spec FontFile.set_font_style_name(name :: String, ) :: {:ok :: label, state :: State, }
spec FontFile.set_font_weight(weight :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_force_autohinter(force_autohinter :: bool, ) :: {:ok :: label, state :: State, }
spec FontFile.set_generate_mipmaps(generate_mipmaps :: bool, ) :: {:ok :: label, state :: State, }
spec FontFile.set_glyph_advance(cache_index :: int, size :: int, glyph :: int, advance :: Vector2, ) :: {:ok :: label, state :: State, }
spec FontFile.set_glyph_offset(cache_index :: int, size :: Vector2i, glyph :: int, offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec FontFile.set_glyph_size(cache_index :: int, size :: Vector2i, glyph :: int, gl_size :: Vector2, ) :: {:ok :: label, state :: State, }
spec FontFile.set_glyph_texture_idx(cache_index :: int, size :: Vector2i, glyph :: int, texture_idx :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_glyph_uv_rect(cache_index :: int, size :: Vector2i, glyph :: int, uv_rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec FontFile.set_hinting(hinting :: enum::TextServer.Hinting, ) :: {:ok :: label, state :: State, }
spec FontFile.set_kerning(cache_index :: int, size :: int, glyph_pair :: Vector2i, kerning :: Vector2, ) :: {:ok :: label, state :: State, }
spec FontFile.set_language_support_override(language :: String, supported :: bool, ) :: {:ok :: label, state :: State, }
spec FontFile.set_msdf_pixel_range(msdf_pixel_range :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_msdf_size(msdf_size :: int, ) :: {:ok :: label, state :: State, }
spec FontFile.set_multichannel_signed_distance_field(msdf :: bool, ) :: {:ok :: label, state :: State, }
spec FontFile.set_opentype_feature_overrides(overrides :: Dictionary, ) :: {:ok :: label, state :: State, }
spec FontFile.set_oversampling(oversampling :: float, ) :: {:ok :: label, state :: State, }
spec FontFile.set_script_support_override(script :: String, supported :: bool, ) :: {:ok :: label, state :: State, }
spec FontFile.set_subpixel_positioning(subpixel_positioning :: enum::TextServer.SubpixelPositioning, ) :: {:ok :: label, state :: State, }
spec FontFile.set_texture_image(cache_index :: int, size :: Vector2i, texture_index :: int, image :: Image, ) :: {:ok :: label, state :: State, }
spec FontFile.set_texture_offsets(cache_index :: int, size :: Vector2i, texture_index :: int, offset :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec FontFile.set_transform(cache_index :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec FontFile.set_variation_coordinates(cache_index :: int, variation_coordinates :: Dictionary, ) :: {:ok :: label, state :: State, }
spec FontVariation.get_base_font() :: {:ok :: label, state :: State, }
spec FontVariation.get_variation_embolden() :: {:ok :: label, state :: State, }
spec FontVariation.get_variation_face_index() :: {:ok :: label, state :: State, }
spec FontVariation.get_variation_opentype() :: {:ok :: label, state :: State, }
spec FontVariation.get_variation_transform() :: {:ok :: label, state :: State, }
spec FontVariation.set_base_font(font :: Font, ) :: {:ok :: label, state :: State, }
spec FontVariation.set_opentype_features(features :: Dictionary, ) :: {:ok :: label, state :: State, }
spec FontVariation.set_spacing(spacing :: enum::TextServer.SpacingType, value :: int, ) :: {:ok :: label, state :: State, }
spec FontVariation.set_variation_embolden(strength :: float, ) :: {:ok :: label, state :: State, }
spec FontVariation.set_variation_face_index(face_index :: int, ) :: {:ok :: label, state :: State, }
spec FontVariation.set_variation_opentype(coords :: Dictionary, ) :: {:ok :: label, state :: State, }
spec FontVariation.set_variation_transform(transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec GDExtension.close_library() :: {:ok :: label, state :: State, }
spec GDExtension.get_minimum_library_initialization_level() :: {:ok :: label, state :: State, }
spec GDExtension.initialize_library(level :: enum::GDExtension.InitializationLevel, ) :: {:ok :: label, state :: State, }
spec GDExtension.is_library_open() :: {:ok :: label, state :: State, }
spec GDExtension.open_library(path :: String, entry_symbol :: String, ) :: {:ok :: label, state :: State, }
spec GDExtensionManager.get_extension(path :: String, ) :: {:ok :: label, state :: State, }
spec GDExtensionManager.get_loaded_extensions() :: {:ok :: label, state :: State, }
spec GDExtensionManager.is_extension_loaded(path :: String, ) :: {:ok :: label, state :: State, }
spec GDExtensionManager.load_extension(path :: String, ) :: {:ok :: label, state :: State, }
spec GDExtensionManager.reload_extension(path :: String, ) :: {:ok :: label, state :: State, }
spec GDExtensionManager.unload_extension(path :: String, ) :: {:ok :: label, state :: State, }
spec GDScript.new() :: {:ok :: label, state :: State, }
spec GDScriptNativeClass.new() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_buffer_view() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_byte_offset() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_component_type() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_count() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_max() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_min() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_normalized() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_sparse_count() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_sparse_indices_buffer_view() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_sparse_indices_byte_offset() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_sparse_indices_component_type() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_sparse_values_buffer_view() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_sparse_values_byte_offset() :: {:ok :: label, state :: State, }
spec GLTFAccessor.get_type() :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_buffer_view(buffer_view :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_byte_offset(byte_offset :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_component_type(component_type :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_count(count :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_max(max :: PackedFloat64Array, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_min(min :: PackedFloat64Array, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_normalized(normalized :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_sparse_count(sparse_count :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_sparse_indices_buffer_view(sparse_indices_buffer_view :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_sparse_indices_byte_offset(sparse_indices_byte_offset :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_sparse_indices_component_type(sparse_indices_component_type :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_sparse_values_buffer_view(sparse_values_buffer_view :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_sparse_values_byte_offset(sparse_values_byte_offset :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAccessor.set_type(type :: int, ) :: {:ok :: label, state :: State, }
spec GLTFAnimation.get_loop() :: {:ok :: label, state :: State, }
spec GLTFAnimation.set_loop(loop :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFBufferView.get_buffer() :: {:ok :: label, state :: State, }
spec GLTFBufferView.get_byte_length() :: {:ok :: label, state :: State, }
spec GLTFBufferView.get_byte_offset() :: {:ok :: label, state :: State, }
spec GLTFBufferView.get_byte_stride() :: {:ok :: label, state :: State, }
spec GLTFBufferView.get_indices() :: {:ok :: label, state :: State, }
spec GLTFBufferView.set_buffer(buffer :: int, ) :: {:ok :: label, state :: State, }
spec GLTFBufferView.set_byte_length(byte_length :: int, ) :: {:ok :: label, state :: State, }
spec GLTFBufferView.set_byte_offset(byte_offset :: int, ) :: {:ok :: label, state :: State, }
spec GLTFBufferView.set_byte_stride(byte_stride :: int, ) :: {:ok :: label, state :: State, }
spec GLTFBufferView.set_indices(indices :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.from_dictionary(dictionary :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.from_node(camera_node :: Camera3D, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.get_depth_far() :: {:ok :: label, state :: State, }
spec GLTFCamera.get_depth_near() :: {:ok :: label, state :: State, }
spec GLTFCamera.get_fov() :: {:ok :: label, state :: State, }
spec GLTFCamera.get_perspective() :: {:ok :: label, state :: State, }
spec GLTFCamera.get_size_mag() :: {:ok :: label, state :: State, }
spec GLTFCamera.set_depth_far(zdepth_far :: float, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.set_depth_near(zdepth_near :: float, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.set_fov(fov :: float, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.set_perspective(perspective :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.set_size_mag(size_mag :: float, ) :: {:ok :: label, state :: State, }
spec GLTFCamera.to_dictionary() :: {:ok :: label, state :: State, }
spec GLTFCamera.to_node() :: {:ok :: label, state :: State, }
spec GLTFCollider.from_dictionary(dictionary :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.from_node(collider_node :: CollisionShape3D, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.get_height() :: {:ok :: label, state :: State, }
spec GLTFCollider.get_importer_mesh() :: {:ok :: label, state :: State, }
spec GLTFCollider.get_is_trigger() :: {:ok :: label, state :: State, }
spec GLTFCollider.get_mesh_index() :: {:ok :: label, state :: State, }
spec GLTFCollider.get_radius() :: {:ok :: label, state :: State, }
spec GLTFCollider.get_shape_type() :: {:ok :: label, state :: State, }
spec GLTFCollider.get_size() :: {:ok :: label, state :: State, }
spec GLTFCollider.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.set_importer_mesh(importer_mesh :: ImporterMesh, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.set_is_trigger(is_trigger :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.set_mesh_index(mesh_index :: int, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.set_shape_type(shape_type :: String, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GLTFCollider.to_dictionary() :: {:ok :: label, state :: State, }
spec GLTFCollider.to_node(cache_shapes :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.append_from_buffer(bytes :: PackedByteArray, base_path :: String, state :: GLTFState, flags :: int, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.append_from_file(path :: String, state :: GLTFState, flags :: int, base_path :: String, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.append_from_scene(node :: Node, state :: GLTFState, flags :: int, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.generate_buffer(state :: GLTFState, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.generate_scene(state :: GLTFState, bake_fps :: float, trimming :: bool, remove_immutable_tracks :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.register_gltf_document_extension(extension :: GLTFDocumentExtension, first_priority :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.unregister_gltf_document_extension(extension :: GLTFDocumentExtension, ) :: {:ok :: label, state :: State, }
spec GLTFDocument.write_to_filesystem(state :: GLTFState, path :: String, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._convert_scene_node(state :: GLTFState, gltf_node :: GLTFNode, scene_node :: Node, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._export_node(state :: GLTFState, gltf_node :: GLTFNode, json :: Dictionary, node :: Node, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._export_post(state :: GLTFState, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._export_preflight(state :: GLTFState, root :: Node, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._generate_scene_node(state :: GLTFState, gltf_node :: GLTFNode, scene_parent :: Node, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._get_supported_extensions() :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._import_node(state :: GLTFState, gltf_node :: GLTFNode, json :: Dictionary, node :: Node, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._import_post(state :: GLTFState, root :: Node, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._import_post_parse(state :: GLTFState, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._import_preflight(state :: GLTFState, extensions :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec GLTFDocumentExtension._parse_node_extensions(state :: GLTFState, gltf_node :: GLTFNode, extensions :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFLight.from_dictionary(dictionary :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFLight.from_node(light_node :: Light3D, ) :: {:ok :: label, state :: State, }
spec GLTFLight.get_color() :: {:ok :: label, state :: State, }
spec GLTFLight.get_inner_cone_angle() :: {:ok :: label, state :: State, }
spec GLTFLight.get_intensity() :: {:ok :: label, state :: State, }
spec GLTFLight.get_light_type() :: {:ok :: label, state :: State, }
spec GLTFLight.get_outer_cone_angle() :: {:ok :: label, state :: State, }
spec GLTFLight.get_range() :: {:ok :: label, state :: State, }
spec GLTFLight.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec GLTFLight.set_inner_cone_angle(inner_cone_angle :: float, ) :: {:ok :: label, state :: State, }
spec GLTFLight.set_intensity(intensity :: float, ) :: {:ok :: label, state :: State, }
spec GLTFLight.set_light_type(light_type :: String, ) :: {:ok :: label, state :: State, }
spec GLTFLight.set_outer_cone_angle(outer_cone_angle :: float, ) :: {:ok :: label, state :: State, }
spec GLTFLight.set_range(range :: float, ) :: {:ok :: label, state :: State, }
spec GLTFLight.to_dictionary() :: {:ok :: label, state :: State, }
spec GLTFLight.to_node() :: {:ok :: label, state :: State, }
spec GLTFMesh.get_blend_weights() :: {:ok :: label, state :: State, }
spec GLTFMesh.get_instance_materials() :: {:ok :: label, state :: State, }
spec GLTFMesh.get_mesh() :: {:ok :: label, state :: State, }
spec GLTFMesh.set_blend_weights(blend_weights :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec GLTFMesh.set_instance_materials(instance_materials :: typedarray::Material, ) :: {:ok :: label, state :: State, }
spec GLTFMesh.set_mesh(mesh :: ImporterMesh, ) :: {:ok :: label, state :: State, }
spec GLTFNode.get_additional_data(extension_name :: StringName, ) :: {:ok :: label, state :: State, }
spec GLTFNode.get_camera() :: {:ok :: label, state :: State, }
spec GLTFNode.get_children() :: {:ok :: label, state :: State, }
spec GLTFNode.get_height() :: {:ok :: label, state :: State, }
spec GLTFNode.get_light() :: {:ok :: label, state :: State, }
spec GLTFNode.get_mesh() :: {:ok :: label, state :: State, }
spec GLTFNode.get_parent() :: {:ok :: label, state :: State, }
spec GLTFNode.get_position() :: {:ok :: label, state :: State, }
spec GLTFNode.get_rotation() :: {:ok :: label, state :: State, }
spec GLTFNode.get_scale() :: {:ok :: label, state :: State, }
spec GLTFNode.get_skeleton() :: {:ok :: label, state :: State, }
spec GLTFNode.get_skin() :: {:ok :: label, state :: State, }
spec GLTFNode.get_xform() :: {:ok :: label, state :: State, }
spec GLTFNode.set_additional_data(extension_name :: StringName, additional_data :: Variant, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_camera(camera :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_children(children :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_height(height :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_light(light :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_mesh(mesh :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_parent(parent :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_rotation(rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_scale(scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_skeleton(skeleton :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_skin(skin :: int, ) :: {:ok :: label, state :: State, }
spec GLTFNode.set_xform(xform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.from_dictionary(dictionary :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.from_node(body_node :: CollisionObject3D, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.get_angular_velocity() :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.get_body_type() :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.get_linear_velocity() :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.get_mass() :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.set_angular_velocity(angular_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.set_body_type(body_type :: String, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.set_linear_velocity(linear_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.set_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.to_dictionary() :: {:ok :: label, state :: State, }
spec GLTFPhysicsBody.to_node() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_bone_attachment(idx :: int, ) :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_bone_attachment_count() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_godot_bone_node() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_godot_skeleton() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_joints() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_roots() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.get_unique_names() :: {:ok :: label, state :: State, }
spec GLTFSkeleton.set_godot_bone_node(godot_bone_node :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFSkeleton.set_joints(joints :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFSkeleton.set_roots(roots :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFSkeleton.set_unique_names(unique_names :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.get_godot_skin() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_inverse_binds() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_joint_i_to_bone_i() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_joint_i_to_name() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_joints() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_joints_original() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_non_joints() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_roots() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_skeleton() :: {:ok :: label, state :: State, }
spec GLTFSkin.get_skin_root() :: {:ok :: label, state :: State, }
spec GLTFSkin.set_godot_skin(godot_skin :: Skin, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_inverse_binds(inverse_binds :: typedarray::Transform3D, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_joint_i_to_bone_i(joint_i_to_bone_i :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_joint_i_to_name(joint_i_to_name :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_joints(joints :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_joints_original(joints_original :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_non_joints(non_joints :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_roots(roots :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_skeleton(skeleton :: int, ) :: {:ok :: label, state :: State, }
spec GLTFSkin.set_skin_root(skin_root :: int, ) :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.get_diffuse_factor() :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.get_diffuse_img() :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.get_gloss_factor() :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.get_spec_gloss_img() :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.get_specular_factor() :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.set_diffuse_factor(diffuse_factor :: Color, ) :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.set_diffuse_img(diffuse_img :: Image, ) :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.set_gloss_factor(gloss_factor :: float, ) :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.set_spec_gloss_img(spec_gloss_img :: Image, ) :: {:ok :: label, state :: State, }
spec GLTFSpecGloss.set_specular_factor(specular_factor :: Color, ) :: {:ok :: label, state :: State, }
spec GLTFState.add_used_extension(extension_name :: String, required :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFState.get_accessors() :: {:ok :: label, state :: State, }
spec GLTFState.get_additional_data(extension_name :: StringName, ) :: {:ok :: label, state :: State, }
spec GLTFState.get_animation_player(idx :: int, ) :: {:ok :: label, state :: State, }
spec GLTFState.get_animation_players_count(idx :: int, ) :: {:ok :: label, state :: State, }
spec GLTFState.get_animations() :: {:ok :: label, state :: State, }
spec GLTFState.get_base_path() :: {:ok :: label, state :: State, }
spec GLTFState.get_buffer_views() :: {:ok :: label, state :: State, }
spec GLTFState.get_buffers() :: {:ok :: label, state :: State, }
spec GLTFState.get_cameras() :: {:ok :: label, state :: State, }
spec GLTFState.get_create_animations() :: {:ok :: label, state :: State, }
spec GLTFState.get_glb_data() :: {:ok :: label, state :: State, }
spec GLTFState.get_handle_binary_image() :: {:ok :: label, state :: State, }
spec GLTFState.get_images() :: {:ok :: label, state :: State, }
spec GLTFState.get_json() :: {:ok :: label, state :: State, }
spec GLTFState.get_lights() :: {:ok :: label, state :: State, }
spec GLTFState.get_major_version() :: {:ok :: label, state :: State, }
spec GLTFState.get_materials() :: {:ok :: label, state :: State, }
spec GLTFState.get_meshes() :: {:ok :: label, state :: State, }
spec GLTFState.get_minor_version() :: {:ok :: label, state :: State, }
spec GLTFState.get_nodes() :: {:ok :: label, state :: State, }
spec GLTFState.get_root_nodes() :: {:ok :: label, state :: State, }
spec GLTFState.get_scene_name() :: {:ok :: label, state :: State, }
spec GLTFState.get_scene_node(idx :: int, ) :: {:ok :: label, state :: State, }
spec GLTFState.get_skeletons() :: {:ok :: label, state :: State, }
spec GLTFState.get_skins() :: {:ok :: label, state :: State, }
spec GLTFState.get_texture_samplers() :: {:ok :: label, state :: State, }
spec GLTFState.get_textures() :: {:ok :: label, state :: State, }
spec GLTFState.get_unique_animation_names() :: {:ok :: label, state :: State, }
spec GLTFState.get_unique_names() :: {:ok :: label, state :: State, }
spec GLTFState.get_use_named_skin_binds() :: {:ok :: label, state :: State, }
spec GLTFState.set_accessors(accessors :: typedarray::GLTFAccessor, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_additional_data(extension_name :: StringName, additional_data :: Variant, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_animations(animations :: typedarray::GLTFAnimation, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_base_path(base_path :: String, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_buffer_views(buffer_views :: typedarray::GLTFBufferView, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_buffers(buffers :: typedarray::PackedByteArray, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_cameras(cameras :: typedarray::GLTFCamera, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_create_animations(create_animations :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_glb_data(glb_data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_handle_binary_image(method :: int, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_images(images :: typedarray::Texture2D, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_json(json :: Dictionary, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_lights(lights :: typedarray::GLTFLight, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_major_version(major_version :: int, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_materials(materials :: typedarray::Material, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_meshes(meshes :: typedarray::GLTFMesh, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_minor_version(minor_version :: int, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_nodes(nodes :: typedarray::GLTFNode, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_root_nodes(root_nodes :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_scene_name(scene_name :: String, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_skeletons(skeletons :: typedarray::GLTFSkeleton, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_skins(skins :: typedarray::GLTFSkin, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_texture_samplers(texture_samplers :: typedarray::GLTFTextureSampler, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_textures(textures :: typedarray::GLTFTexture, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_unique_animation_names(unique_animation_names :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_unique_names(unique_names :: typedarray::String, ) :: {:ok :: label, state :: State, }
spec GLTFState.set_use_named_skin_binds(use_named_skin_binds :: bool, ) :: {:ok :: label, state :: State, }
spec GLTFTexture.get_sampler() :: {:ok :: label, state :: State, }
spec GLTFTexture.get_src_image() :: {:ok :: label, state :: State, }
spec GLTFTexture.set_sampler(sampler :: int, ) :: {:ok :: label, state :: State, }
spec GLTFTexture.set_src_image(src_image :: int, ) :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.get_mag_filter() :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.get_min_filter() :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.get_wrap_s() :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.get_wrap_t() :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.set_mag_filter(filter_mode :: int, ) :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.set_min_filter(filter_mode :: int, ) :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.set_wrap_s(wrap_mode :: int, ) :: {:ok :: label, state :: State, }
spec GLTFTextureSampler.set_wrap_t(wrap_mode :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.capture_rect() :: {:ok :: label, state :: State, }
spec GPUParticles2D.emit_particle(xform :: Transform2D, velocity :: Vector2, color :: Color, custom :: Color, flags :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_amount() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_collision_base_size() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_draw_order() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_explosiveness_ratio() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_fixed_fps() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_fractional_delta() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_interpolate() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_lifetime() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_one_shot() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_pre_process_time() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_process_material() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_randomness_ratio() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_speed_scale() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_sub_emitter() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_texture() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_trail_lifetime() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_trail_section_subdivisions() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_trail_sections() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_use_local_coordinates() :: {:ok :: label, state :: State, }
spec GPUParticles2D.get_visibility_rect() :: {:ok :: label, state :: State, }
spec GPUParticles2D.is_emitting() :: {:ok :: label, state :: State, }
spec GPUParticles2D.is_trail_enabled() :: {:ok :: label, state :: State, }
spec GPUParticles2D.restart() :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_amount(amount :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_collision_base_size(size :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_draw_order(order :: enum::GPUParticles2D.DrawOrder, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_emitting(emitting :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_explosiveness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_fixed_fps(fps :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_fractional_delta(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_interpolate(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_lifetime(secs :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_one_shot(secs :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_pre_process_time(secs :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_process_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_randomness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_speed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_sub_emitter(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_trail_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_trail_lifetime(secs :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_trail_section_subdivisions(subdivisions :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_trail_sections(sections :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_use_local_coordinates(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles2D.set_visibility_rect(visibility_rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.capture_aabb() :: {:ok :: label, state :: State, }
spec GPUParticles3D.emit_particle(xform :: Transform3D, velocity :: Vector3, color :: Color, custom :: Color, flags :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_amount() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_collision_base_size() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_draw_order() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_draw_pass_mesh(pass :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_draw_passes() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_explosiveness_ratio() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_fixed_fps() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_fractional_delta() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_interpolate() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_lifetime() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_one_shot() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_pre_process_time() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_process_material() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_randomness_ratio() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_skin() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_speed_scale() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_sub_emitter() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_trail_lifetime() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_transform_align() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_use_local_coordinates() :: {:ok :: label, state :: State, }
spec GPUParticles3D.get_visibility_aabb() :: {:ok :: label, state :: State, }
spec GPUParticles3D.is_emitting() :: {:ok :: label, state :: State, }
spec GPUParticles3D.is_trail_enabled() :: {:ok :: label, state :: State, }
spec GPUParticles3D.restart() :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_amount(amount :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_collision_base_size(size :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_draw_order(order :: enum::GPUParticles3D.DrawOrder, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_draw_pass_mesh(pass :: int, mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_draw_passes(passes :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_emitting(emitting :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_explosiveness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_fixed_fps(fps :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_fractional_delta(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_interpolate(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_lifetime(secs :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_one_shot(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_pre_process_time(secs :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_process_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_randomness_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_skin(skin :: Skin, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_speed_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_sub_emitter(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_trail_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_trail_lifetime(secs :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_transform_align(align :: enum::GPUParticles3D.TransformAlign, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_use_local_coordinates(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticles3D.set_visibility_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.get_attenuation() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.get_cull_mask() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.get_directionality() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.get_strength() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.set_attenuation(attenuation :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.set_cull_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.set_directionality(amount :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractor3D.set_strength(strength :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorBox3D.get_size() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorBox3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorSphere3D.get_radius() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorSphere3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorVectorField3D.get_size() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorVectorField3D.get_texture() :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorVectorField3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GPUParticlesAttractorVectorField3D.set_texture(texture :: Texture3D, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollision3D.get_cull_mask() :: {:ok :: label, state :: State, }
spec GPUParticlesCollision3D.set_cull_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionBox3D.get_size() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionBox3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.get_resolution() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.get_size() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.get_update_mode() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.is_follow_camera_enabled() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.set_follow_camera_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.set_resolution(resolution :: enum::GPUParticlesCollisionHeightField3D.Resolution, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionHeightField3D.set_update_mode(update_mode :: enum::GPUParticlesCollisionHeightField3D.UpdateMode, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.get_bake_mask() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.get_bake_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.get_resolution() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.get_size() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.get_texture() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.get_thickness() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.set_bake_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.set_bake_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.set_resolution(resolution :: enum::GPUParticlesCollisionSDF3D.Resolution, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.set_texture(texture :: Texture3D, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSDF3D.set_thickness(thickness :: float, ) :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSphere3D.get_radius() :: {:ok :: label, state :: State, }
spec GPUParticlesCollisionSphere3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.get_flag_x(flag :: enum::Generic6DOFJoint3D.Flag, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.get_flag_y(flag :: enum::Generic6DOFJoint3D.Flag, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.get_flag_z(flag :: enum::Generic6DOFJoint3D.Flag, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.get_param_x(param :: enum::Generic6DOFJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.get_param_y(param :: enum::Generic6DOFJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.get_param_z(param :: enum::Generic6DOFJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.set_flag_x(flag :: enum::Generic6DOFJoint3D.Flag, value :: bool, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.set_flag_y(flag :: enum::Generic6DOFJoint3D.Flag, value :: bool, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.set_flag_z(flag :: enum::Generic6DOFJoint3D.Flag, value :: bool, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.set_param_x(param :: enum::Generic6DOFJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.set_param_y(param :: enum::Generic6DOFJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec Generic6DOFJoint3D.set_param_z(param :: enum::Generic6DOFJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec Geometry2D.clip_polygons(polygon_a :: PackedVector2Array, polygon_b :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.clip_polyline_with_polygon(polyline :: PackedVector2Array, polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.convex_hull(points :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.decompose_polygon_in_convex(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.exclude_polygons(polygon_a :: PackedVector2Array, polygon_b :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.get_closest_point_to_segment(point :: Vector2, s1 :: Vector2, s2 :: Vector2, ) :: {:ok :: label, state :: State, }
spec Geometry2D.get_closest_point_to_segment_uncapped(point :: Vector2, s1 :: Vector2, s2 :: Vector2, ) :: {:ok :: label, state :: State, }
spec Geometry2D.get_closest_points_between_segments(p1 :: Vector2, q1 :: Vector2, p2 :: Vector2, q2 :: Vector2, ) :: {:ok :: label, state :: State, }
spec Geometry2D.intersect_polygons(polygon_a :: PackedVector2Array, polygon_b :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.intersect_polyline_with_polygon(polyline :: PackedVector2Array, polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.is_point_in_circle(point :: Vector2, circle_position :: Vector2, circle_radius :: float, ) :: {:ok :: label, state :: State, }
spec Geometry2D.is_point_in_polygon(point :: Vector2, polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.is_polygon_clockwise(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.line_intersects_line(from_a :: Vector2, dir_a :: Vector2, from_b :: Vector2, dir_b :: Vector2, ) :: {:ok :: label, state :: State, }
spec Geometry2D.make_atlas(sizes :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.merge_polygons(polygon_a :: PackedVector2Array, polygon_b :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.offset_polygon(polygon :: PackedVector2Array, delta :: float, join_type :: enum::Geometry2D.PolyJoinType, ) :: {:ok :: label, state :: State, }
spec Geometry2D.offset_polyline(polyline :: PackedVector2Array, delta :: float, join_type :: enum::Geometry2D.PolyJoinType, end_type :: enum::Geometry2D.PolyEndType, ) :: {:ok :: label, state :: State, }
spec Geometry2D.point_is_inside_triangle(point :: Vector2, a :: Vector2, b :: Vector2, c :: Vector2, ) :: {:ok :: label, state :: State, }
spec Geometry2D.segment_intersects_circle(segment_from :: Vector2, segment_to :: Vector2, circle_position :: Vector2, circle_radius :: float, ) :: {:ok :: label, state :: State, }
spec Geometry2D.segment_intersects_segment(from_a :: Vector2, to_a :: Vector2, from_b :: Vector2, to_b :: Vector2, ) :: {:ok :: label, state :: State, }
spec Geometry2D.triangulate_delaunay(points :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry2D.triangulate_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Geometry3D.build_box_planes(extents :: Vector3, ) :: {:ok :: label, state :: State, }
spec Geometry3D.build_capsule_planes(radius :: float, height :: float, sides :: int, lats :: int, axis :: enum::Vector3.Axis, ) :: {:ok :: label, state :: State, }
spec Geometry3D.build_cylinder_planes(radius :: float, height :: float, sides :: int, axis :: enum::Vector3.Axis, ) :: {:ok :: label, state :: State, }
spec Geometry3D.clip_polygon(points :: PackedVector3Array, plane :: Plane, ) :: {:ok :: label, state :: State, }
spec Geometry3D.get_closest_point_to_segment(point :: Vector3, s1 :: Vector3, s2 :: Vector3, ) :: {:ok :: label, state :: State, }
spec Geometry3D.get_closest_point_to_segment_uncapped(point :: Vector3, s1 :: Vector3, s2 :: Vector3, ) :: {:ok :: label, state :: State, }
spec Geometry3D.get_closest_points_between_segments(p1 :: Vector3, p2 :: Vector3, q1 :: Vector3, q2 :: Vector3, ) :: {:ok :: label, state :: State, }
spec Geometry3D.ray_intersects_triangle(from :: Vector3, dir :: Vector3, a :: Vector3, b :: Vector3, c :: Vector3, ) :: {:ok :: label, state :: State, }
spec Geometry3D.segment_intersects_convex(from :: Vector3, to :: Vector3, planes :: Array, ) :: {:ok :: label, state :: State, }
spec Geometry3D.segment_intersects_cylinder(from :: Vector3, to :: Vector3, height :: float, radius :: float, ) :: {:ok :: label, state :: State, }
spec Geometry3D.segment_intersects_sphere(from :: Vector3, to :: Vector3, sphere_position :: Vector3, sphere_radius :: float, ) :: {:ok :: label, state :: State, }
spec Geometry3D.segment_intersects_triangle(from :: Vector3, to :: Vector3, a :: Vector3, b :: Vector3, c :: Vector3, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_cast_shadows_setting() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_custom_aabb() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_extra_cull_margin() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_gi_mode() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_instance_shader_parameter(name :: StringName, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_lightmap_scale() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_lod_bias() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_material_overlay() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_material_override() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_transparency() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_visibility_range_begin() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_visibility_range_begin_margin() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_visibility_range_end() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_visibility_range_end_margin() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.get_visibility_range_fade_mode() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.is_ignoring_occlusion_culling() :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_cast_shadows_setting(shadow_casting_setting :: enum::GeometryInstance3D.ShadowCastingSetting, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_custom_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_extra_cull_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_gi_mode(mode :: enum::GeometryInstance3D.GIMode, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_ignore_occlusion_culling(ignore_culling :: bool, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_instance_shader_parameter(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_lightmap_scale(scale :: enum::GeometryInstance3D.LightmapScale, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_lod_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_material_overlay(material :: Material, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_material_override(material :: Material, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_transparency(transparency :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_visibility_range_begin(distance :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_visibility_range_begin_margin(distance :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_visibility_range_end(distance :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_visibility_range_end_margin(distance :: float, ) :: {:ok :: label, state :: State, }
spec GeometryInstance3D.set_visibility_range_fade_mode(mode :: enum::GeometryInstance3D.VisibilityRangeFadeMode, ) :: {:ok :: label, state :: State, }
spec Gradient.add_point(offset :: float, color :: Color, ) :: {:ok :: label, state :: State, }
spec Gradient.get_color(point :: int, ) :: {:ok :: label, state :: State, }
spec Gradient.get_colors() :: {:ok :: label, state :: State, }
spec Gradient.get_interpolation_mode() :: {:ok :: label, state :: State, }
spec Gradient.get_offset(point :: int, ) :: {:ok :: label, state :: State, }
spec Gradient.get_offsets() :: {:ok :: label, state :: State, }
spec Gradient.get_point_count() :: {:ok :: label, state :: State, }
spec Gradient.remove_point(point :: int, ) :: {:ok :: label, state :: State, }
spec Gradient.reverse() :: {:ok :: label, state :: State, }
spec Gradient.sample(offset :: float, ) :: {:ok :: label, state :: State, }
spec Gradient.set_color(point :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec Gradient.set_colors(colors :: PackedColorArray, ) :: {:ok :: label, state :: State, }
spec Gradient.set_interpolation_mode(interpolation_mode :: enum::Gradient.InterpolationMode, ) :: {:ok :: label, state :: State, }
spec Gradient.set_offset(point :: int, offset :: float, ) :: {:ok :: label, state :: State, }
spec Gradient.set_offsets(offsets :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec GradientTexture1D.get_gradient() :: {:ok :: label, state :: State, }
spec GradientTexture1D.is_using_hdr() :: {:ok :: label, state :: State, }
spec GradientTexture1D.set_gradient(gradient :: Gradient, ) :: {:ok :: label, state :: State, }
spec GradientTexture1D.set_use_hdr(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec GradientTexture1D.set_width(width :: int, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.get_fill() :: {:ok :: label, state :: State, }
spec GradientTexture2D.get_fill_from() :: {:ok :: label, state :: State, }
spec GradientTexture2D.get_fill_to() :: {:ok :: label, state :: State, }
spec GradientTexture2D.get_gradient() :: {:ok :: label, state :: State, }
spec GradientTexture2D.get_repeat() :: {:ok :: label, state :: State, }
spec GradientTexture2D.is_using_hdr() :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_fill(fill :: enum::GradientTexture2D.Fill, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_fill_from(fill_from :: Vector2, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_fill_to(fill_to :: Vector2, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_gradient(gradient :: Gradient, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_height(height :: int, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_repeat(repeat :: enum::GradientTexture2D.Repeat, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_use_hdr(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec GradientTexture2D.set_width(width :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit._get_connection_line(from_position :: Vector2, to_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphEdit._is_in_input_hotzone(in_node :: Object, in_port :: int, mouse_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphEdit._is_in_output_hotzone(in_node :: Object, in_port :: int, mouse_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphEdit._is_node_hover_valid(from_node :: StringName, from_port :: int, to_node :: StringName, to_port :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.add_valid_connection_type(from_type :: int, to_type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.add_valid_left_disconnect_type(type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.add_valid_right_disconnect_type(type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.arrange_nodes() :: {:ok :: label, state :: State, }
spec GraphEdit.clear_connections() :: {:ok :: label, state :: State, }
spec GraphEdit.connect_node(from_node :: StringName, from_port :: int, to_node :: StringName, to_port :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.disconnect_node(from_node :: StringName, from_port :: int, to_node :: StringName, to_port :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.force_connection_drag_end() :: {:ok :: label, state :: State, }
spec GraphEdit.get_connection_line(from_node :: Vector2, to_node :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphEdit.get_connection_lines_curvature() :: {:ok :: label, state :: State, }
spec GraphEdit.get_connection_lines_thickness() :: {:ok :: label, state :: State, }
spec GraphEdit.get_connection_list() :: {:ok :: label, state :: State, }
spec GraphEdit.get_minimap_opacity() :: {:ok :: label, state :: State, }
spec GraphEdit.get_minimap_size() :: {:ok :: label, state :: State, }
spec GraphEdit.get_panning_scheme() :: {:ok :: label, state :: State, }
spec GraphEdit.get_scroll_ofs() :: {:ok :: label, state :: State, }
spec GraphEdit.get_snap() :: {:ok :: label, state :: State, }
spec GraphEdit.get_zoom() :: {:ok :: label, state :: State, }
spec GraphEdit.get_zoom_hbox() :: {:ok :: label, state :: State, }
spec GraphEdit.get_zoom_max() :: {:ok :: label, state :: State, }
spec GraphEdit.get_zoom_min() :: {:ok :: label, state :: State, }
spec GraphEdit.get_zoom_step() :: {:ok :: label, state :: State, }
spec GraphEdit.is_arrange_nodes_button_hidden() :: {:ok :: label, state :: State, }
spec GraphEdit.is_connection_lines_antialiased() :: {:ok :: label, state :: State, }
spec GraphEdit.is_minimap_enabled() :: {:ok :: label, state :: State, }
spec GraphEdit.is_node_connected(from_node :: StringName, from_port :: int, to_node :: StringName, to_port :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.is_right_disconnects_enabled() :: {:ok :: label, state :: State, }
spec GraphEdit.is_showing_zoom_label() :: {:ok :: label, state :: State, }
spec GraphEdit.is_using_snap() :: {:ok :: label, state :: State, }
spec GraphEdit.is_valid_connection_type(from_type :: int, to_type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.remove_valid_connection_type(from_type :: int, to_type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.remove_valid_left_disconnect_type(type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.remove_valid_right_disconnect_type(type :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_arrange_nodes_button_hidden(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_connection_activity(from_node :: StringName, from_port :: int, to_node :: StringName, to_port :: int, amount :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_connection_lines_antialiased(pixels :: bool, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_connection_lines_curvature(curvature :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_connection_lines_thickness(pixels :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_minimap_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_minimap_opacity(opacity :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_minimap_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_panning_scheme(scheme :: enum::GraphEdit.PanningScheme, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_right_disconnects(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_scroll_ofs(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_selected(node :: Node, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_show_zoom_label(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_snap(pixels :: int, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_use_snap(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_zoom(zoom :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_zoom_max(zoom_max :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_zoom_min(zoom_min :: float, ) :: {:ok :: label, state :: State, }
spec GraphEdit.set_zoom_step(zoom_step :: float, ) :: {:ok :: label, state :: State, }
spec GraphNode.clear_all_slots() :: {:ok :: label, state :: State, }
spec GraphNode.clear_slot(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_input_color(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_input_count() :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_input_height(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_input_position(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_input_slot(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_input_type(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_output_color(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_output_count() :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_output_height(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_output_position(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_output_slot(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_connection_output_type(port :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_language() :: {:ok :: label, state :: State, }
spec GraphNode.get_overlay() :: {:ok :: label, state :: State, }
spec GraphNode.get_position_offset() :: {:ok :: label, state :: State, }
spec GraphNode.get_slot_color_left(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_slot_color_right(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_slot_type_left(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_slot_type_right(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.get_text_direction() :: {:ok :: label, state :: State, }
spec GraphNode.get_title() :: {:ok :: label, state :: State, }
spec GraphNode.is_close_button_visible() :: {:ok :: label, state :: State, }
spec GraphNode.is_comment() :: {:ok :: label, state :: State, }
spec GraphNode.is_draggable() :: {:ok :: label, state :: State, }
spec GraphNode.is_resizable() :: {:ok :: label, state :: State, }
spec GraphNode.is_selectable() :: {:ok :: label, state :: State, }
spec GraphNode.is_selected() :: {:ok :: label, state :: State, }
spec GraphNode.is_slot_draw_stylebox(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.is_slot_enabled_left(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.is_slot_enabled_right(slot_index :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_comment(comment :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_draggable(draggable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_overlay(overlay :: enum::GraphNode.Overlay, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_position_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_resizable(resizable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_selectable(selectable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_selected(selected :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_show_close_button(show :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot(slot_index :: int, enable_left_port :: bool, type_left :: int, color_left :: Color, enable_right_port :: bool, type_right :: int, color_right :: Color, custom_icon_left :: Texture2D, custom_icon_right :: Texture2D, draw_stylebox :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_color_left(slot_index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_color_right(slot_index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_draw_stylebox(slot_index :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_enabled_left(slot_index :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_enabled_right(slot_index :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_type_left(slot_index :: int, type :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_slot_type_right(slot_index :: int, type :: int, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec GraphNode.set_title(title :: String, ) :: {:ok :: label, state :: State, }
spec GridContainer.get_columns() :: {:ok :: label, state :: State, }
spec GridContainer.set_columns(columns :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.clear() :: {:ok :: label, state :: State, }
spec GridMap.clear_baked_meshes() :: {:ok :: label, state :: State, }
spec GridMap.get_bake_mesh_instance(idx :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.get_bake_meshes() :: {:ok :: label, state :: State, }
spec GridMap.get_basis_with_orthogonal_index(index :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.get_cell_item(position :: Vector3i, ) :: {:ok :: label, state :: State, }
spec GridMap.get_cell_item_basis(position :: Vector3i, ) :: {:ok :: label, state :: State, }
spec GridMap.get_cell_item_orientation(position :: Vector3i, ) :: {:ok :: label, state :: State, }
spec GridMap.get_cell_scale() :: {:ok :: label, state :: State, }
spec GridMap.get_cell_size() :: {:ok :: label, state :: State, }
spec GridMap.get_center_x() :: {:ok :: label, state :: State, }
spec GridMap.get_center_y() :: {:ok :: label, state :: State, }
spec GridMap.get_center_z() :: {:ok :: label, state :: State, }
spec GridMap.get_collision_layer() :: {:ok :: label, state :: State, }
spec GridMap.get_collision_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.get_collision_mask() :: {:ok :: label, state :: State, }
spec GridMap.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.get_collision_priority() :: {:ok :: label, state :: State, }
spec GridMap.get_mesh_library() :: {:ok :: label, state :: State, }
spec GridMap.get_meshes() :: {:ok :: label, state :: State, }
spec GridMap.get_navigation_map() :: {:ok :: label, state :: State, }
spec GridMap.get_octant_size() :: {:ok :: label, state :: State, }
spec GridMap.get_orthogonal_index_from_basis(basis :: Basis, ) :: {:ok :: label, state :: State, }
spec GridMap.get_physics_material() :: {:ok :: label, state :: State, }
spec GridMap.get_used_cells() :: {:ok :: label, state :: State, }
spec GridMap.get_used_cells_by_item(item :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.is_baking_navigation() :: {:ok :: label, state :: State, }
spec GridMap.local_to_map(local_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec GridMap.make_baked_meshes(gen_lightmap_uv :: bool, lightmap_uv_texel_size :: float, ) :: {:ok :: label, state :: State, }
spec GridMap.map_to_local(map_position :: Vector3i, ) :: {:ok :: label, state :: State, }
spec GridMap.resource_changed(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec GridMap.set_bake_navigation(bake_navigation :: bool, ) :: {:ok :: label, state :: State, }
spec GridMap.set_cell_item(position :: Vector3i, item :: int, orientation :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.set_cell_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec GridMap.set_cell_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec GridMap.set_center_x(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GridMap.set_center_y(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GridMap.set_center_z(enable :: bool, ) :: {:ok :: label, state :: State, }
spec GridMap.set_collision_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.set_collision_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec GridMap.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec GridMap.set_collision_priority(priority :: float, ) :: {:ok :: label, state :: State, }
spec GridMap.set_mesh_library(mesh_library :: MeshLibrary, ) :: {:ok :: label, state :: State, }
spec GridMap.set_navigation_map(navigation_map :: RID, ) :: {:ok :: label, state :: State, }
spec GridMap.set_octant_size(size :: int, ) :: {:ok :: label, state :: State, }
spec GridMap.set_physics_material(material :: PhysicsMaterial, ) :: {:ok :: label, state :: State, }
spec GrooveJoint2D.get_initial_offset() :: {:ok :: label, state :: State, }
spec GrooveJoint2D.get_length() :: {:ok :: label, state :: State, }
spec GrooveJoint2D.set_initial_offset(offset :: float, ) :: {:ok :: label, state :: State, }
spec GrooveJoint2D.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec HMACContext.finish() :: {:ok :: label, state :: State, }
spec HMACContext.start(hash_type :: enum::HashingContext.HashType, key :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec HMACContext.update(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec HTTPClient.close() :: {:ok :: label, state :: State, }
spec HTTPClient.connect_to_host(host :: String, port :: int, tls_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec HTTPClient.get_connection() :: {:ok :: label, state :: State, }
spec HTTPClient.get_read_chunk_size() :: {:ok :: label, state :: State, }
spec HTTPClient.get_response_body_length() :: {:ok :: label, state :: State, }
spec HTTPClient.get_response_code() :: {:ok :: label, state :: State, }
spec HTTPClient.get_response_headers() :: {:ok :: label, state :: State, }
spec HTTPClient.get_response_headers_as_dictionary() :: {:ok :: label, state :: State, }
spec HTTPClient.get_status() :: {:ok :: label, state :: State, }
spec HTTPClient.has_response() :: {:ok :: label, state :: State, }
spec HTTPClient.is_blocking_mode_enabled() :: {:ok :: label, state :: State, }
spec HTTPClient.is_response_chunked() :: {:ok :: label, state :: State, }
spec HTTPClient.poll() :: {:ok :: label, state :: State, }
spec HTTPClient.query_string_from_dict(fields :: Dictionary, ) :: {:ok :: label, state :: State, }
spec HTTPClient.read_response_body_chunk() :: {:ok :: label, state :: State, }
spec HTTPClient.request(method :: enum::HTTPClient.Method, url :: String, headers :: PackedStringArray, body :: String, ) :: {:ok :: label, state :: State, }
spec HTTPClient.request_raw(method :: enum::HTTPClient.Method, url :: String, headers :: PackedStringArray, body :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec HTTPClient.set_blocking_mode(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec HTTPClient.set_connection(connection :: StreamPeer, ) :: {:ok :: label, state :: State, }
spec HTTPClient.set_http_proxy(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec HTTPClient.set_https_proxy(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec HTTPClient.set_read_chunk_size(bytes :: int, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.cancel_request() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_body_size() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_body_size_limit() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_download_chunk_size() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_download_file() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_downloaded_bytes() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_http_client_status() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_max_redirects() :: {:ok :: label, state :: State, }
spec HTTPRequest.get_timeout() :: {:ok :: label, state :: State, }
spec HTTPRequest.is_accepting_gzip() :: {:ok :: label, state :: State, }
spec HTTPRequest.is_using_threads() :: {:ok :: label, state :: State, }
spec HTTPRequest.request(url :: String, custom_headers :: PackedStringArray, method :: enum::HTTPClient.Method, request_data :: String, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.request_raw(url :: String, custom_headers :: PackedStringArray, method :: enum::HTTPClient.Method, request_data_raw :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_accept_gzip(enable :: bool, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_body_size_limit(bytes :: int, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_download_chunk_size(chunk_size :: int, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_download_file(path :: String, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_http_proxy(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_https_proxy(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_max_redirects(amount :: int, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_timeout(timeout :: float, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_tls_options(client_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec HTTPRequest.set_use_threads(enable :: bool, ) :: {:ok :: label, state :: State, }
spec HashingContext.finish() :: {:ok :: label, state :: State, }
spec HashingContext.start(type :: enum::HashingContext.HashType, ) :: {:ok :: label, state :: State, }
spec HashingContext.update(chunk :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec HeightMapShape3D.get_map_data() :: {:ok :: label, state :: State, }
spec HeightMapShape3D.get_map_depth() :: {:ok :: label, state :: State, }
spec HeightMapShape3D.get_map_width() :: {:ok :: label, state :: State, }
spec HeightMapShape3D.set_map_data(data :: PackedFloat64Array, ) :: {:ok :: label, state :: State, }
spec HeightMapShape3D.set_map_depth(height :: int, ) :: {:ok :: label, state :: State, }
spec HeightMapShape3D.set_map_width(width :: int, ) :: {:ok :: label, state :: State, }
spec HingeJoint3D.get_flag(flag :: enum::HingeJoint3D.Flag, ) :: {:ok :: label, state :: State, }
spec HingeJoint3D.get_param(param :: enum::HingeJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec HingeJoint3D.set_flag(flag :: enum::HingeJoint3D.Flag, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec HingeJoint3D.set_param(param :: enum::HingeJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec IKBone3D.get_constraint() :: {:ok :: label, state :: State, }
spec IKBone3D.get_constraint_orientation_transform() :: {:ok :: label, state :: State, }
spec IKBone3D.get_constraint_twist_transform() :: {:ok :: label, state :: State, }
spec IKBone3D.get_pin() :: {:ok :: label, state :: State, }
spec IKBone3D.is_pinned() :: {:ok :: label, state :: State, }
spec IKBone3D.set_pin(pin :: IKEffector3D, ) :: {:ok :: label, state :: State, }
spec IKBoneSegment3D.get_ik_bone(bone :: int, ) :: {:ok :: label, state :: State, }
spec IKBoneSegment3D.is_pinned() :: {:ok :: label, state :: State, }
spec IKEffector3D.get_passthrough_factor() :: {:ok :: label, state :: State, }
spec IKEffector3D.get_target_node() :: {:ok :: label, state :: State, }
spec IKEffector3D.set_passthrough_factor(amount :: float, ) :: {:ok :: label, state :: State, }
spec IKEffector3D.set_target_node(skeleton :: Skeleton3D, node :: NodePath, ) :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.get_direction_priorities() :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.get_passthrough_factor() :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.get_target_node() :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.get_weight() :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.set_direction_priorities(direction_priorities :: Vector3, ) :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.set_passthrough_factor(passthrough_factor :: float, ) :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.set_target_node(target_node :: NodePath, ) :: {:ok :: label, state :: State, }
spec IKEffectorTemplate3D.set_weight(weight :: float, ) :: {:ok :: label, state :: State, }
spec IKKusudama3D.get_limit_cones() :: {:ok :: label, state :: State, }
spec IKKusudama3D.set_limit_cones(limit_cones :: typedarray::IKLimitCone3D, ) :: {:ok :: label, state :: State, }
spec IKNode3D.get_global_transform() :: {:ok :: label, state :: State, }
spec IKNode3D.get_transform() :: {:ok :: label, state :: State, }
spec IKRay3D.get_heading() :: {:ok :: label, state :: State, }
spec IKRay3D.get_intersects_plane(a :: Vector3, b :: Vector3, c :: Vector3, ) :: {:ok :: label, state :: State, }
spec IKRay3D.get_scaled_projection(input :: Vector3, ) :: {:ok :: label, state :: State, }
spec IP.clear_cache(hostname :: String, ) :: {:ok :: label, state :: State, }
spec IP.erase_resolve_item(id :: int, ) :: {:ok :: label, state :: State, }
spec IP.get_local_addresses() :: {:ok :: label, state :: State, }
spec IP.get_local_interfaces() :: {:ok :: label, state :: State, }
spec IP.get_resolve_item_address(id :: int, ) :: {:ok :: label, state :: State, }
spec IP.get_resolve_item_addresses(id :: int, ) :: {:ok :: label, state :: State, }
spec IP.get_resolve_item_status(id :: int, ) :: {:ok :: label, state :: State, }
spec IP.resolve_hostname(host :: String, ip_type :: enum::IP.Type, ) :: {:ok :: label, state :: State, }
spec IP.resolve_hostname_addresses(host :: String, ip_type :: enum::IP.Type, ) :: {:ok :: label, state :: State, }
spec IP.resolve_hostname_queue_item(host :: String, ip_type :: enum::IP.Type, ) :: {:ok :: label, state :: State, }
spec Image.adjust_bcs(brightness :: float, contrast :: float, saturation :: float, ) :: {:ok :: label, state :: State, }
spec Image.blend_rect(src :: Image, src_rect :: Rect2i, dst :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Image.blend_rect_mask(src :: Image, mask :: Image, src_rect :: Rect2i, dst :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Image.blit_rect(src :: Image, src_rect :: Rect2i, dst :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Image.blit_rect_mask(src :: Image, mask :: Image, src_rect :: Rect2i, dst :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Image.bump_map_to_normal_map(bump_scale :: float, ) :: {:ok :: label, state :: State, }
spec Image.clear_mipmaps() :: {:ok :: label, state :: State, }
spec Image.compress(mode :: enum::Image.CompressMode, source :: enum::Image.CompressSource, astc_format :: enum::Image.ASTCFormat, ) :: {:ok :: label, state :: State, }
spec Image.compress_from_channels(mode :: enum::Image.CompressMode, channels :: enum::Image.UsedChannels, astc_format :: enum::Image.ASTCFormat, ) :: {:ok :: label, state :: State, }
spec Image.compute_image_metrics(compared_image :: Image, use_luma :: bool, ) :: {:ok :: label, state :: State, }
spec Image.convert(format :: enum::Image.Format, ) :: {:ok :: label, state :: State, }
spec Image.copy_from(src :: Image, ) :: {:ok :: label, state :: State, }
spec Image.create(width :: int, height :: int, use_mipmaps :: bool, format :: enum::Image.Format, ) :: {:ok :: label, state :: State, }
spec Image.create_from_data(width :: int, height :: int, use_mipmaps :: bool, format :: enum::Image.Format, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.crop(width :: int, height :: int, ) :: {:ok :: label, state :: State, }
spec Image.decompress() :: {:ok :: label, state :: State, }
spec Image.detect_alpha() :: {:ok :: label, state :: State, }
spec Image.detect_used_channels(source :: enum::Image.CompressSource, ) :: {:ok :: label, state :: State, }
spec Image.fill(color :: Color, ) :: {:ok :: label, state :: State, }
spec Image.fill_rect(rect :: Rect2i, color :: Color, ) :: {:ok :: label, state :: State, }
spec Image.fix_alpha_edges() :: {:ok :: label, state :: State, }
spec Image.flip_x() :: {:ok :: label, state :: State, }
spec Image.flip_y() :: {:ok :: label, state :: State, }
spec Image.generate_mipmaps(renormalize :: bool, ) :: {:ok :: label, state :: State, }
spec Image.get_data() :: {:ok :: label, state :: State, }
spec Image.get_format() :: {:ok :: label, state :: State, }
spec Image.get_height() :: {:ok :: label, state :: State, }
spec Image.get_mipmap_offset(mipmap :: int, ) :: {:ok :: label, state :: State, }
spec Image.get_pixel(x :: int, y :: int, ) :: {:ok :: label, state :: State, }
spec Image.get_pixelv(point :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Image.get_region(region :: Rect2i, ) :: {:ok :: label, state :: State, }
spec Image.get_size() :: {:ok :: label, state :: State, }
spec Image.get_used_rect() :: {:ok :: label, state :: State, }
spec Image.get_width() :: {:ok :: label, state :: State, }
spec Image.has_mipmaps() :: {:ok :: label, state :: State, }
spec Image.is_compressed() :: {:ok :: label, state :: State, }
spec Image.is_empty() :: {:ok :: label, state :: State, }
spec Image.is_invisible() :: {:ok :: label, state :: State, }
spec Image.load(path :: String, ) :: {:ok :: label, state :: State, }
spec Image.load_bmp_from_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.load_from_file(path :: String, ) :: {:ok :: label, state :: State, }
spec Image.load_jpg_from_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.load_png_from_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.load_tga_from_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.load_webp_from_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.normal_map_to_xy() :: {:ok :: label, state :: State, }
spec Image.premultiply_alpha() :: {:ok :: label, state :: State, }
spec Image.resize(width :: int, height :: int, interpolation :: enum::Image.Interpolation, ) :: {:ok :: label, state :: State, }
spec Image.resize_to_po2(square :: bool, interpolation :: enum::Image.Interpolation, ) :: {:ok :: label, state :: State, }
spec Image.rgbe_to_srgb() :: {:ok :: label, state :: State, }
spec Image.rotate_180() :: {:ok :: label, state :: State, }
spec Image.rotate_90(direction :: enum::ClockDirection, ) :: {:ok :: label, state :: State, }
spec Image.save_exr(path :: String, grayscale :: bool, ) :: {:ok :: label, state :: State, }
spec Image.save_exr_to_buffer(grayscale :: bool, ) :: {:ok :: label, state :: State, }
spec Image.save_jpg(path :: String, quality :: float, ) :: {:ok :: label, state :: State, }
spec Image.save_jpg_to_buffer(quality :: float, ) :: {:ok :: label, state :: State, }
spec Image.save_png(path :: String, ) :: {:ok :: label, state :: State, }
spec Image.save_png_to_buffer() :: {:ok :: label, state :: State, }
spec Image.save_webp(path :: String, lossy :: bool, quality :: float, ) :: {:ok :: label, state :: State, }
spec Image.save_webp_to_buffer(lossy :: bool, quality :: float, ) :: {:ok :: label, state :: State, }
spec Image.set_data(width :: int, height :: int, use_mipmaps :: bool, format :: enum::Image.Format, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Image.set_pixel(x :: int, y :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec Image.set_pixelv(point :: Vector2i, color :: Color, ) :: {:ok :: label, state :: State, }
spec Image.shrink_x2() :: {:ok :: label, state :: State, }
spec Image.srgb_to_linear() :: {:ok :: label, state :: State, }
spec ImageFormatLoaderExtension._get_recognized_extensions() :: {:ok :: label, state :: State, }
spec ImageFormatLoaderExtension._load_image(image :: Image, fileaccess :: FileAccess, flags :: bitfield::ImageFormatLoader.LoaderFlags, scale :: float, ) :: {:ok :: label, state :: State, }
spec ImageFormatLoaderExtension.add_format_loader() :: {:ok :: label, state :: State, }
spec ImageFormatLoaderExtension.remove_format_loader() :: {:ok :: label, state :: State, }
spec ImageTexture.create_from_image(image :: Image, ) :: {:ok :: label, state :: State, }
spec ImageTexture.get_format() :: {:ok :: label, state :: State, }
spec ImageTexture.set_image(image :: Image, ) :: {:ok :: label, state :: State, }
spec ImageTexture.set_size_override(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec ImageTexture.update(image :: Image, ) :: {:ok :: label, state :: State, }
spec ImageTexture3D.create(format :: enum::Image.Format, width :: int, height :: int, depth :: int, use_mipmaps :: bool, data :: typedarray::Image, ) :: {:ok :: label, state :: State, }
spec ImageTexture3D.update(data :: typedarray::Image, ) :: {:ok :: label, state :: State, }
spec ImageTextureLayered.create_from_images(images :: typedarray::Image, ) :: {:ok :: label, state :: State, }
spec ImageTextureLayered.update_layer(image :: Image, layer :: int, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.clear_surfaces() :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_add_vertex(vertex :: Vector3, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_add_vertex_2d(vertex :: Vector2, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_begin(primitive :: enum::Mesh.PrimitiveType, material :: Material, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_end() :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_set_normal(normal :: Vector3, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_set_tangent(tangent :: Plane, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_set_uv(uv :: Vector2, ) :: {:ok :: label, state :: State, }
spec ImmediateMesh.surface_set_uv2(uv2 :: Vector2, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.add_blend_shape(name :: String, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.add_surface(primitive :: enum::Mesh.PrimitiveType, arrays :: Array, blend_shapes :: typedarray::Array, lods :: Dictionary, material :: Material, name :: String, flags :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.clear() :: {:ok :: label, state :: State, }
spec ImporterMesh.generate_lods(normal_merge_angle :: float, normal_split_angle :: float, bone_transform_array :: Array, minimum_index_count :: int, maximum_mesh_error :: float, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_blend_shape_count() :: {:ok :: label, state :: State, }
spec ImporterMesh.get_blend_shape_mode() :: {:ok :: label, state :: State, }
spec ImporterMesh.get_blend_shape_name(blend_shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_lightmap_size_hint() :: {:ok :: label, state :: State, }
spec ImporterMesh.get_mesh(base_mesh :: ArrayMesh, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_arrays(surface_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_blend_shape_arrays(surface_idx :: int, blend_shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_count() :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_format(surface_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_lod_count(surface_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_lod_indices(surface_idx :: int, lod_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_lod_size(surface_idx :: int, lod_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_material(surface_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_name(surface_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.get_surface_primitive_type(surface_idx :: int, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.set_blend_shape_mode(mode :: enum::Mesh.BlendShapeMode, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.set_lightmap_size_hint(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.set_surface_material(surface_idx :: int, material :: Material, ) :: {:ok :: label, state :: State, }
spec ImporterMesh.set_surface_name(surface_idx :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec ImporterMeshInstance3D.get_mesh() :: {:ok :: label, state :: State, }
spec ImporterMeshInstance3D.get_skeleton_path() :: {:ok :: label, state :: State, }
spec ImporterMeshInstance3D.get_skin() :: {:ok :: label, state :: State, }
spec ImporterMeshInstance3D.set_mesh(mesh :: ImporterMesh, ) :: {:ok :: label, state :: State, }
spec ImporterMeshInstance3D.set_skeleton_path(skeleton_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec ImporterMeshInstance3D.set_skin(skin :: Skin, ) :: {:ok :: label, state :: State, }
spec Input.action_press(action :: StringName, strength :: float, ) :: {:ok :: label, state :: State, }
spec Input.action_release(action :: StringName, ) :: {:ok :: label, state :: State, }
spec Input.add_joy_mapping(mapping :: String, update_existing :: bool, ) :: {:ok :: label, state :: State, }
spec Input.flush_buffered_events() :: {:ok :: label, state :: State, }
spec Input.get_accelerometer() :: {:ok :: label, state :: State, }
spec Input.get_action_raw_strength(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec Input.get_action_strength(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec Input.get_axis(negative_action :: StringName, positive_action :: StringName, ) :: {:ok :: label, state :: State, }
spec Input.get_connected_joypads() :: {:ok :: label, state :: State, }
spec Input.get_current_cursor_shape() :: {:ok :: label, state :: State, }
spec Input.get_gravity() :: {:ok :: label, state :: State, }
spec Input.get_gyroscope() :: {:ok :: label, state :: State, }
spec Input.get_joy_axis(device :: int, axis :: enum::JoyAxis, ) :: {:ok :: label, state :: State, }
spec Input.get_joy_guid(device :: int, ) :: {:ok :: label, state :: State, }
spec Input.get_joy_name(device :: int, ) :: {:ok :: label, state :: State, }
spec Input.get_joy_vibration_duration(device :: int, ) :: {:ok :: label, state :: State, }
spec Input.get_joy_vibration_strength(device :: int, ) :: {:ok :: label, state :: State, }
spec Input.get_last_mouse_velocity() :: {:ok :: label, state :: State, }
spec Input.get_magnetometer() :: {:ok :: label, state :: State, }
spec Input.get_mouse_button_mask() :: {:ok :: label, state :: State, }
spec Input.get_mouse_mode() :: {:ok :: label, state :: State, }
spec Input.get_vector(negative_x :: StringName, positive_x :: StringName, negative_y :: StringName, positive_y :: StringName, deadzone :: float, ) :: {:ok :: label, state :: State, }
spec Input.is_action_just_pressed(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec Input.is_action_just_released(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec Input.is_action_pressed(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec Input.is_anything_pressed() :: {:ok :: label, state :: State, }
spec Input.is_joy_button_pressed(device :: int, button :: enum::JoyButton, ) :: {:ok :: label, state :: State, }
spec Input.is_joy_known(device :: int, ) :: {:ok :: label, state :: State, }
spec Input.is_key_label_pressed(keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec Input.is_key_pressed(keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec Input.is_mouse_button_pressed(button :: enum::MouseButton, ) :: {:ok :: label, state :: State, }
spec Input.is_physical_key_pressed(keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec Input.is_using_accumulated_input() :: {:ok :: label, state :: State, }
spec Input.parse_input_event(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Input.remove_joy_mapping(guid :: String, ) :: {:ok :: label, state :: State, }
spec Input.set_accelerometer(value :: Vector3, ) :: {:ok :: label, state :: State, }
spec Input.set_custom_mouse_cursor(image :: Resource, shape :: enum::Input.CursorShape, hotspot :: Vector2, ) :: {:ok :: label, state :: State, }
spec Input.set_default_cursor_shape(shape :: enum::Input.CursorShape, ) :: {:ok :: label, state :: State, }
spec Input.set_gravity(value :: Vector3, ) :: {:ok :: label, state :: State, }
spec Input.set_gyroscope(value :: Vector3, ) :: {:ok :: label, state :: State, }
spec Input.set_magnetometer(value :: Vector3, ) :: {:ok :: label, state :: State, }
spec Input.set_mouse_mode(mode :: enum::Input.MouseMode, ) :: {:ok :: label, state :: State, }
spec Input.set_use_accumulated_input(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Input.start_joy_vibration(device :: int, weak_magnitude :: float, strong_magnitude :: float, duration :: float, ) :: {:ok :: label, state :: State, }
spec Input.stop_joy_vibration(device :: int, ) :: {:ok :: label, state :: State, }
spec Input.vibrate_handheld(duration_ms :: int, ) :: {:ok :: label, state :: State, }
spec Input.warp_mouse(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEvent.accumulate(with_event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec InputEvent.as_text() :: {:ok :: label, state :: State, }
spec InputEvent.get_action_strength(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec InputEvent.get_device() :: {:ok :: label, state :: State, }
spec InputEvent.is_action(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec InputEvent.is_action_pressed(action :: StringName, allow_echo :: bool, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec InputEvent.is_action_released(action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec InputEvent.is_action_type() :: {:ok :: label, state :: State, }
spec InputEvent.is_echo() :: {:ok :: label, state :: State, }
spec InputEvent.is_match(event :: InputEvent, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec InputEvent.is_pressed() :: {:ok :: label, state :: State, }
spec InputEvent.set_device(device :: int, ) :: {:ok :: label, state :: State, }
spec InputEvent.xformed_by(xform :: Transform2D, local_ofs :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventAction.get_action() :: {:ok :: label, state :: State, }
spec InputEventAction.get_strength() :: {:ok :: label, state :: State, }
spec InputEventAction.set_action(action :: StringName, ) :: {:ok :: label, state :: State, }
spec InputEventAction.set_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventAction.set_strength(strength :: float, ) :: {:ok :: label, state :: State, }
spec InputEventFromWindow.get_window_id() :: {:ok :: label, state :: State, }
spec InputEventFromWindow.set_window_id(id :: int, ) :: {:ok :: label, state :: State, }
spec InputEventGesture.get_position() :: {:ok :: label, state :: State, }
spec InputEventGesture.set_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventJoypadButton.get_button_index() :: {:ok :: label, state :: State, }
spec InputEventJoypadButton.get_pressure() :: {:ok :: label, state :: State, }
spec InputEventJoypadButton.set_button_index(button_index :: enum::JoyButton, ) :: {:ok :: label, state :: State, }
spec InputEventJoypadButton.set_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventJoypadButton.set_pressure(pressure :: float, ) :: {:ok :: label, state :: State, }
spec InputEventJoypadMotion.get_axis() :: {:ok :: label, state :: State, }
spec InputEventJoypadMotion.get_axis_value() :: {:ok :: label, state :: State, }
spec InputEventJoypadMotion.set_axis(axis :: enum::JoyAxis, ) :: {:ok :: label, state :: State, }
spec InputEventJoypadMotion.set_axis_value(axis_value :: float, ) :: {:ok :: label, state :: State, }
spec InputEventKey.as_text_key_label() :: {:ok :: label, state :: State, }
spec InputEventKey.as_text_keycode() :: {:ok :: label, state :: State, }
spec InputEventKey.as_text_physical_keycode() :: {:ok :: label, state :: State, }
spec InputEventKey.get_key_label() :: {:ok :: label, state :: State, }
spec InputEventKey.get_key_label_with_modifiers() :: {:ok :: label, state :: State, }
spec InputEventKey.get_keycode() :: {:ok :: label, state :: State, }
spec InputEventKey.get_keycode_with_modifiers() :: {:ok :: label, state :: State, }
spec InputEventKey.get_physical_keycode() :: {:ok :: label, state :: State, }
spec InputEventKey.get_physical_keycode_with_modifiers() :: {:ok :: label, state :: State, }
spec InputEventKey.get_unicode() :: {:ok :: label, state :: State, }
spec InputEventKey.set_echo(echo :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventKey.set_key_label(key_label :: enum::Key, ) :: {:ok :: label, state :: State, }
spec InputEventKey.set_keycode(keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec InputEventKey.set_physical_keycode(physical_keycode :: enum::Key, ) :: {:ok :: label, state :: State, }
spec InputEventKey.set_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventKey.set_unicode(unicode :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_channel() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_controller_number() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_controller_value() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_instrument() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_message() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_pitch() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_pressure() :: {:ok :: label, state :: State, }
spec InputEventMIDI.get_velocity() :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_channel(channel :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_controller_number(controller_number :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_controller_value(controller_value :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_instrument(instrument :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_message(message :: enum::MIDIMessage, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_pitch(pitch :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_pressure(pressure :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMIDI.set_velocity(velocity :: int, ) :: {:ok :: label, state :: State, }
spec InputEventMagnifyGesture.get_factor() :: {:ok :: label, state :: State, }
spec InputEventMagnifyGesture.set_factor(factor :: float, ) :: {:ok :: label, state :: State, }
spec InputEventMouse.get_button_mask() :: {:ok :: label, state :: State, }
spec InputEventMouse.get_global_position() :: {:ok :: label, state :: State, }
spec InputEventMouse.get_position() :: {:ok :: label, state :: State, }
spec InputEventMouse.set_button_mask(button_mask :: bitfield::MouseButtonMask, ) :: {:ok :: label, state :: State, }
spec InputEventMouse.set_global_position(global_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventMouse.set_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventMouseButton.get_button_index() :: {:ok :: label, state :: State, }
spec InputEventMouseButton.get_factor() :: {:ok :: label, state :: State, }
spec InputEventMouseButton.is_double_click() :: {:ok :: label, state :: State, }
spec InputEventMouseButton.set_button_index(button_index :: enum::MouseButton, ) :: {:ok :: label, state :: State, }
spec InputEventMouseButton.set_double_click(double_click :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventMouseButton.set_factor(factor :: float, ) :: {:ok :: label, state :: State, }
spec InputEventMouseButton.set_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.get_pen_inverted() :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.get_pressure() :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.get_relative() :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.get_tilt() :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.get_velocity() :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.set_pen_inverted(pen_inverted :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.set_pressure(pressure :: float, ) :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.set_relative(relative :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.set_tilt(tilt :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventMouseMotion.set_velocity(velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventPanGesture.get_delta() :: {:ok :: label, state :: State, }
spec InputEventPanGesture.set_delta(delta :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_index() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_pen_inverted() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_position() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_pressure() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_relative() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_tilt() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.get_velocity() :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_index(index :: int, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_pen_inverted(pen_inverted :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_pressure(pressure :: float, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_relative(relative :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_tilt(tilt :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventScreenDrag.set_velocity(velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.get_index() :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.get_position() :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.is_double_tap() :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.set_double_tap(double_tap :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.set_index(index :: int, ) :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.set_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec InputEventScreenTouch.set_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventShortcut.get_shortcut() :: {:ok :: label, state :: State, }
spec InputEventShortcut.set_shortcut(shortcut :: Shortcut, ) :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.get_modifiers_mask() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.is_alt_pressed() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.is_command_or_control_autoremap() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.is_command_or_control_pressed() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.is_ctrl_pressed() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.is_meta_pressed() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.is_shift_pressed() :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.set_alt_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.set_command_or_control_autoremap(enable :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.set_ctrl_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.set_meta_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputEventWithModifiers.set_shift_pressed(pressed :: bool, ) :: {:ok :: label, state :: State, }
spec InputMap.action_add_event(action :: StringName, event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec InputMap.action_erase_event(action :: StringName, event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec InputMap.action_erase_events(action :: StringName, ) :: {:ok :: label, state :: State, }
spec InputMap.action_get_deadzone(action :: StringName, ) :: {:ok :: label, state :: State, }
spec InputMap.action_get_events(action :: StringName, ) :: {:ok :: label, state :: State, }
spec InputMap.action_has_event(action :: StringName, event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec InputMap.action_set_deadzone(action :: StringName, deadzone :: float, ) :: {:ok :: label, state :: State, }
spec InputMap.add_action(action :: StringName, deadzone :: float, ) :: {:ok :: label, state :: State, }
spec InputMap.erase_action(action :: StringName, ) :: {:ok :: label, state :: State, }
spec InputMap.event_is_action(event :: InputEvent, action :: StringName, exact_match :: bool, ) :: {:ok :: label, state :: State, }
spec InputMap.get_actions() :: {:ok :: label, state :: State, }
spec InputMap.has_action(action :: StringName, ) :: {:ok :: label, state :: State, }
spec InputMap.load_from_project_settings() :: {:ok :: label, state :: State, }
spec InstancePlaceholder.create_instance(replace :: bool, custom_scene :: PackedScene, ) :: {:ok :: label, state :: State, }
spec InstancePlaceholder.get_instance_path() :: {:ok :: label, state :: State, }
spec InstancePlaceholder.get_stored_values(with_order :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.add_icon_item(icon :: Texture2D, selectable :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.add_item(text :: String, icon :: Texture2D, selectable :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.clear() :: {:ok :: label, state :: State, }
spec ItemList.deselect(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.deselect_all() :: {:ok :: label, state :: State, }
spec ItemList.ensure_current_is_visible() :: {:ok :: label, state :: State, }
spec ItemList.get_allow_reselect() :: {:ok :: label, state :: State, }
spec ItemList.get_allow_rmb_select() :: {:ok :: label, state :: State, }
spec ItemList.get_fixed_column_width() :: {:ok :: label, state :: State, }
spec ItemList.get_fixed_icon_size() :: {:ok :: label, state :: State, }
spec ItemList.get_icon_mode() :: {:ok :: label, state :: State, }
spec ItemList.get_icon_scale() :: {:ok :: label, state :: State, }
spec ItemList.get_item_at_position(position :: Vector2, exact :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_count() :: {:ok :: label, state :: State, }
spec ItemList.get_item_custom_bg_color(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_custom_fg_color(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_icon(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_icon_modulate(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_icon_region(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_language(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_metadata(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_text(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_text_direction(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_item_tooltip(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.get_max_columns() :: {:ok :: label, state :: State, }
spec ItemList.get_max_text_lines() :: {:ok :: label, state :: State, }
spec ItemList.get_select_mode() :: {:ok :: label, state :: State, }
spec ItemList.get_selected_items() :: {:ok :: label, state :: State, }
spec ItemList.get_text_overrun_behavior() :: {:ok :: label, state :: State, }
spec ItemList.get_v_scroll_bar() :: {:ok :: label, state :: State, }
spec ItemList.has_auto_height() :: {:ok :: label, state :: State, }
spec ItemList.is_anything_selected() :: {:ok :: label, state :: State, }
spec ItemList.is_item_disabled(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.is_item_icon_transposed(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.is_item_selectable(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.is_item_tooltip_enabled(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.is_same_column_width() :: {:ok :: label, state :: State, }
spec ItemList.is_selected(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.move_item(from_idx :: int, to_idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.remove_item(idx :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.select(idx :: int, single :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_allow_reselect(allow :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_allow_rmb_select(allow :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_auto_height(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_fixed_column_width(width :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.set_fixed_icon_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec ItemList.set_icon_mode(mode :: enum::ItemList.IconMode, ) :: {:ok :: label, state :: State, }
spec ItemList.set_icon_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_count(count :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_custom_bg_color(idx :: int, custom_bg_color :: Color, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_custom_fg_color(idx :: int, custom_fg_color :: Color, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_disabled(idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_icon(idx :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_icon_modulate(idx :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_icon_region(idx :: int, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_icon_transposed(idx :: int, transposed :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_language(idx :: int, language :: String, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_metadata(idx :: int, metadata :: Variant, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_selectable(idx :: int, selectable :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_text(idx :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_text_direction(idx :: int, direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_tooltip(idx :: int, tooltip :: String, ) :: {:ok :: label, state :: State, }
spec ItemList.set_item_tooltip_enabled(idx :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_max_columns(amount :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.set_max_text_lines(lines :: int, ) :: {:ok :: label, state :: State, }
spec ItemList.set_same_column_width(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ItemList.set_select_mode(mode :: enum::ItemList.SelectMode, ) :: {:ok :: label, state :: State, }
spec ItemList.set_text_overrun_behavior(overrun_behavior :: enum::TextServer.OverrunBehavior, ) :: {:ok :: label, state :: State, }
spec ItemList.sort_items_by_text() :: {:ok :: label, state :: State, }
spec JSON.get_data() :: {:ok :: label, state :: State, }
spec JSON.get_error_line() :: {:ok :: label, state :: State, }
spec JSON.get_error_message() :: {:ok :: label, state :: State, }
spec JSON.get_parsed_text() :: {:ok :: label, state :: State, }
spec JSON.parse(json_text :: String, keep_text :: bool, ) :: {:ok :: label, state :: State, }
spec JSON.parse_string(json_string :: String, ) :: {:ok :: label, state :: State, }
spec JSON.set_data(data :: Variant, ) :: {:ok :: label, state :: State, }
spec JSON.stringify(data :: Variant, indent :: String, sort_keys :: bool, full_precision :: bool, ) :: {:ok :: label, state :: State, }
spec JSONRPC.make_notification(method :: String, params :: Variant, ) :: {:ok :: label, state :: State, }
spec JSONRPC.make_request(method :: String, params :: Variant, id :: Variant, ) :: {:ok :: label, state :: State, }
spec JSONRPC.make_response(result :: Variant, id :: Variant, ) :: {:ok :: label, state :: State, }
spec JSONRPC.make_response_error(code :: int, message :: String, id :: Variant, ) :: {:ok :: label, state :: State, }
spec JSONRPC.process_action(action :: Variant, recurse :: bool, ) :: {:ok :: label, state :: State, }
spec JSONRPC.process_string(action :: String, ) :: {:ok :: label, state :: State, }
spec JSONRPC.set_scope(scope :: String, target :: Object, ) :: {:ok :: label, state :: State, }
spec JavaClassWrapper.wrap(name :: String, ) :: {:ok :: label, state :: State, }
spec JavaScriptBridge.create_callback(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec JavaScriptBridge.create_object(object :: String, ) :: {:ok :: label, state :: State, }
spec JavaScriptBridge.download_buffer(buffer :: PackedByteArray, name :: String, mime :: String, ) :: {:ok :: label, state :: State, }
spec JavaScriptBridge.eval(code :: String, use_global_execution_context :: bool, ) :: {:ok :: label, state :: State, }
spec JavaScriptBridge.force_fs_sync() :: {:ok :: label, state :: State, }
spec JavaScriptBridge.get_interface(interface :: String, ) :: {:ok :: label, state :: State, }
spec JavaScriptBridge.pwa_needs_update() :: {:ok :: label, state :: State, }
spec JavaScriptBridge.pwa_update() :: {:ok :: label, state :: State, }
spec Joint2D.get_bias() :: {:ok :: label, state :: State, }
spec Joint2D.get_exclude_nodes_from_collision() :: {:ok :: label, state :: State, }
spec Joint2D.get_node_a() :: {:ok :: label, state :: State, }
spec Joint2D.get_node_b() :: {:ok :: label, state :: State, }
spec Joint2D.set_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec Joint2D.set_exclude_nodes_from_collision(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Joint2D.set_node_a(node :: NodePath, ) :: {:ok :: label, state :: State, }
spec Joint2D.set_node_b(node :: NodePath, ) :: {:ok :: label, state :: State, }
spec Joint3D.get_exclude_nodes_from_collision() :: {:ok :: label, state :: State, }
spec Joint3D.get_node_a() :: {:ok :: label, state :: State, }
spec Joint3D.get_node_b() :: {:ok :: label, state :: State, }
spec Joint3D.get_solver_priority() :: {:ok :: label, state :: State, }
spec Joint3D.set_exclude_nodes_from_collision(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Joint3D.set_node_a(node :: NodePath, ) :: {:ok :: label, state :: State, }
spec Joint3D.set_node_b(node :: NodePath, ) :: {:ok :: label, state :: State, }
spec Joint3D.set_solver_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_angle(up_direction :: Vector2, ) :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_collider() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_collider_id() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_collider_rid() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_collider_shape() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_collider_shape_index() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_collider_velocity() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_depth() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_local_shape() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_normal() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_position() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_remainder() :: {:ok :: label, state :: State, }
spec KinematicCollision2D.get_travel() :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_angle(collision_index :: int, up_direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collider(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collider_id(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collider_rid(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collider_shape(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collider_shape_index(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collider_velocity(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_collision_count() :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_depth() :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_local_shape(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_normal(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_position(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_remainder() :: {:ok :: label, state :: State, }
spec KinematicCollision3D.get_travel() :: {:ok :: label, state :: State, }
spec Label.get_autowrap_mode() :: {:ok :: label, state :: State, }
spec Label.get_horizontal_alignment() :: {:ok :: label, state :: State, }
spec Label.get_label_settings() :: {:ok :: label, state :: State, }
spec Label.get_language() :: {:ok :: label, state :: State, }
spec Label.get_line_count() :: {:ok :: label, state :: State, }
spec Label.get_line_height(line :: int, ) :: {:ok :: label, state :: State, }
spec Label.get_lines_skipped() :: {:ok :: label, state :: State, }
spec Label.get_max_lines_visible() :: {:ok :: label, state :: State, }
spec Label.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec Label.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec Label.get_text() :: {:ok :: label, state :: State, }
spec Label.get_text_direction() :: {:ok :: label, state :: State, }
spec Label.get_text_overrun_behavior() :: {:ok :: label, state :: State, }
spec Label.get_total_character_count() :: {:ok :: label, state :: State, }
spec Label.get_vertical_alignment() :: {:ok :: label, state :: State, }
spec Label.get_visible_characters() :: {:ok :: label, state :: State, }
spec Label.get_visible_characters_behavior() :: {:ok :: label, state :: State, }
spec Label.get_visible_line_count() :: {:ok :: label, state :: State, }
spec Label.get_visible_ratio() :: {:ok :: label, state :: State, }
spec Label.is_clipping_text() :: {:ok :: label, state :: State, }
spec Label.is_uppercase() :: {:ok :: label, state :: State, }
spec Label.set_autowrap_mode(autowrap_mode :: enum::TextServer.AutowrapMode, ) :: {:ok :: label, state :: State, }
spec Label.set_clip_text(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Label.set_horizontal_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec Label.set_label_settings(settings :: LabelSettings, ) :: {:ok :: label, state :: State, }
spec Label.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec Label.set_lines_skipped(lines_skipped :: int, ) :: {:ok :: label, state :: State, }
spec Label.set_max_lines_visible(lines_visible :: int, ) :: {:ok :: label, state :: State, }
spec Label.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec Label.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec Label.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec Label.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec Label.set_text_overrun_behavior(overrun_behavior :: enum::TextServer.OverrunBehavior, ) :: {:ok :: label, state :: State, }
spec Label.set_uppercase(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Label.set_vertical_alignment(alignment :: enum::VerticalAlignment, ) :: {:ok :: label, state :: State, }
spec Label.set_visible_characters(amount :: int, ) :: {:ok :: label, state :: State, }
spec Label.set_visible_characters_behavior(behavior :: enum::TextServer.VisibleCharactersBehavior, ) :: {:ok :: label, state :: State, }
spec Label.set_visible_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec Label3D.generate_triangle_mesh() :: {:ok :: label, state :: State, }
spec Label3D.get_alpha_antialiasing() :: {:ok :: label, state :: State, }
spec Label3D.get_alpha_antialiasing_edge() :: {:ok :: label, state :: State, }
spec Label3D.get_alpha_cut_mode() :: {:ok :: label, state :: State, }
spec Label3D.get_alpha_hash_scale() :: {:ok :: label, state :: State, }
spec Label3D.get_alpha_scissor_threshold() :: {:ok :: label, state :: State, }
spec Label3D.get_autowrap_mode() :: {:ok :: label, state :: State, }
spec Label3D.get_billboard_mode() :: {:ok :: label, state :: State, }
spec Label3D.get_draw_flag(flag :: enum::Label3D.DrawFlags, ) :: {:ok :: label, state :: State, }
spec Label3D.get_font() :: {:ok :: label, state :: State, }
spec Label3D.get_font_size() :: {:ok :: label, state :: State, }
spec Label3D.get_horizontal_alignment() :: {:ok :: label, state :: State, }
spec Label3D.get_language() :: {:ok :: label, state :: State, }
spec Label3D.get_line_spacing() :: {:ok :: label, state :: State, }
spec Label3D.get_modulate() :: {:ok :: label, state :: State, }
spec Label3D.get_offset() :: {:ok :: label, state :: State, }
spec Label3D.get_outline_modulate() :: {:ok :: label, state :: State, }
spec Label3D.get_outline_render_priority() :: {:ok :: label, state :: State, }
spec Label3D.get_outline_size() :: {:ok :: label, state :: State, }
spec Label3D.get_pixel_size() :: {:ok :: label, state :: State, }
spec Label3D.get_render_priority() :: {:ok :: label, state :: State, }
spec Label3D.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec Label3D.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec Label3D.get_text() :: {:ok :: label, state :: State, }
spec Label3D.get_text_direction() :: {:ok :: label, state :: State, }
spec Label3D.get_texture_filter() :: {:ok :: label, state :: State, }
spec Label3D.get_vertical_alignment() :: {:ok :: label, state :: State, }
spec Label3D.get_width() :: {:ok :: label, state :: State, }
spec Label3D.is_uppercase() :: {:ok :: label, state :: State, }
spec Label3D.set_alpha_antialiasing(alpha_aa :: enum::BaseMaterial3D.AlphaAntiAliasing, ) :: {:ok :: label, state :: State, }
spec Label3D.set_alpha_antialiasing_edge(edge :: float, ) :: {:ok :: label, state :: State, }
spec Label3D.set_alpha_cut_mode(mode :: enum::Label3D.AlphaCutMode, ) :: {:ok :: label, state :: State, }
spec Label3D.set_alpha_hash_scale(threshold :: float, ) :: {:ok :: label, state :: State, }
spec Label3D.set_alpha_scissor_threshold(threshold :: float, ) :: {:ok :: label, state :: State, }
spec Label3D.set_autowrap_mode(autowrap_mode :: enum::TextServer.AutowrapMode, ) :: {:ok :: label, state :: State, }
spec Label3D.set_billboard_mode(mode :: enum::BaseMaterial3D.BillboardMode, ) :: {:ok :: label, state :: State, }
spec Label3D.set_draw_flag(flag :: enum::Label3D.DrawFlags, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Label3D.set_font(font :: Font, ) :: {:ok :: label, state :: State, }
spec Label3D.set_font_size(size :: int, ) :: {:ok :: label, state :: State, }
spec Label3D.set_horizontal_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec Label3D.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec Label3D.set_line_spacing(line_spacing :: float, ) :: {:ok :: label, state :: State, }
spec Label3D.set_modulate(modulate :: Color, ) :: {:ok :: label, state :: State, }
spec Label3D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Label3D.set_outline_modulate(modulate :: Color, ) :: {:ok :: label, state :: State, }
spec Label3D.set_outline_render_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec Label3D.set_outline_size(outline_size :: int, ) :: {:ok :: label, state :: State, }
spec Label3D.set_pixel_size(pixel_size :: float, ) :: {:ok :: label, state :: State, }
spec Label3D.set_render_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec Label3D.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec Label3D.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec Label3D.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec Label3D.set_text_direction(direction :: enum::TextServer.Direction, ) :: {:ok :: label, state :: State, }
spec Label3D.set_texture_filter(mode :: enum::BaseMaterial3D.TextureFilter, ) :: {:ok :: label, state :: State, }
spec Label3D.set_uppercase(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Label3D.set_vertical_alignment(alignment :: enum::VerticalAlignment, ) :: {:ok :: label, state :: State, }
spec Label3D.set_width(width :: float, ) :: {:ok :: label, state :: State, }
spec LabelSettings.get_font() :: {:ok :: label, state :: State, }
spec LabelSettings.get_font_color() :: {:ok :: label, state :: State, }
spec LabelSettings.get_font_size() :: {:ok :: label, state :: State, }
spec LabelSettings.get_line_spacing() :: {:ok :: label, state :: State, }
spec LabelSettings.get_outline_color() :: {:ok :: label, state :: State, }
spec LabelSettings.get_outline_size() :: {:ok :: label, state :: State, }
spec LabelSettings.get_shadow_color() :: {:ok :: label, state :: State, }
spec LabelSettings.get_shadow_offset() :: {:ok :: label, state :: State, }
spec LabelSettings.get_shadow_size() :: {:ok :: label, state :: State, }
spec LabelSettings.set_font(font :: Font, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_font_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_font_size(size :: int, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_line_spacing(spacing :: float, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_outline_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_outline_size(size :: int, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_shadow_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_shadow_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec LabelSettings.set_shadow_size(size :: int, ) :: {:ok :: label, state :: State, }
spec LassoDB.add_point(point :: LassoPoint, ) :: {:ok :: label, state :: State, }
spec LassoDB.calc_top_redirecting_power(snapped_point :: Node, viewpoint :: Transform3D, redirection_direction :: Vector2, ) :: {:ok :: label, state :: State, }
spec LassoDB.calc_top_two_snapping_power(source :: Transform3D, snap_max_power_increase :: Node, snap_increase_amount :: float, snap_lock :: float, _unnamed_arg4 :: bool, ) :: {:ok :: label, state :: State, }
spec LassoDB.remove_point(point :: LassoPoint, ) :: {:ok :: label, state :: State, }
spec LassoPoint.enable_snapping(on :: bool, ) :: {:ok :: label, state :: State, }
spec LassoPoint.get_origin() :: {:ok :: label, state :: State, }
spec LassoPoint.get_size() :: {:ok :: label, state :: State, }
spec LassoPoint.get_snap_locked() :: {:ok :: label, state :: State, }
spec LassoPoint.get_snap_score() :: {:ok :: label, state :: State, }
spec LassoPoint.get_snapping_enabled() :: {:ok :: label, state :: State, }
spec LassoPoint.get_snapping_power() :: {:ok :: label, state :: State, }
spec LassoPoint.register_point(p_database :: LassoDB, p_origin :: Node, ) :: {:ok :: label, state :: State, }
spec LassoPoint.set_size(p_size :: float, ) :: {:ok :: label, state :: State, }
spec LassoPoint.set_snap_locked(p_enable :: bool, ) :: {:ok :: label, state :: State, }
spec LassoPoint.set_snapping_power(p_snapping_power :: float, ) :: {:ok :: label, state :: State, }
spec LassoPoint.unregister_point() :: {:ok :: label, state :: State, }
spec Libsql.close() :: {:ok :: label, state :: State, }
spec Libsql.create_query(statement :: String, ) :: {:ok :: label, state :: State, }
spec Libsql.get_last_error_message() :: {:ok :: label, state :: State, }
spec Libsql.open(path :: String, ) :: {:ok :: label, state :: State, }
spec LibsqlQuery.batch_execute(rows :: Array, ) :: {:ok :: label, state :: State, }
spec LibsqlQuery.execute(arguments :: Array, ) :: {:ok :: label, state :: State, }
spec LibsqlQuery.get_columns() :: {:ok :: label, state :: State, }
spec LibsqlQuery.get_last_error_message() :: {:ok :: label, state :: State, }
spec Light2D.get_blend_mode() :: {:ok :: label, state :: State, }
spec Light2D.get_color() :: {:ok :: label, state :: State, }
spec Light2D.get_energy() :: {:ok :: label, state :: State, }
spec Light2D.get_height() :: {:ok :: label, state :: State, }
spec Light2D.get_item_cull_mask() :: {:ok :: label, state :: State, }
spec Light2D.get_item_shadow_cull_mask() :: {:ok :: label, state :: State, }
spec Light2D.get_layer_range_max() :: {:ok :: label, state :: State, }
spec Light2D.get_layer_range_min() :: {:ok :: label, state :: State, }
spec Light2D.get_shadow_color() :: {:ok :: label, state :: State, }
spec Light2D.get_shadow_filter() :: {:ok :: label, state :: State, }
spec Light2D.get_shadow_smooth() :: {:ok :: label, state :: State, }
spec Light2D.get_z_range_max() :: {:ok :: label, state :: State, }
spec Light2D.get_z_range_min() :: {:ok :: label, state :: State, }
spec Light2D.is_editor_only() :: {:ok :: label, state :: State, }
spec Light2D.is_enabled() :: {:ok :: label, state :: State, }
spec Light2D.is_shadow_enabled() :: {:ok :: label, state :: State, }
spec Light2D.set_blend_mode(mode :: enum::Light2D.BlendMode, ) :: {:ok :: label, state :: State, }
spec Light2D.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec Light2D.set_editor_only(editor_only :: bool, ) :: {:ok :: label, state :: State, }
spec Light2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Light2D.set_energy(energy :: float, ) :: {:ok :: label, state :: State, }
spec Light2D.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec Light2D.set_item_cull_mask(item_cull_mask :: int, ) :: {:ok :: label, state :: State, }
spec Light2D.set_item_shadow_cull_mask(item_shadow_cull_mask :: int, ) :: {:ok :: label, state :: State, }
spec Light2D.set_layer_range_max(layer :: int, ) :: {:ok :: label, state :: State, }
spec Light2D.set_layer_range_min(layer :: int, ) :: {:ok :: label, state :: State, }
spec Light2D.set_shadow_color(shadow_color :: Color, ) :: {:ok :: label, state :: State, }
spec Light2D.set_shadow_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Light2D.set_shadow_filter(filter :: enum::Light2D.ShadowFilter, ) :: {:ok :: label, state :: State, }
spec Light2D.set_shadow_smooth(smooth :: float, ) :: {:ok :: label, state :: State, }
spec Light2D.set_z_range_max(z :: int, ) :: {:ok :: label, state :: State, }
spec Light2D.set_z_range_min(z :: int, ) :: {:ok :: label, state :: State, }
spec Light3D.get_bake_mode() :: {:ok :: label, state :: State, }
spec Light3D.get_color() :: {:ok :: label, state :: State, }
spec Light3D.get_correlated_color() :: {:ok :: label, state :: State, }
spec Light3D.get_cull_mask() :: {:ok :: label, state :: State, }
spec Light3D.get_distance_fade_begin() :: {:ok :: label, state :: State, }
spec Light3D.get_distance_fade_length() :: {:ok :: label, state :: State, }
spec Light3D.get_distance_fade_shadow() :: {:ok :: label, state :: State, }
spec Light3D.get_param(param :: enum::Light3D.Param, ) :: {:ok :: label, state :: State, }
spec Light3D.get_projector() :: {:ok :: label, state :: State, }
spec Light3D.get_shadow_reverse_cull_face() :: {:ok :: label, state :: State, }
spec Light3D.get_temperature() :: {:ok :: label, state :: State, }
spec Light3D.has_shadow() :: {:ok :: label, state :: State, }
spec Light3D.is_distance_fade_enabled() :: {:ok :: label, state :: State, }
spec Light3D.is_editor_only() :: {:ok :: label, state :: State, }
spec Light3D.is_negative() :: {:ok :: label, state :: State, }
spec Light3D.set_bake_mode(bake_mode :: enum::Light3D.BakeMode, ) :: {:ok :: label, state :: State, }
spec Light3D.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec Light3D.set_cull_mask(cull_mask :: int, ) :: {:ok :: label, state :: State, }
spec Light3D.set_distance_fade_begin(distance :: float, ) :: {:ok :: label, state :: State, }
spec Light3D.set_distance_fade_length(distance :: float, ) :: {:ok :: label, state :: State, }
spec Light3D.set_distance_fade_shadow(distance :: float, ) :: {:ok :: label, state :: State, }
spec Light3D.set_editor_only(editor_only :: bool, ) :: {:ok :: label, state :: State, }
spec Light3D.set_enable_distance_fade(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Light3D.set_negative(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Light3D.set_param(param :: enum::Light3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec Light3D.set_projector(projector :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Light3D.set_shadow(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Light3D.set_shadow_reverse_cull_face(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Light3D.set_temperature(temperature :: float, ) :: {:ok :: label, state :: State, }
spec LightOccluder2D.get_occluder_light_mask() :: {:ok :: label, state :: State, }
spec LightOccluder2D.get_occluder_polygon() :: {:ok :: label, state :: State, }
spec LightOccluder2D.is_set_as_sdf_collision() :: {:ok :: label, state :: State, }
spec LightOccluder2D.set_as_sdf_collision(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LightOccluder2D.set_occluder_light_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec LightOccluder2D.set_occluder_polygon(polygon :: OccluderPolygon2D, ) :: {:ok :: label, state :: State, }
spec LightmapGI.get_bake_quality() :: {:ok :: label, state :: State, }
spec LightmapGI.get_bias() :: {:ok :: label, state :: State, }
spec LightmapGI.get_bounces() :: {:ok :: label, state :: State, }
spec LightmapGI.get_camera_attributes() :: {:ok :: label, state :: State, }
spec LightmapGI.get_environment_custom_color() :: {:ok :: label, state :: State, }
spec LightmapGI.get_environment_custom_energy() :: {:ok :: label, state :: State, }
spec LightmapGI.get_environment_custom_sky() :: {:ok :: label, state :: State, }
spec LightmapGI.get_environment_mode() :: {:ok :: label, state :: State, }
spec LightmapGI.get_generate_probes() :: {:ok :: label, state :: State, }
spec LightmapGI.get_light_data() :: {:ok :: label, state :: State, }
spec LightmapGI.get_max_texture_size() :: {:ok :: label, state :: State, }
spec LightmapGI.is_directional() :: {:ok :: label, state :: State, }
spec LightmapGI.is_interior() :: {:ok :: label, state :: State, }
spec LightmapGI.is_using_denoiser() :: {:ok :: label, state :: State, }
spec LightmapGI.set_bake_quality(bake_quality :: enum::LightmapGI.BakeQuality, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_bounces(bounces :: int, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_camera_attributes(camera_attributes :: CameraAttributes, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_directional(directional :: bool, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_environment_custom_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_environment_custom_energy(energy :: float, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_environment_custom_sky(sky :: Sky, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_environment_mode(mode :: enum::LightmapGI.EnvironmentMode, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_generate_probes(subdivision :: enum::LightmapGI.GenerateProbes, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_interior(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_light_data(data :: LightmapGIData, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_max_texture_size(max_texture_size :: int, ) :: {:ok :: label, state :: State, }
spec LightmapGI.set_use_denoiser(use_denoiser :: bool, ) :: {:ok :: label, state :: State, }
spec LightmapGIData.add_user(path :: NodePath, uv_scale :: Rect2, slice_index :: int, sub_instance :: int, ) :: {:ok :: label, state :: State, }
spec LightmapGIData.clear_users() :: {:ok :: label, state :: State, }
spec LightmapGIData.get_light_texture() :: {:ok :: label, state :: State, }
spec LightmapGIData.get_user_count() :: {:ok :: label, state :: State, }
spec LightmapGIData.get_user_path(user_idx :: int, ) :: {:ok :: label, state :: State, }
spec LightmapGIData.is_using_spherical_harmonics() :: {:ok :: label, state :: State, }
spec LightmapGIData.set_light_texture(light_texture :: TextureLayered, ) :: {:ok :: label, state :: State, }
spec LightmapGIData.set_uses_spherical_harmonics(uses_spherical_harmonics :: bool, ) :: {:ok :: label, state :: State, }
spec Line2D.add_point(position :: Vector2, index :: int, ) :: {:ok :: label, state :: State, }
spec Line2D.clear_points() :: {:ok :: label, state :: State, }
spec Line2D.get_antialiased() :: {:ok :: label, state :: State, }
spec Line2D.get_begin_cap_mode() :: {:ok :: label, state :: State, }
spec Line2D.get_curve() :: {:ok :: label, state :: State, }
spec Line2D.get_default_color() :: {:ok :: label, state :: State, }
spec Line2D.get_end_cap_mode() :: {:ok :: label, state :: State, }
spec Line2D.get_gradient() :: {:ok :: label, state :: State, }
spec Line2D.get_joint_mode() :: {:ok :: label, state :: State, }
spec Line2D.get_point_count() :: {:ok :: label, state :: State, }
spec Line2D.get_point_position(index :: int, ) :: {:ok :: label, state :: State, }
spec Line2D.get_points() :: {:ok :: label, state :: State, }
spec Line2D.get_round_precision() :: {:ok :: label, state :: State, }
spec Line2D.get_sharp_limit() :: {:ok :: label, state :: State, }
spec Line2D.get_texture() :: {:ok :: label, state :: State, }
spec Line2D.get_texture_mode() :: {:ok :: label, state :: State, }
spec Line2D.get_width() :: {:ok :: label, state :: State, }
spec Line2D.remove_point(index :: int, ) :: {:ok :: label, state :: State, }
spec Line2D.set_antialiased(antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec Line2D.set_begin_cap_mode(mode :: enum::Line2D.LineCapMode, ) :: {:ok :: label, state :: State, }
spec Line2D.set_curve(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec Line2D.set_default_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec Line2D.set_end_cap_mode(mode :: enum::Line2D.LineCapMode, ) :: {:ok :: label, state :: State, }
spec Line2D.set_gradient(color :: Gradient, ) :: {:ok :: label, state :: State, }
spec Line2D.set_joint_mode(mode :: enum::Line2D.LineJointMode, ) :: {:ok :: label, state :: State, }
spec Line2D.set_point_position(index :: int, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Line2D.set_points(points :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Line2D.set_round_precision(precision :: int, ) :: {:ok :: label, state :: State, }
spec Line2D.set_sharp_limit(limit :: float, ) :: {:ok :: label, state :: State, }
spec Line2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Line2D.set_texture_mode(mode :: enum::Line2D.LineTextureMode, ) :: {:ok :: label, state :: State, }
spec Line2D.set_width(width :: float, ) :: {:ok :: label, state :: State, }
spec LineEdit.clear() :: {:ok :: label, state :: State, }
spec LineEdit.delete_char_at_caret() :: {:ok :: label, state :: State, }
spec LineEdit.delete_text(from_column :: int, to_column :: int, ) :: {:ok :: label, state :: State, }
spec LineEdit.deselect() :: {:ok :: label, state :: State, }
spec LineEdit.get_caret_blink_interval() :: {:ok :: label, state :: State, }
spec LineEdit.get_caret_column() :: {:ok :: label, state :: State, }
spec LineEdit.get_draw_control_chars() :: {:ok :: label, state :: State, }
spec LineEdit.get_horizontal_alignment() :: {:ok :: label, state :: State, }
spec LineEdit.get_language() :: {:ok :: label, state :: State, }
spec LineEdit.get_max_length() :: {:ok :: label, state :: State, }
spec LineEdit.get_menu() :: {:ok :: label, state :: State, }
spec LineEdit.get_placeholder() :: {:ok :: label, state :: State, }
spec LineEdit.get_right_icon() :: {:ok :: label, state :: State, }
spec LineEdit.get_scroll_offset() :: {:ok :: label, state :: State, }
spec LineEdit.get_secret_character() :: {:ok :: label, state :: State, }
spec LineEdit.get_selection_from_column() :: {:ok :: label, state :: State, }
spec LineEdit.get_selection_to_column() :: {:ok :: label, state :: State, }
spec LineEdit.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec LineEdit.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec LineEdit.get_text() :: {:ok :: label, state :: State, }
spec LineEdit.get_text_direction() :: {:ok :: label, state :: State, }
spec LineEdit.get_virtual_keyboard_type() :: {:ok :: label, state :: State, }
spec LineEdit.has_selection() :: {:ok :: label, state :: State, }
spec LineEdit.insert_text_at_caret(text :: String, ) :: {:ok :: label, state :: State, }
spec LineEdit.is_caret_blink_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_caret_force_displayed() :: {:ok :: label, state :: State, }
spec LineEdit.is_caret_mid_grapheme_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_clear_button_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_context_menu_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_deselect_on_focus_loss_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_editable() :: {:ok :: label, state :: State, }
spec LineEdit.is_expand_to_text_length_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_flat() :: {:ok :: label, state :: State, }
spec LineEdit.is_menu_visible() :: {:ok :: label, state :: State, }
spec LineEdit.is_middle_mouse_paste_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_secret() :: {:ok :: label, state :: State, }
spec LineEdit.is_select_all_on_focus() :: {:ok :: label, state :: State, }
spec LineEdit.is_selecting_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_shortcut_keys_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.is_virtual_keyboard_enabled() :: {:ok :: label, state :: State, }
spec LineEdit.menu_option(option :: int, ) :: {:ok :: label, state :: State, }
spec LineEdit.select(from :: int, to :: int, ) :: {:ok :: label, state :: State, }
spec LineEdit.select_all() :: {:ok :: label, state :: State, }
spec LineEdit.set_caret_blink_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_caret_blink_interval(interval :: float, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_caret_column(position :: int, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_caret_force_displayed(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_caret_mid_grapheme_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_clear_button_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_context_menu_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_deselect_on_focus_loss_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_draw_control_chars(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_editable(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_expand_to_text_length_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_flat(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_horizontal_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_max_length(chars :: int, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_middle_mouse_paste_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_placeholder(text :: String, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_right_icon(icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_secret(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_secret_character(character :: String, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_select_all_on_focus(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_selecting_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_shortcut_keys_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_virtual_keyboard_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec LineEdit.set_virtual_keyboard_type(type :: enum::LineEdit.VirtualKeyboardType, ) :: {:ok :: label, state :: State, }
spec LinkButton.get_language() :: {:ok :: label, state :: State, }
spec LinkButton.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec LinkButton.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec LinkButton.get_text() :: {:ok :: label, state :: State, }
spec LinkButton.get_text_direction() :: {:ok :: label, state :: State, }
spec LinkButton.get_underline_mode() :: {:ok :: label, state :: State, }
spec LinkButton.get_uri() :: {:ok :: label, state :: State, }
spec LinkButton.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec LinkButton.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec LinkButton.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec LinkButton.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec LinkButton.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec LinkButton.set_underline_mode(underline_mode :: enum::LinkButton.UnderlineMode, ) :: {:ok :: label, state :: State, }
spec LinkButton.set_uri(uri :: String, ) :: {:ok :: label, state :: State, }
spec MainLoop._finalize() :: {:ok :: label, state :: State, }
spec MainLoop._initialize() :: {:ok :: label, state :: State, }
spec MainLoop._physics_process(delta :: float, ) :: {:ok :: label, state :: State, }
spec MainLoop._process(delta :: float, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.find_constraint(name :: String, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_bone_count() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_bone_direction_constraint_defaults() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_bone_direction_transform(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_constraint_count() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_constraint_mode() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_constraint_name(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_constraint_orientation_transform(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_constraint_twist_transform(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_default_damp() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_iterations_per_frame() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_kusudama_limit_cone_center(index :: int, cone_index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_kusudama_limit_cone_count(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_kusudama_limit_cone_radius(index :: int, cone_index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_kusudama_twist(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_orientation_constraint_defaults() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_bone_name(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_count() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_direction_priorities(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_enabled(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_nodepath(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_passthrough_factor(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_pin_weight(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_skeleton_node_path() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_stabilization_passes() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_twist_constraint_defaults() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.get_ui_selected_bone() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.queue_print_skeleton() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.register_skeleton() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.remove_constraint(index :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.reset_constraints() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_bone_direction_constraint_defaults(defaults :: Dictionary, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_bone_direction_transform(index :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_constraint_mode(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_constraint_orientation_transform(index :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_constraint_twist_transform(index :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_default_damp(damp :: float, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_dirty() :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_iterations_per_frame(count :: float, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_kusudama_limit_cone_center(index :: int, cone_index :: int, center :: Vector3, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_kusudama_limit_cone_count(index :: int, count :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_kusudama_limit_cone_radius(index :: int, cone_index :: int, radius :: float, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_kusudama_twist(index :: int, limit :: Vector2, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_orientation_constraint_defaults(defaults :: Dictionary, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_pin_direction_priorities(index :: int, priority :: Vector3, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_pin_nodepath(index :: int, nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_pin_passthrough_factor(index :: int, falloff :: float, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_pin_weight(index :: int, weight :: float, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_skeleton_node_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_stabilization_passes(passes :: int, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_twist_constraint_defaults(defaults :: Dictionary, ) :: {:ok :: label, state :: State, }
spec ManyBoneIK3D.set_ui_selected_bone(bone :: int, ) :: {:ok :: label, state :: State, }
spec Marker2D.get_gizmo_extents() :: {:ok :: label, state :: State, }
spec Marker2D.set_gizmo_extents(extents :: float, ) :: {:ok :: label, state :: State, }
spec Marker3D.get_gizmo_extents() :: {:ok :: label, state :: State, }
spec Marker3D.set_gizmo_extents(extents :: float, ) :: {:ok :: label, state :: State, }
spec Marshalls.base64_to_raw(base64_str :: String, ) :: {:ok :: label, state :: State, }
spec Marshalls.base64_to_utf8(base64_str :: String, ) :: {:ok :: label, state :: State, }
spec Marshalls.base64_to_variant(base64_str :: String, allow_objects :: bool, ) :: {:ok :: label, state :: State, }
spec Marshalls.raw_to_base64(array :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Marshalls.utf8_to_base64(utf8_str :: String, ) :: {:ok :: label, state :: State, }
spec Marshalls.variant_to_base64(variant :: Variant, full_objects :: bool, ) :: {:ok :: label, state :: State, }
spec Material._can_do_next_pass() :: {:ok :: label, state :: State, }
spec Material._can_use_render_priority() :: {:ok :: label, state :: State, }
spec Material._get_shader_mode() :: {:ok :: label, state :: State, }
spec Material._get_shader_rid() :: {:ok :: label, state :: State, }
spec Material.create_placeholder() :: {:ok :: label, state :: State, }
spec Material.get_next_pass() :: {:ok :: label, state :: State, }
spec Material.get_render_priority() :: {:ok :: label, state :: State, }
spec Material.inspect_native_shader_code() :: {:ok :: label, state :: State, }
spec Material.set_next_pass(next_pass :: Material, ) :: {:ok :: label, state :: State, }
spec Material.set_render_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.get_language() :: {:ok :: label, state :: State, }
spec MenuBar.get_menu_count() :: {:ok :: label, state :: State, }
spec MenuBar.get_menu_popup(menu :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.get_menu_title(menu :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.get_menu_tooltip(menu :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.get_start_index() :: {:ok :: label, state :: State, }
spec MenuBar.get_text_direction() :: {:ok :: label, state :: State, }
spec MenuBar.is_flat() :: {:ok :: label, state :: State, }
spec MenuBar.is_menu_disabled(menu :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.is_menu_hidden(menu :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.is_native_menu() :: {:ok :: label, state :: State, }
spec MenuBar.is_prefer_global_menu() :: {:ok :: label, state :: State, }
spec MenuBar.is_switch_on_hover() :: {:ok :: label, state :: State, }
spec MenuBar.set_disable_shortcuts(disabled :: bool, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_flat(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_menu_disabled(menu :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_menu_hidden(menu :: int, hidden :: bool, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_menu_title(menu :: int, title :: String, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_menu_tooltip(menu :: int, tooltip :: String, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_prefer_global_menu(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_start_index(enabled :: int, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_switch_on_hover(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MenuBar.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec MenuButton.get_item_count() :: {:ok :: label, state :: State, }
spec MenuButton.get_popup() :: {:ok :: label, state :: State, }
spec MenuButton.is_switch_on_hover() :: {:ok :: label, state :: State, }
spec MenuButton.set_disable_shortcuts(disabled :: bool, ) :: {:ok :: label, state :: State, }
spec MenuButton.set_item_count(count :: int, ) :: {:ok :: label, state :: State, }
spec MenuButton.set_switch_on_hover(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MenuButton.show_popup() :: {:ok :: label, state :: State, }
spec Mesh._get_aabb() :: {:ok :: label, state :: State, }
spec Mesh._get_blend_shape_count() :: {:ok :: label, state :: State, }
spec Mesh._get_blend_shape_name(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._get_surface_count() :: {:ok :: label, state :: State, }
spec Mesh._set_blend_shape_name(index :: int, name :: StringName, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_array_index_len(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_array_len(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_arrays(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_blend_shape_arrays(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_format(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_lods(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_material(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_get_primitive_type(index :: int, ) :: {:ok :: label, state :: State, }
spec Mesh._surface_set_material(index :: int, material :: Material, ) :: {:ok :: label, state :: State, }
spec Mesh.create_convex_shape(clean :: bool, simplify :: bool, ) :: {:ok :: label, state :: State, }
spec Mesh.create_outline(margin :: float, ) :: {:ok :: label, state :: State, }
spec Mesh.create_placeholder() :: {:ok :: label, state :: State, }
spec Mesh.create_trimesh_shape() :: {:ok :: label, state :: State, }
spec Mesh.generate_triangle_mesh() :: {:ok :: label, state :: State, }
spec Mesh.get_aabb() :: {:ok :: label, state :: State, }
spec Mesh.get_faces() :: {:ok :: label, state :: State, }
spec Mesh.get_lightmap_size_hint() :: {:ok :: label, state :: State, }
spec Mesh.get_surface_count() :: {:ok :: label, state :: State, }
spec Mesh.set_lightmap_size_hint(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Mesh.surface_get_arrays(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec Mesh.surface_get_blend_shape_arrays(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec Mesh.surface_get_material(surf_idx :: int, ) :: {:ok :: label, state :: State, }
spec Mesh.surface_set_material(surf_idx :: int, material :: Material, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.clear() :: {:ok :: label, state :: State, }
spec MeshDataTool.commit_to_surface(mesh :: ArrayMesh, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.create_from_surface(mesh :: ArrayMesh, surface :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_edge_count() :: {:ok :: label, state :: State, }
spec MeshDataTool.get_edge_faces(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_edge_meta(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_edge_vertex(idx :: int, vertex :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_face_count() :: {:ok :: label, state :: State, }
spec MeshDataTool.get_face_edge(idx :: int, edge :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_face_meta(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_face_normal(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_face_vertex(idx :: int, vertex :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_format() :: {:ok :: label, state :: State, }
spec MeshDataTool.get_material() :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_bones(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_color(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_count() :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_edges(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_faces(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_meta(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_normal(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_tangent(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_uv(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_uv2(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.get_vertex_weights(idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_edge_meta(idx :: int, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_face_meta(idx :: int, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex(idx :: int, vertex :: Vector3, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_bones(idx :: int, bones :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_color(idx :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_meta(idx :: int, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_normal(idx :: int, normal :: Vector3, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_tangent(idx :: int, tangent :: Plane, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_uv(idx :: int, uv :: Vector2, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_uv2(idx :: int, uv2 :: Vector2, ) :: {:ok :: label, state :: State, }
spec MeshDataTool.set_vertex_weights(idx :: int, weights :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec MeshInstance2D.get_mesh() :: {:ok :: label, state :: State, }
spec MeshInstance2D.get_texture() :: {:ok :: label, state :: State, }
spec MeshInstance2D.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec MeshInstance2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.create_convex_collision(clean :: bool, simplify :: bool, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.create_debug_tangents() :: {:ok :: label, state :: State, }
spec MeshInstance3D.create_multiple_convex_collisions() :: {:ok :: label, state :: State, }
spec MeshInstance3D.create_trimesh_collision() :: {:ok :: label, state :: State, }
spec MeshInstance3D.find_blend_shape_by_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_active_material(surface :: int, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_blend_shape_count() :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_blend_shape_value(blend_shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_mesh() :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_skeleton_path() :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_skin() :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_surface_override_material(surface :: int, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.get_surface_override_material_count() :: {:ok :: label, state :: State, }
spec MeshInstance3D.set_blend_shape_value(blend_shape_idx :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.set_skeleton_path(skeleton_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.set_skin(skin :: Skin, ) :: {:ok :: label, state :: State, }
spec MeshInstance3D.set_surface_override_material(surface :: int, material :: Material, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.clear() :: {:ok :: label, state :: State, }
spec MeshLibrary.create_item(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.find_item_by_name(name :: String, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_list() :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_mesh(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_mesh_transform(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_name(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_navigation_layers(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_navigation_mesh(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_navigation_mesh_transform(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_preview(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_item_shapes(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.get_last_unused_item_id() :: {:ok :: label, state :: State, }
spec MeshLibrary.remove_item(id :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_mesh(id :: int, mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_mesh_transform(id :: int, mesh_transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_name(id :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_navigation_layers(id :: int, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_navigation_mesh(id :: int, navigation_mesh :: NavigationMesh, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_navigation_mesh_transform(id :: int, navigation_mesh :: Transform3D, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_preview(id :: int, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec MeshLibrary.set_item_shapes(id :: int, shapes :: Array, ) :: {:ok :: label, state :: State, }
spec MeshTexture.get_base_texture() :: {:ok :: label, state :: State, }
spec MeshTexture.get_image_size() :: {:ok :: label, state :: State, }
spec MeshTexture.get_mesh() :: {:ok :: label, state :: State, }
spec MeshTexture.set_base_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec MeshTexture.set_image_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec MeshTexture.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec MethodTweener.set_delay(delay :: float, ) :: {:ok :: label, state :: State, }
spec MethodTweener.set_ease(ease :: enum::Tween.EaseType, ) :: {:ok :: label, state :: State, }
spec MethodTweener.set_trans(trans :: enum::Tween.TransitionType, ) :: {:ok :: label, state :: State, }
spec MissingNode.get_original_class() :: {:ok :: label, state :: State, }
spec MissingNode.is_recording_properties() :: {:ok :: label, state :: State, }
spec MissingNode.set_original_class(name :: String, ) :: {:ok :: label, state :: State, }
spec MissingNode.set_recording_properties(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MissingResource.get_original_class() :: {:ok :: label, state :: State, }
spec MissingResource.is_recording_properties() :: {:ok :: label, state :: State, }
spec MissingResource.set_original_class(name :: String, ) :: {:ok :: label, state :: State, }
spec MissingResource.set_recording_properties(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_display_to_lens() :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_display_width() :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_eye_height() :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_iod() :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_k1() :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_k2() :: {:ok :: label, state :: State, }
spec MobileVRInterface.get_oversample() :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_display_to_lens(display_to_lens :: float, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_display_width(display_width :: float, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_eye_height(eye_height :: float, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_iod(iod :: float, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_k1(k :: float, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_k2(k :: float, ) :: {:ok :: label, state :: State, }
spec MobileVRInterface.set_oversample(oversample :: float, ) :: {:ok :: label, state :: State, }
spec MovieWriter._get_audio_mix_rate() :: {:ok :: label, state :: State, }
spec MovieWriter._get_audio_speaker_mode() :: {:ok :: label, state :: State, }
spec MovieWriter._handles_file(path :: String, ) :: {:ok :: label, state :: State, }
spec MovieWriter._write_begin(movie_size :: Vector2i, fps :: int, base_path :: String, ) :: {:ok :: label, state :: State, }
spec MovieWriter._write_end() :: {:ok :: label, state :: State, }
spec MovieWriter._write_frame(frame_image :: Image, audio_frame_block :: const void*, ) :: {:ok :: label, state :: State, }
spec MovieWriter.add_writer(writer :: MovieWriter, ) :: {:ok :: label, state :: State, }
spec MultiMesh.get_aabb() :: {:ok :: label, state :: State, }
spec MultiMesh.get_buffer() :: {:ok :: label, state :: State, }
spec MultiMesh.get_instance_color(instance :: int, ) :: {:ok :: label, state :: State, }
spec MultiMesh.get_instance_count() :: {:ok :: label, state :: State, }
spec MultiMesh.get_instance_custom_data(instance :: int, ) :: {:ok :: label, state :: State, }
spec MultiMesh.get_instance_transform(instance :: int, ) :: {:ok :: label, state :: State, }
spec MultiMesh.get_instance_transform_2d(instance :: int, ) :: {:ok :: label, state :: State, }
spec MultiMesh.get_mesh() :: {:ok :: label, state :: State, }
spec MultiMesh.get_transform_format() :: {:ok :: label, state :: State, }
spec MultiMesh.get_visible_instance_count() :: {:ok :: label, state :: State, }
spec MultiMesh.is_using_colors() :: {:ok :: label, state :: State, }
spec MultiMesh.is_using_custom_data() :: {:ok :: label, state :: State, }
spec MultiMesh.set_buffer(buffer :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_instance_color(instance :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_instance_count(count :: int, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_instance_custom_data(instance :: int, custom_data :: Color, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_instance_transform(instance :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_instance_transform_2d(instance :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_transform_format(format :: enum::MultiMesh.TransformFormat, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_use_colors(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_use_custom_data(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MultiMesh.set_visible_instance_count(count :: int, ) :: {:ok :: label, state :: State, }
spec MultiMeshInstance2D.get_multimesh() :: {:ok :: label, state :: State, }
spec MultiMeshInstance2D.get_texture() :: {:ok :: label, state :: State, }
spec MultiMeshInstance2D.set_multimesh(multimesh :: MultiMesh, ) :: {:ok :: label, state :: State, }
spec MultiMeshInstance2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec MultiMeshInstance3D.get_multimesh() :: {:ok :: label, state :: State, }
spec MultiMeshInstance3D.set_multimesh(multimesh :: MultiMesh, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPI.create_default_interface() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.get_default_interface() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.get_multiplayer_peer() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.get_peers() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.get_remote_sender_id() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.get_unique_id() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.has_multiplayer_peer() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.is_server() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.object_configuration_add(object :: Object, configuration :: Variant, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPI.object_configuration_remove(object :: Object, configuration :: Variant, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPI.poll() :: {:ok :: label, state :: State, }
spec MultiplayerAPI.rpc(peer :: int, object :: Object, method :: StringName, arguments :: Array, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPI.set_default_interface(interface_name :: StringName, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPI.set_multiplayer_peer(peer :: MultiplayerPeer, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._get_multiplayer_peer() :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._get_peer_ids() :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._get_remote_sender_id() :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._get_unique_id() :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._object_configuration_add(object :: Object, configuration :: Variant, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._object_configuration_remove(object :: Object, configuration :: Variant, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._poll() :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._rpc(peer :: int, object :: Object, method :: StringName, args :: Array, ) :: {:ok :: label, state :: State, }
spec MultiplayerAPIExtension._set_multiplayer_peer(multiplayer_peer :: MultiplayerPeer, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeer.close() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.disconnect_peer(peer :: int, force :: bool, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeer.generate_unique_id() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_connection_status() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_packet_channel() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_packet_mode() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_packet_peer() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_transfer_channel() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_transfer_mode() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.get_unique_id() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.is_refusing_new_connections() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.is_server_relay_supported() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.poll() :: {:ok :: label, state :: State, }
spec MultiplayerPeer.set_refuse_new_connections(enable :: bool, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeer.set_target_peer(id :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeer.set_transfer_channel(channel :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeer.set_transfer_mode(mode :: enum::MultiplayerPeer.TransferMode, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._close() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._disconnect_peer(p_peer :: int, p_force :: bool, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_available_packet_count() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_connection_status() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_max_packet_size() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_packet(r_buffer :: const uint8_t **, r_buffer_size :: int32_t*, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_packet_peer() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_packet_script() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_transfer_channel() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_transfer_mode() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._get_unique_id() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._is_refusing_new_connections() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._is_server() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._poll() :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._put_packet(p_buffer :: const uint8_t*, p_buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._put_packet_script(p_buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._set_refuse_new_connections(p_enable :: bool, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._set_target_peer(p_peer :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._set_transfer_channel(p_channel :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerPeerExtension._set_transfer_mode(p_mode :: enum::MultiplayerPeer.TransferMode, ) :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.add_spawnable_scene(path :: String, ) :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.clear_spawnable_scenes() :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.get_spawn_function() :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.get_spawn_limit() :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.get_spawn_path() :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.get_spawnable_scene(index :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.get_spawnable_scene_count() :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.set_spawn_function(spawn_function :: Callable, ) :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.set_spawn_limit(limit :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.set_spawn_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec MultiplayerSpawner.spawn(data :: Variant, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.add_visibility_filter(filter :: Callable, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.get_replication_config() :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.get_replication_interval() :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.get_root_path() :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.get_visibility_for(peer :: int, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.get_visibility_update_mode() :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.is_visibility_public() :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.remove_visibility_filter(filter :: Callable, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.set_replication_config(config :: SceneReplicationConfig, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.set_replication_interval(milliseconds :: float, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.set_root_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.set_visibility_for(peer :: int, visible :: bool, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.set_visibility_public(visible :: bool, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.set_visibility_update_mode(mode :: enum::MultiplayerSynchronizer.VisibilityUpdateMode, ) :: {:ok :: label, state :: State, }
spec MultiplayerSynchronizer.update_visibility(for_peer :: int, ) :: {:ok :: label, state :: State, }
spec Mutex.lock() :: {:ok :: label, state :: State, }
spec Mutex.try_lock() :: {:ok :: label, state :: State, }
spec Mutex.unlock() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.distance_to_target() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_avoidance_enabled() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_current_navigation_path() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_current_navigation_path_index() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_current_navigation_result() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_debug_enabled() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_debug_path_custom_color() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_debug_path_custom_line_width() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_debug_path_custom_point_size() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_debug_use_custom() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_final_position() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_max_neighbors() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_max_speed() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_navigation_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_navigation_map() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_neighbor_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_next_path_position() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_path_desired_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_path_max_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_path_metadata_flags() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_radius() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_rid() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_target_desired_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_target_position() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.get_time_horizon() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.is_navigation_finished() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.is_target_reachable() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.is_target_reached() :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_avoidance_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_debug_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_debug_path_custom_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_debug_path_custom_line_width(line_width :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_debug_path_custom_point_size(point_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_debug_use_custom(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_max_neighbors(max_neighbors :: int, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_max_speed(max_speed :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_navigation_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_navigation_map(navigation_map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_neighbor_distance(neighbor_distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_path_desired_distance(desired_distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_path_max_distance(max_speed :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_path_metadata_flags(flags :: bitfield::NavigationPathQueryParameters2D.PathMetadataFlags, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_target_desired_distance(desired_distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_target_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_time_horizon(time_horizon :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent2D.set_velocity(velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.distance_to_target() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_agent_height_offset() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_avoidance_enabled() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_current_navigation_path() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_current_navigation_path_index() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_current_navigation_result() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_debug_enabled() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_debug_path_custom_color() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_debug_path_custom_point_size() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_debug_use_custom() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_final_position() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_ignore_y() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_max_neighbors() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_max_speed() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_navigation_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_navigation_map() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_neighbor_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_next_path_position() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_path_desired_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_path_max_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_path_metadata_flags() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_radius() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_rid() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_target_desired_distance() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_target_position() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.get_time_horizon() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.is_navigation_finished() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.is_target_reachable() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.is_target_reached() :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_agent_height_offset(agent_height_offset :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_avoidance_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_debug_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_debug_path_custom_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_debug_path_custom_point_size(point_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_debug_use_custom(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_ignore_y(ignore :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_max_neighbors(max_neighbors :: int, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_max_speed(max_speed :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_navigation_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_navigation_map(navigation_map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_neighbor_distance(neighbor_distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_path_desired_distance(desired_distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_path_max_distance(max_speed :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_path_metadata_flags(flags :: bitfield::NavigationPathQueryParameters3D.PathMetadataFlags, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_target_desired_distance(desired_distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_target_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_time_horizon(time_horizon :: float, ) :: {:ok :: label, state :: State, }
spec NavigationAgent3D.set_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_end_position() :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_enter_cost() :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_global_end_position() :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_global_start_position() :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_navigation_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_start_position() :: {:ok :: label, state :: State, }
spec NavigationLink2D.get_travel_cost() :: {:ok :: label, state :: State, }
spec NavigationLink2D.is_bidirectional() :: {:ok :: label, state :: State, }
spec NavigationLink2D.is_enabled() :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_bidirectional(bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_end_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_enter_cost(enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_global_end_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_global_start_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_navigation_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_start_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationLink2D.set_travel_cost(travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_end_position() :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_enter_cost() :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_global_end_position() :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_global_start_position() :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_navigation_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_start_position() :: {:ok :: label, state :: State, }
spec NavigationLink3D.get_travel_cost() :: {:ok :: label, state :: State, }
spec NavigationLink3D.is_bidirectional() :: {:ok :: label, state :: State, }
spec NavigationLink3D.is_enabled() :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_bidirectional(bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_end_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_enter_cost(enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_global_end_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_global_start_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_navigation_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_start_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationLink3D.set_travel_cost(travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.add_polygon(polygon :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.clear_polygons() :: {:ok :: label, state :: State, }
spec NavigationMesh.create_from_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.get_agent_height() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_agent_max_climb() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_agent_max_slope() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_agent_radius() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_cell_height() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_cell_size() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_collision_mask() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.get_detail_sample_distance() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_detail_sample_max_error() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_edge_max_error() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_edge_max_length() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_filter_baking_aabb() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_filter_baking_aabb_offset() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_filter_ledge_spans() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_filter_low_hanging_obstacles() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_filter_walkable_low_height_spans() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_parsed_geometry_type() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_polygon(idx :: int, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.get_polygon_count() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_region_merge_size() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_region_min_size() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_sample_partition_type() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_source_geometry_mode() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_source_group_name() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_vertices() :: {:ok :: label, state :: State, }
spec NavigationMesh.get_vertices_per_polygon() :: {:ok :: label, state :: State, }
spec NavigationMesh.set_agent_height(agent_height :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_agent_max_climb(agent_max_climb :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_agent_max_slope(agent_max_slope :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_agent_radius(agent_radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_cell_height(cell_height :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_cell_size(cell_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_detail_sample_distance(detail_sample_dist :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_detail_sample_max_error(detail_sample_max_error :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_edge_max_error(edge_max_error :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_edge_max_length(edge_max_length :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_filter_baking_aabb(baking_aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_filter_baking_aabb_offset(baking_aabb_offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_filter_ledge_spans(filter_ledge_spans :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_filter_low_hanging_obstacles(filter_low_hanging_obstacles :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_filter_walkable_low_height_spans(filter_walkable_low_height_spans :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_parsed_geometry_type(geometry_type :: enum::NavigationMesh.ParsedGeometryType, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_region_merge_size(region_merge_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_region_min_size(region_min_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_sample_partition_type(sample_partition_type :: enum::NavigationMesh.SamplePartitionType, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_source_geometry_mode(mask :: enum::NavigationMesh.SourceGeometryMode, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_source_group_name(mask :: StringName, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_vertices(vertices :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec NavigationMesh.set_vertices_per_polygon(vertices_per_polygon :: float, ) :: {:ok :: label, state :: State, }
spec NavigationMeshGenerator.bake(navigation_mesh :: NavigationMesh, root_node :: Node, ) :: {:ok :: label, state :: State, }
spec NavigationMeshGenerator.clear(navigation_mesh :: NavigationMesh, ) :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.get_navigation_map() :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.get_radius() :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.get_rid() :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.is_radius_estimated() :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.set_estimate_radius(estimate_radius :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.set_navigation_map(navigation_map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationObstacle2D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.get_navigation_map() :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.get_radius() :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.get_rid() :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.is_radius_estimated() :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.set_estimate_radius(estimate_radius :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.set_navigation_map(navigation_map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationObstacle3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_map() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_metadata_flags() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_path_postprocessing() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_pathfinding_algorithm() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_start_position() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.get_target_position() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_map(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_metadata_flags(flags :: bitfield::NavigationPathQueryParameters2D.PathMetadataFlags, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_path_postprocessing(path_postprocessing :: enum::NavigationPathQueryParameters2D.PathPostProcessing, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_pathfinding_algorithm(pathfinding_algorithm :: enum::NavigationPathQueryParameters2D.PathfindingAlgorithm, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_start_position(start_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters2D.set_target_position(target_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_map() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_metadata_flags() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_path_postprocessing() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_pathfinding_algorithm() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_start_position() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.get_target_position() :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_map(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_metadata_flags(flags :: bitfield::NavigationPathQueryParameters3D.PathMetadataFlags, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_path_postprocessing(path_postprocessing :: enum::NavigationPathQueryParameters3D.PathPostProcessing, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_pathfinding_algorithm(pathfinding_algorithm :: enum::NavigationPathQueryParameters3D.PathfindingAlgorithm, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_start_position(start_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryParameters3D.set_target_position(target_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.get_path() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.get_path_owner_ids() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.get_path_rids() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.get_path_types() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.reset() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.set_path(path :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.set_path_owner_ids(path_owner_ids :: PackedInt64Array, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.set_path_rids(path_rids :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult2D.set_path_types(path_types :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.get_path() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.get_path_owner_ids() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.get_path_rids() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.get_path_types() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.reset() :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.set_path(path :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.set_path_owner_ids(path_owner_ids :: PackedInt64Array, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.set_path_rids(path_rids :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec NavigationPathQueryResult3D.set_path_types(path_types :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.add_outline(outline :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.add_outline_at_index(outline :: PackedVector2Array, index :: int, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.add_polygon(polygon :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.clear_outlines() :: {:ok :: label, state :: State, }
spec NavigationPolygon.clear_polygons() :: {:ok :: label, state :: State, }
spec NavigationPolygon.get_navigation_mesh() :: {:ok :: label, state :: State, }
spec NavigationPolygon.get_outline(idx :: int, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.get_outline_count() :: {:ok :: label, state :: State, }
spec NavigationPolygon.get_polygon(idx :: int, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.get_polygon_count() :: {:ok :: label, state :: State, }
spec NavigationPolygon.get_vertices() :: {:ok :: label, state :: State, }
spec NavigationPolygon.make_polygons_from_outlines() :: {:ok :: label, state :: State, }
spec NavigationPolygon.remove_outline(idx :: int, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.set_outline(idx :: int, outline :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec NavigationPolygon.set_vertices(vertices :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.get_enter_cost() :: {:ok :: label, state :: State, }
spec NavigationRegion2D.get_navigation_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationRegion2D.get_navigation_polygon() :: {:ok :: label, state :: State, }
spec NavigationRegion2D.get_region_rid() :: {:ok :: label, state :: State, }
spec NavigationRegion2D.get_travel_cost() :: {:ok :: label, state :: State, }
spec NavigationRegion2D.is_enabled() :: {:ok :: label, state :: State, }
spec NavigationRegion2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.set_enter_cost(enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.set_navigation_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.set_navigation_polygon(navigation_polygon :: NavigationPolygon, ) :: {:ok :: label, state :: State, }
spec NavigationRegion2D.set_travel_cost(travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.bake_navigation_mesh(on_thread :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.get_enter_cost() :: {:ok :: label, state :: State, }
spec NavigationRegion3D.get_navigation_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.get_navigation_layers() :: {:ok :: label, state :: State, }
spec NavigationRegion3D.get_navigation_mesh() :: {:ok :: label, state :: State, }
spec NavigationRegion3D.get_region_rid() :: {:ok :: label, state :: State, }
spec NavigationRegion3D.get_travel_cost() :: {:ok :: label, state :: State, }
spec NavigationRegion3D.is_enabled() :: {:ok :: label, state :: State, }
spec NavigationRegion3D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.set_enter_cost(enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.set_navigation_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.set_navigation_layers(navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.set_navigation_mesh(navigation_mesh :: NavigationMesh, ) :: {:ok :: label, state :: State, }
spec NavigationRegion3D.set_travel_cost(travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_create() :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_get_map(agent :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_is_map_changed(agent :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_callback(agent :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_map(agent :: RID, map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_max_neighbors(agent :: RID, count :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_max_speed(agent :: RID, max_speed :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_neighbor_distance(agent :: RID, distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_position(agent :: RID, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_radius(agent :: RID, radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_target_velocity(agent :: RID, target_velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_time_horizon(agent :: RID, time :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.agent_set_velocity(agent :: RID, velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.get_debug_enabled() :: {:ok :: label, state :: State, }
spec NavigationServer2D.get_maps() :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_create() :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_end_position(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_enter_cost(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_map(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_navigation_layers(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_owner_id(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_start_position(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_get_travel_cost(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_is_bidirectional(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_bidirectional(link :: RID, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_end_position(link :: RID, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_enter_cost(link :: RID, enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_map(link :: RID, map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_navigation_layers(link :: RID, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_owner_id(link :: RID, owner_id :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_start_position(link :: RID, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.link_set_travel_cost(link :: RID, travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_create() :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_force_update(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_agents(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_cell_size(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_closest_point(map :: RID, to_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_closest_point_owner(map :: RID, to_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_edge_connection_margin(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_link_connection_radius(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_links(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_path(map :: RID, origin :: Vector2, destination :: Vector2, optimize :: bool, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_get_regions(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_is_active(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_set_active(map :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_set_cell_size(map :: RID, cell_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_set_edge_connection_margin(map :: RID, margin :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.map_set_link_connection_radius(map :: RID, radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.query_path(parameters :: NavigationPathQueryParameters2D, result :: NavigationPathQueryResult2D, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_create() :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_connection_pathway_end(region :: RID, connection :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_connection_pathway_start(region :: RID, connection :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_connections_count(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_enter_cost(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_map(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_navigation_layers(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_owner_id(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_get_travel_cost(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_owns_point(region :: RID, point :: Vector2, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_enter_cost(region :: RID, enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_map(region :: RID, map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_navigation_layers(region :: RID, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_navigation_polygon(region :: RID, navigation_polygon :: NavigationPolygon, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_owner_id(region :: RID, owner_id :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_transform(region :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.region_set_travel_cost(region :: RID, travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer2D.set_debug_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_create() :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_get_map(agent :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_is_map_changed(agent :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_callback(agent :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_map(agent :: RID, map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_max_neighbors(agent :: RID, count :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_max_speed(agent :: RID, max_speed :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_neighbor_distance(agent :: RID, distance :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_position(agent :: RID, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_radius(agent :: RID, radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_target_velocity(agent :: RID, target_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_time_horizon(agent :: RID, time :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.agent_set_velocity(agent :: RID, velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.get_debug_enabled() :: {:ok :: label, state :: State, }
spec NavigationServer3D.get_maps() :: {:ok :: label, state :: State, }
spec NavigationServer3D.get_process_info(process_info :: enum::NavigationServer3D.ProcessInfo, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_create() :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_end_position(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_enter_cost(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_map(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_navigation_layers(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_owner_id(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_start_position(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_get_travel_cost(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_is_bidirectional(link :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_bidirectional(link :: RID, bidirectional :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_end_position(link :: RID, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_enter_cost(link :: RID, enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_map(link :: RID, map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_navigation_layers(link :: RID, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_owner_id(link :: RID, owner_id :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_start_position(link :: RID, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.link_set_travel_cost(link :: RID, travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_create() :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_force_update(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_agents(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_cell_size(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_closest_point(map :: RID, to_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_closest_point_normal(map :: RID, to_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_closest_point_owner(map :: RID, to_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_closest_point_to_segment(map :: RID, start :: Vector3, end :: Vector3, use_collision :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_edge_connection_margin(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_link_connection_radius(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_links(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_path(map :: RID, origin :: Vector3, destination :: Vector3, optimize :: bool, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_regions(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_get_up(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_is_active(map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_set_active(map :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_set_cell_size(map :: RID, cell_size :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_set_edge_connection_margin(map :: RID, margin :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_set_link_connection_radius(map :: RID, radius :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.map_set_up(map :: RID, up :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.query_path(parameters :: NavigationPathQueryParameters3D, result :: NavigationPathQueryResult3D, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_bake_navigation_mesh(navigation_mesh :: NavigationMesh, root_node :: Node, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_create() :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_connection_pathway_end(region :: RID, connection :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_connection_pathway_start(region :: RID, connection :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_connections_count(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_enter_cost(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_map(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_navigation_layers(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_owner_id(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_get_travel_cost(region :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_owns_point(region :: RID, point :: Vector3, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_enter_cost(region :: RID, enter_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_map(region :: RID, map :: RID, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_navigation_layers(region :: RID, navigation_layers :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_navigation_mesh(region :: RID, navigation_mesh :: NavigationMesh, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_owner_id(region :: RID, owner_id :: int, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_transform(region :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.region_set_travel_cost(region :: RID, travel_cost :: float, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec NavigationServer3D.set_debug_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.get_h_axis_stretch_mode() :: {:ok :: label, state :: State, }
spec NinePatchRect.get_patch_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.get_region_rect() :: {:ok :: label, state :: State, }
spec NinePatchRect.get_texture() :: {:ok :: label, state :: State, }
spec NinePatchRect.get_v_axis_stretch_mode() :: {:ok :: label, state :: State, }
spec NinePatchRect.is_draw_center_enabled() :: {:ok :: label, state :: State, }
spec NinePatchRect.set_draw_center(draw_center :: bool, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.set_h_axis_stretch_mode(mode :: enum::NinePatchRect.AxisStretchMode, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.set_patch_margin(margin :: enum::Side, value :: int, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.set_region_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec NinePatchRect.set_v_axis_stretch_mode(mode :: enum::NinePatchRect.AxisStretchMode, ) :: {:ok :: label, state :: State, }
spec Node._enter_tree() :: {:ok :: label, state :: State, }
spec Node._exit_tree() :: {:ok :: label, state :: State, }
spec Node._get_configuration_warnings() :: {:ok :: label, state :: State, }
spec Node._input(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Node._physics_process(delta :: float, ) :: {:ok :: label, state :: State, }
spec Node._process(delta :: float, ) :: {:ok :: label, state :: State, }
spec Node._ready() :: {:ok :: label, state :: State, }
spec Node._shortcut_input(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Node._unhandled_input(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Node._unhandled_key_input(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Node.add_child(node :: Node, force_readable_name :: bool, internal :: enum::Node.InternalMode, ) :: {:ok :: label, state :: State, }
spec Node.add_sibling(sibling :: Node, force_readable_name :: bool, ) :: {:ok :: label, state :: State, }
spec Node.add_to_group(group :: StringName, persistent :: bool, ) :: {:ok :: label, state :: State, }
spec Node.can_process() :: {:ok :: label, state :: State, }
spec Node.create_tween() :: {:ok :: label, state :: State, }
spec Node.duplicate(flags :: int, ) :: {:ok :: label, state :: State, }
spec Node.find_child(pattern :: String, recursive :: bool, owned :: bool, ) :: {:ok :: label, state :: State, }
spec Node.find_children(pattern :: String, type :: String, recursive :: bool, owned :: bool, ) :: {:ok :: label, state :: State, }
spec Node.find_parent(pattern :: String, ) :: {:ok :: label, state :: State, }
spec Node.get_child(idx :: int, include_internal :: bool, ) :: {:ok :: label, state :: State, }
spec Node.get_child_count(include_internal :: bool, ) :: {:ok :: label, state :: State, }
spec Node.get_children(include_internal :: bool, ) :: {:ok :: label, state :: State, }
spec Node.get_editor_description() :: {:ok :: label, state :: State, }
spec Node.get_groups() :: {:ok :: label, state :: State, }
spec Node.get_index(include_internal :: bool, ) :: {:ok :: label, state :: State, }
spec Node.get_multiplayer() :: {:ok :: label, state :: State, }
spec Node.get_multiplayer_authority() :: {:ok :: label, state :: State, }
spec Node.get_name() :: {:ok :: label, state :: State, }
spec Node.get_node(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Node.get_node_and_resource(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Node.get_node_or_null(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Node.get_owner() :: {:ok :: label, state :: State, }
spec Node.get_parent() :: {:ok :: label, state :: State, }
spec Node.get_path() :: {:ok :: label, state :: State, }
spec Node.get_path_to(node :: Node, use_unique_path :: bool, ) :: {:ok :: label, state :: State, }
spec Node.get_physics_process_delta_time() :: {:ok :: label, state :: State, }
spec Node.get_process_delta_time() :: {:ok :: label, state :: State, }
spec Node.get_process_mode() :: {:ok :: label, state :: State, }
spec Node.get_process_priority() :: {:ok :: label, state :: State, }
spec Node.get_scene_file_path() :: {:ok :: label, state :: State, }
spec Node.get_scene_instance_load_placeholder() :: {:ok :: label, state :: State, }
spec Node.get_tree() :: {:ok :: label, state :: State, }
spec Node.get_viewport() :: {:ok :: label, state :: State, }
spec Node.get_window() :: {:ok :: label, state :: State, }
spec Node.has_node(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Node.has_node_and_resource(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Node.is_ancestor_of(node :: Node, ) :: {:ok :: label, state :: State, }
spec Node.is_displayed_folded() :: {:ok :: label, state :: State, }
spec Node.is_editable_instance(node :: Node, ) :: {:ok :: label, state :: State, }
spec Node.is_greater_than(node :: Node, ) :: {:ok :: label, state :: State, }
spec Node.is_in_group(group :: StringName, ) :: {:ok :: label, state :: State, }
spec Node.is_inside_tree() :: {:ok :: label, state :: State, }
spec Node.is_multiplayer_authority() :: {:ok :: label, state :: State, }
spec Node.is_physics_processing() :: {:ok :: label, state :: State, }
spec Node.is_physics_processing_internal() :: {:ok :: label, state :: State, }
spec Node.is_processing() :: {:ok :: label, state :: State, }
spec Node.is_processing_input() :: {:ok :: label, state :: State, }
spec Node.is_processing_internal() :: {:ok :: label, state :: State, }
spec Node.is_processing_shortcut_input() :: {:ok :: label, state :: State, }
spec Node.is_processing_unhandled_input() :: {:ok :: label, state :: State, }
spec Node.is_processing_unhandled_key_input() :: {:ok :: label, state :: State, }
spec Node.is_unique_name_in_owner() :: {:ok :: label, state :: State, }
spec Node.move_child(child_node :: Node, to_index :: int, ) :: {:ok :: label, state :: State, }
spec Node.print_orphan_nodes() :: {:ok :: label, state :: State, }
spec Node.print_tree() :: {:ok :: label, state :: State, }
spec Node.print_tree_pretty() :: {:ok :: label, state :: State, }
spec Node.propagate_call(method :: StringName, args :: Array, parent_first :: bool, ) :: {:ok :: label, state :: State, }
spec Node.propagate_notification(what :: int, ) :: {:ok :: label, state :: State, }
spec Node.queue_free() :: {:ok :: label, state :: State, }
spec Node.remove_child(node :: Node, ) :: {:ok :: label, state :: State, }
spec Node.remove_from_group(group :: StringName, ) :: {:ok :: label, state :: State, }
spec Node.reparent(new_parent :: Node, keep_global_transform :: bool, ) :: {:ok :: label, state :: State, }
spec Node.replace_by(node :: Node, keep_groups :: bool, ) :: {:ok :: label, state :: State, }
spec Node.request_ready() :: {:ok :: label, state :: State, }
spec Node.rpc(method :: StringName, ) :: {:ok :: label, state :: State, }
spec Node.rpc_config(method :: StringName, config :: Variant, ) :: {:ok :: label, state :: State, }
spec Node.rpc_id(peer_id :: int, method :: StringName, ) :: {:ok :: label, state :: State, }
spec Node.set_display_folded(fold :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_editable_instance(node :: Node, is_editable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_editor_description(editor_description :: String, ) :: {:ok :: label, state :: State, }
spec Node.set_multiplayer_authority(id :: int, recursive :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_name(name :: String, ) :: {:ok :: label, state :: State, }
spec Node.set_owner(owner :: Node, ) :: {:ok :: label, state :: State, }
spec Node.set_physics_process(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_physics_process_internal(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_process(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_process_input(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_process_internal(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_process_mode(mode :: enum::Node.ProcessMode, ) :: {:ok :: label, state :: State, }
spec Node.set_process_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec Node.set_process_shortcut_input(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_process_unhandled_input(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_process_unhandled_key_input(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_scene_file_path(scene_file_path :: String, ) :: {:ok :: label, state :: State, }
spec Node.set_scene_instance_load_placeholder(load_placeholder :: bool, ) :: {:ok :: label, state :: State, }
spec Node.set_unique_name_in_owner(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node.update_configuration_warnings() :: {:ok :: label, state :: State, }
spec Node2D.apply_scale(ratio :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.get_angle_to(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.get_global_position() :: {:ok :: label, state :: State, }
spec Node2D.get_global_rotation() :: {:ok :: label, state :: State, }
spec Node2D.get_global_rotation_degrees() :: {:ok :: label, state :: State, }
spec Node2D.get_global_scale() :: {:ok :: label, state :: State, }
spec Node2D.get_global_skew() :: {:ok :: label, state :: State, }
spec Node2D.get_position() :: {:ok :: label, state :: State, }
spec Node2D.get_relative_transform_to_parent(parent :: Node, ) :: {:ok :: label, state :: State, }
spec Node2D.get_rotation() :: {:ok :: label, state :: State, }
spec Node2D.get_rotation_degrees() :: {:ok :: label, state :: State, }
spec Node2D.get_scale() :: {:ok :: label, state :: State, }
spec Node2D.get_skew() :: {:ok :: label, state :: State, }
spec Node2D.global_translate(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.look_at(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.move_local_x(delta :: float, scaled :: bool, ) :: {:ok :: label, state :: State, }
spec Node2D.move_local_y(delta :: float, scaled :: bool, ) :: {:ok :: label, state :: State, }
spec Node2D.rotate(radians :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_global_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.set_global_rotation(radians :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_global_rotation_degrees(degrees :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_global_scale(scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.set_global_skew(radians :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_global_transform(xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Node2D.set_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.set_rotation(radians :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_rotation_degrees(degrees :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_scale(scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.set_skew(radians :: float, ) :: {:ok :: label, state :: State, }
spec Node2D.set_transform(xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Node2D.to_global(local_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.to_local(global_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node2D.translate(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Node3D.add_gizmo(gizmo :: Node3DGizmo, ) :: {:ok :: label, state :: State, }
spec Node3D.clear_gizmos() :: {:ok :: label, state :: State, }
spec Node3D.clear_subgizmo_selection() :: {:ok :: label, state :: State, }
spec Node3D.force_update_transform() :: {:ok :: label, state :: State, }
spec Node3D.get_basis() :: {:ok :: label, state :: State, }
spec Node3D.get_gizmos() :: {:ok :: label, state :: State, }
spec Node3D.get_global_position() :: {:ok :: label, state :: State, }
spec Node3D.get_global_rotation() :: {:ok :: label, state :: State, }
spec Node3D.get_global_rotation_degrees() :: {:ok :: label, state :: State, }
spec Node3D.get_global_transform() :: {:ok :: label, state :: State, }
spec Node3D.get_parent_node_3d() :: {:ok :: label, state :: State, }
spec Node3D.get_position() :: {:ok :: label, state :: State, }
spec Node3D.get_quaternion() :: {:ok :: label, state :: State, }
spec Node3D.get_rotation() :: {:ok :: label, state :: State, }
spec Node3D.get_rotation_degrees() :: {:ok :: label, state :: State, }
spec Node3D.get_rotation_edit_mode() :: {:ok :: label, state :: State, }
spec Node3D.get_rotation_order() :: {:ok :: label, state :: State, }
spec Node3D.get_scale() :: {:ok :: label, state :: State, }
spec Node3D.get_transform() :: {:ok :: label, state :: State, }
spec Node3D.get_visibility_parent() :: {:ok :: label, state :: State, }
spec Node3D.get_world_3d() :: {:ok :: label, state :: State, }
spec Node3D.global_rotate(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, }
spec Node3D.global_scale(scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.global_translate(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.hide() :: {:ok :: label, state :: State, }
spec Node3D.is_local_transform_notification_enabled() :: {:ok :: label, state :: State, }
spec Node3D.is_scale_disabled() :: {:ok :: label, state :: State, }
spec Node3D.is_set_as_top_level() :: {:ok :: label, state :: State, }
spec Node3D.is_transform_notification_enabled() :: {:ok :: label, state :: State, }
spec Node3D.is_visible() :: {:ok :: label, state :: State, }
spec Node3D.is_visible_in_tree() :: {:ok :: label, state :: State, }
spec Node3D.look_at(target :: Vector3, up :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.look_at_from_position(position :: Vector3, target :: Vector3, up :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.orthonormalize() :: {:ok :: label, state :: State, }
spec Node3D.rotate(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, }
spec Node3D.rotate_object_local(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, }
spec Node3D.rotate_x(angle :: float, ) :: {:ok :: label, state :: State, }
spec Node3D.rotate_y(angle :: float, ) :: {:ok :: label, state :: State, }
spec Node3D.rotate_z(angle :: float, ) :: {:ok :: label, state :: State, }
spec Node3D.scale_object_local(scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_as_top_level(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node3D.set_basis(basis :: Basis, ) :: {:ok :: label, state :: State, }
spec Node3D.set_disable_scale(disable :: bool, ) :: {:ok :: label, state :: State, }
spec Node3D.set_global_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_global_rotation(euler_radians :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_global_rotation_degrees(euler_degrees :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_global_transform(global :: Transform3D, ) :: {:ok :: label, state :: State, }
spec Node3D.set_identity() :: {:ok :: label, state :: State, }
spec Node3D.set_ignore_transform_notification(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Node3D.set_notify_local_transform(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node3D.set_notify_transform(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Node3D.set_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_quaternion(quaternion :: Quaternion, ) :: {:ok :: label, state :: State, }
spec Node3D.set_rotation(euler_radians :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_rotation_degrees(euler_degrees :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_rotation_edit_mode(edit_mode :: enum::Node3D.RotationEditMode, ) :: {:ok :: label, state :: State, }
spec Node3D.set_rotation_order(order :: enum::EulerOrder, ) :: {:ok :: label, state :: State, }
spec Node3D.set_scale(scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.set_subgizmo_selection(gizmo :: Node3DGizmo, id :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec Node3D.set_transform(local :: Transform3D, ) :: {:ok :: label, state :: State, }
spec Node3D.set_visibility_parent(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Node3D.set_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec Node3D.show() :: {:ok :: label, state :: State, }
spec Node3D.to_global(local_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.to_local(global_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.translate(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.translate_object_local(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec Node3D.update_gizmos() :: {:ok :: label, state :: State, }
spec NodePath.get_as_property_path() :: {:ok :: label, state :: State, NodePath}
spec NodePath.get_concatenated_names() :: {:ok :: label, state :: State, StringName}
spec NodePath.get_concatenated_subnames() :: {:ok :: label, state :: State, StringName}
spec NodePath.get_name(idx :: int, ) :: {:ok :: label, state :: State, StringName}
spec NodePath.get_name_count() :: {:ok :: label, state :: State, int}
spec NodePath.get_subname(idx :: int, ) :: {:ok :: label, state :: State, StringName}
spec NodePath.get_subname_count() :: {:ok :: label, state :: State, int}
spec NodePath.hash() :: {:ok :: label, state :: State, int}
spec NodePath.is_absolute() :: {:ok :: label, state :: State, bool}
spec NodePath.is_empty() :: {:ok :: label, state :: State, bool}
spec Noise.get_image(width :: int, height :: int, invert :: bool, in_3d_space :: bool, normalize :: bool, ) :: {:ok :: label, state :: State, }
spec Noise.get_noise_1d(x :: float, ) :: {:ok :: label, state :: State, }
spec Noise.get_noise_2d(x :: float, y :: float, ) :: {:ok :: label, state :: State, }
spec Noise.get_noise_2dv(v :: Vector2, ) :: {:ok :: label, state :: State, }
spec Noise.get_noise_3d(x :: float, y :: float, z :: float, ) :: {:ok :: label, state :: State, }
spec Noise.get_noise_3dv(v :: Vector3, ) :: {:ok :: label, state :: State, }
spec Noise.get_seamless_image(width :: int, height :: int, invert :: bool, in_3d_space :: bool, skirt :: float, normalize :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.get_bump_strength() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.get_color_ramp() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.get_invert() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.get_noise() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.get_seamless() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.get_seamless_blend_skirt() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.is_generating_mipmaps() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.is_in_3d_space() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.is_normal_map() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.is_normalized() :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_as_normal_map(as_normal_map :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_bump_strength(bump_strength :: float, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_color_ramp(gradient :: Gradient, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_generate_mipmaps(invert :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_height(height :: int, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_in_3d_space(enable :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_invert(invert :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_noise(noise :: Noise, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_normalize(normalize :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_seamless(seamless :: bool, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_seamless_blend_skirt(seamless_blend_skirt :: float, ) :: {:ok :: label, state :: State, }
spec NoiseTexture2D.set_width(width :: int, ) :: {:ok :: label, state :: State, }
spec OS.alert(text :: String, title :: String, ) :: {:ok :: label, state :: State, }
spec OS.close_midi_inputs() :: {:ok :: label, state :: State, }
spec OS.crash(message :: String, ) :: {:ok :: label, state :: State, }
spec OS.create_instance(arguments :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec OS.create_process(path :: String, arguments :: PackedStringArray, open_console :: bool, ) :: {:ok :: label, state :: State, }
spec OS.delay_msec(msec :: int, ) :: {:ok :: label, state :: State, }
spec OS.delay_usec(usec :: int, ) :: {:ok :: label, state :: State, }
spec OS.execute(path :: String, arguments :: PackedStringArray, output :: Array, read_stderr :: bool, open_console :: bool, ) :: {:ok :: label, state :: State, }
spec OS.find_keycode_from_string(string :: String, ) :: {:ok :: label, state :: State, }
spec OS.get_cache_dir() :: {:ok :: label, state :: State, }
spec OS.get_cmdline_args() :: {:ok :: label, state :: State, }
spec OS.get_cmdline_user_args() :: {:ok :: label, state :: State, }
spec OS.get_config_dir() :: {:ok :: label, state :: State, }
spec OS.get_connected_midi_inputs() :: {:ok :: label, state :: State, }
spec OS.get_data_dir() :: {:ok :: label, state :: State, }
spec OS.get_distribution_name() :: {:ok :: label, state :: State, }
spec OS.get_environment(variable :: String, ) :: {:ok :: label, state :: State, }
spec OS.get_executable_path() :: {:ok :: label, state :: State, }
spec OS.get_granted_permissions() :: {:ok :: label, state :: State, }
spec OS.get_keycode_string(code :: enum::Key, ) :: {:ok :: label, state :: State, }
spec OS.get_locale() :: {:ok :: label, state :: State, }
spec OS.get_locale_language() :: {:ok :: label, state :: State, }
spec OS.get_low_processor_usage_mode_sleep_usec() :: {:ok :: label, state :: State, }
spec OS.get_main_thread_id() :: {:ok :: label, state :: State, }
spec OS.get_model_name() :: {:ok :: label, state :: State, }
spec OS.get_name() :: {:ok :: label, state :: State, }
spec OS.get_process_id() :: {:ok :: label, state :: State, }
spec OS.get_processor_count() :: {:ok :: label, state :: State, }
spec OS.get_processor_name() :: {:ok :: label, state :: State, }
spec OS.get_restart_on_exit_arguments() :: {:ok :: label, state :: State, }
spec OS.get_static_memory_peak_usage() :: {:ok :: label, state :: State, }
spec OS.get_static_memory_usage() :: {:ok :: label, state :: State, }
spec OS.get_system_dir(dir :: enum::OS.SystemDir, shared_storage :: bool, ) :: {:ok :: label, state :: State, }
spec OS.get_system_font_path(font_name :: String, weight :: int, stretch :: int, italic :: bool, ) :: {:ok :: label, state :: State, }
spec OS.get_system_font_path_for_text(font_name :: String, text :: String, locale :: String, script :: String, weight :: int, stretch :: int, italic :: bool, ) :: {:ok :: label, state :: State, }
spec OS.get_system_fonts() :: {:ok :: label, state :: State, }
spec OS.get_thread_caller_id() :: {:ok :: label, state :: State, }
spec OS.get_unique_id() :: {:ok :: label, state :: State, }
spec OS.get_user_data_dir() :: {:ok :: label, state :: State, }
spec OS.get_version() :: {:ok :: label, state :: State, }
spec OS.get_video_adapter_driver_info() :: {:ok :: label, state :: State, }
spec OS.has_environment(variable :: String, ) :: {:ok :: label, state :: State, }
spec OS.has_feature(tag_name :: String, ) :: {:ok :: label, state :: State, }
spec OS.is_debug_build() :: {:ok :: label, state :: State, }
spec OS.is_in_low_processor_usage_mode() :: {:ok :: label, state :: State, }
spec OS.is_keycode_unicode(code :: int, ) :: {:ok :: label, state :: State, }
spec OS.is_process_running(pid :: int, ) :: {:ok :: label, state :: State, }
spec OS.is_restart_on_exit_set() :: {:ok :: label, state :: State, }
spec OS.is_stdout_verbose() :: {:ok :: label, state :: State, }
spec OS.is_userfs_persistent() :: {:ok :: label, state :: State, }
spec OS.kill(pid :: int, ) :: {:ok :: label, state :: State, }
spec OS.move_to_trash(path :: String, ) :: {:ok :: label, state :: State, }
spec OS.open_midi_inputs() :: {:ok :: label, state :: State, }
spec OS.read_string_from_stdin() :: {:ok :: label, state :: State, }
spec OS.request_permission(name :: String, ) :: {:ok :: label, state :: State, }
spec OS.request_permissions() :: {:ok :: label, state :: State, }
spec OS.set_environment(variable :: String, value :: String, ) :: {:ok :: label, state :: State, }
spec OS.set_low_processor_usage_mode(enable :: bool, ) :: {:ok :: label, state :: State, }
spec OS.set_low_processor_usage_mode_sleep_usec(usec :: int, ) :: {:ok :: label, state :: State, }
spec OS.set_restart_on_exit(restart :: bool, arguments :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec OS.set_thread_name(name :: String, ) :: {:ok :: label, state :: State, }
spec OS.set_use_file_access_save_and_swap(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec OS.shell_open(uri :: String, ) :: {:ok :: label, state :: State, }
spec OS.unset_environment(variable :: String, ) :: {:ok :: label, state :: State, }
spec Object.add_user_signal(signal :: String, arguments :: Array, ) :: {:ok :: label, state :: State, }
spec Object.call(method :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.call_deferred(method :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.callv(method :: StringName, arg_array :: Array, ) :: {:ok :: label, state :: State, }
spec Object.can_translate_messages() :: {:ok :: label, state :: State, }
spec Object.connect(signal :: StringName, callable :: Callable, flags :: int, ) :: {:ok :: label, state :: State, }
spec Object.disconnect(signal :: StringName, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec Object.emit_signal(signal :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.get(property :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.get_class() :: {:ok :: label, state :: State, }
spec Object.get_incoming_connections() :: {:ok :: label, state :: State, }
spec Object.get_indexed(property_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Object.get_instance_id() :: {:ok :: label, state :: State, }
spec Object.get_meta(name :: StringName, default :: Variant, ) :: {:ok :: label, state :: State, }
spec Object.get_meta_list() :: {:ok :: label, state :: State, }
spec Object.get_method_list() :: {:ok :: label, state :: State, }
spec Object.get_property_list() :: {:ok :: label, state :: State, }
spec Object.get_script() :: {:ok :: label, state :: State, }
spec Object.get_signal_connection_list(signal :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.get_signal_list() :: {:ok :: label, state :: State, }
spec Object.has_meta(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.has_method(method :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.has_signal(signal :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.has_user_signal(signal :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.is_blocking_signals() :: {:ok :: label, state :: State, }
spec Object.is_class(class :: String, ) :: {:ok :: label, state :: State, }
spec Object.is_connected(signal :: StringName, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec Object.is_queued_for_deletion() :: {:ok :: label, state :: State, }
spec Object.notification(what :: int, reversed :: bool, ) :: {:ok :: label, state :: State, }
spec Object.notify_property_list_changed() :: {:ok :: label, state :: State, }
spec Object.property_can_revert(property :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.property_get_revert(property :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.remove_meta(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.set(property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Object.set_block_signals(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Object.set_deferred(property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Object.set_indexed(property_path :: NodePath, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Object.set_message_translation(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Object.set_meta(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Object.set_script(script :: Variant, ) :: {:ok :: label, state :: State, }
spec Object.to_string() :: {:ok :: label, state :: State, }
spec Object.tr(message :: StringName, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Object.tr_n(message :: StringName, plural_message :: StringName, n :: int, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Occluder3D.get_indices() :: {:ok :: label, state :: State, }
spec Occluder3D.get_vertices() :: {:ok :: label, state :: State, }
spec OccluderInstance3D.get_bake_mask() :: {:ok :: label, state :: State, }
spec OccluderInstance3D.get_bake_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec OccluderInstance3D.get_bake_simplification_distance() :: {:ok :: label, state :: State, }
spec OccluderInstance3D.get_occluder() :: {:ok :: label, state :: State, }
spec OccluderInstance3D.set_bake_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec OccluderInstance3D.set_bake_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec OccluderInstance3D.set_bake_simplification_distance(simplification_distance :: float, ) :: {:ok :: label, state :: State, }
spec OccluderInstance3D.set_occluder(occluder :: Occluder3D, ) :: {:ok :: label, state :: State, }
spec OccluderPolygon2D.get_cull_mode() :: {:ok :: label, state :: State, }
spec OccluderPolygon2D.get_polygon() :: {:ok :: label, state :: State, }
spec OccluderPolygon2D.is_closed() :: {:ok :: label, state :: State, }
spec OccluderPolygon2D.set_closed(closed :: bool, ) :: {:ok :: label, state :: State, }
spec OccluderPolygon2D.set_cull_mode(cull_mode :: enum::OccluderPolygon2D.CullMode, ) :: {:ok :: label, state :: State, }
spec OccluderPolygon2D.set_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec OggPacketSequence.get_length() :: {:ok :: label, state :: State, }
spec OggPacketSequence.get_packet_data() :: {:ok :: label, state :: State, }
spec OggPacketSequence.get_packet_granule_positions() :: {:ok :: label, state :: State, }
spec OggPacketSequence.get_sampling_rate() :: {:ok :: label, state :: State, }
spec OggPacketSequence.set_packet_data(packet_data :: typedarray::Array, ) :: {:ok :: label, state :: State, }
spec OggPacketSequence.set_packet_granule_positions(granule_positions :: PackedInt64Array, ) :: {:ok :: label, state :: State, }
spec OggPacketSequence.set_sampling_rate(sampling_rate :: float, ) :: {:ok :: label, state :: State, }
spec OmniLight3D.get_shadow_mode() :: {:ok :: label, state :: State, }
spec OmniLight3D.set_shadow_mode(mode :: enum::OmniLight3D.ShadowMode, ) :: {:ok :: label, state :: State, }
spec OpenXRAction.get_action_type() :: {:ok :: label, state :: State, }
spec OpenXRAction.get_localized_name() :: {:ok :: label, state :: State, }
spec OpenXRAction.get_toplevel_paths() :: {:ok :: label, state :: State, }
spec OpenXRAction.set_action_type(action_type :: enum::OpenXRAction.ActionType, ) :: {:ok :: label, state :: State, }
spec OpenXRAction.set_localized_name(localized_name :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRAction.set_toplevel_paths(toplevel_paths :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.add_action_set(action_set :: OpenXRActionSet, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.add_interaction_profile(interaction_profile :: OpenXRInteractionProfile, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.create_default_action_sets() :: {:ok :: label, state :: State, }
spec OpenXRActionMap.find_action_set(name :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.find_interaction_profile(name :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.get_action_set(idx :: int, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.get_action_set_count() :: {:ok :: label, state :: State, }
spec OpenXRActionMap.get_action_sets() :: {:ok :: label, state :: State, }
spec OpenXRActionMap.get_interaction_profile(idx :: int, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.get_interaction_profile_count() :: {:ok :: label, state :: State, }
spec OpenXRActionMap.get_interaction_profiles() :: {:ok :: label, state :: State, }
spec OpenXRActionMap.remove_action_set(action_set :: OpenXRActionSet, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.remove_interaction_profile(interaction_profile :: OpenXRInteractionProfile, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.set_action_sets(action_sets :: Array, ) :: {:ok :: label, state :: State, }
spec OpenXRActionMap.set_interaction_profiles(interaction_profiles :: Array, ) :: {:ok :: label, state :: State, }
spec OpenXRActionSet.add_action(action :: OpenXRAction, ) :: {:ok :: label, state :: State, }
spec OpenXRActionSet.get_action_count() :: {:ok :: label, state :: State, }
spec OpenXRActionSet.get_actions() :: {:ok :: label, state :: State, }
spec OpenXRActionSet.get_localized_name() :: {:ok :: label, state :: State, }
spec OpenXRActionSet.get_priority() :: {:ok :: label, state :: State, }
spec OpenXRActionSet.remove_action(action :: OpenXRAction, ) :: {:ok :: label, state :: State, }
spec OpenXRActionSet.set_actions(actions :: Array, ) :: {:ok :: label, state :: State, }
spec OpenXRActionSet.set_localized_name(localized_name :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRActionSet.set_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec OpenXRHand.get_hand() :: {:ok :: label, state :: State, }
spec OpenXRHand.get_hand_skeleton() :: {:ok :: label, state :: State, }
spec OpenXRHand.get_motion_range() :: {:ok :: label, state :: State, }
spec OpenXRHand.set_hand(hand :: enum::OpenXRHand.Hands, ) :: {:ok :: label, state :: State, }
spec OpenXRHand.set_hand_skeleton(hand_skeleton :: NodePath, ) :: {:ok :: label, state :: State, }
spec OpenXRHand.set_motion_range(motion_range :: enum::OpenXRHand.MotionRange, ) :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.add_path(path :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.get_action() :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.get_path_count() :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.get_paths() :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.has_path(path :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.remove_path(path :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.set_action(action :: OpenXRAction, ) :: {:ok :: label, state :: State, }
spec OpenXRIPBinding.set_paths(paths :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec OpenXRInteractionProfile.get_binding(index :: int, ) :: {:ok :: label, state :: State, }
spec OpenXRInteractionProfile.get_binding_count() :: {:ok :: label, state :: State, }
spec OpenXRInteractionProfile.get_bindings() :: {:ok :: label, state :: State, }
spec OpenXRInteractionProfile.get_interaction_profile_path() :: {:ok :: label, state :: State, }
spec OpenXRInteractionProfile.set_bindings(bindings :: Array, ) :: {:ok :: label, state :: State, }
spec OpenXRInteractionProfile.set_interaction_profile_path(interaction_profile_path :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRInterface.get_action_sets() :: {:ok :: label, state :: State, }
spec OpenXRInterface.get_available_display_refresh_rates() :: {:ok :: label, state :: State, }
spec OpenXRInterface.get_display_refresh_rate() :: {:ok :: label, state :: State, }
spec OpenXRInterface.is_action_set_active(name :: String, ) :: {:ok :: label, state :: State, }
spec OpenXRInterface.set_action_set_active(name :: String, active :: bool, ) :: {:ok :: label, state :: State, }
spec OpenXRInterface.set_display_refresh_rate(refresh_rate :: float, ) :: {:ok :: label, state :: State, }
spec OptimizedTranslation.generate(from :: Translation, ) :: {:ok :: label, state :: State, }
spec OptionButton.add_icon_item(texture :: Texture2D, label :: String, id :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.add_item(label :: String, id :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.add_separator(text :: String, ) :: {:ok :: label, state :: State, }
spec OptionButton.clear() :: {:ok :: label, state :: State, }
spec OptionButton.get_item_count() :: {:ok :: label, state :: State, }
spec OptionButton.get_item_icon(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_item_id(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_item_index(id :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_item_metadata(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_item_text(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_item_tooltip(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_popup() :: {:ok :: label, state :: State, }
spec OptionButton.get_selectable_item(from_last :: bool, ) :: {:ok :: label, state :: State, }
spec OptionButton.get_selected() :: {:ok :: label, state :: State, }
spec OptionButton.get_selected_id() :: {:ok :: label, state :: State, }
spec OptionButton.get_selected_metadata() :: {:ok :: label, state :: State, }
spec OptionButton.has_selectable_items() :: {:ok :: label, state :: State, }
spec OptionButton.is_fit_to_longest_item() :: {:ok :: label, state :: State, }
spec OptionButton.is_item_disabled(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.is_item_separator(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.remove_item(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.select(idx :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_fit_to_longest_item(fit :: bool, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_count(count :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_disabled(idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_icon(idx :: int, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_id(idx :: int, id :: int, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_metadata(idx :: int, metadata :: Variant, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_text(idx :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec OptionButton.set_item_tooltip(idx :: int, tooltip :: String, ) :: {:ok :: label, state :: State, }
spec OptionButton.show_popup() :: {:ok :: label, state :: State, }
spec PCKPacker.add_file(pck_path :: String, source_path :: String, encrypt :: bool, ) :: {:ok :: label, state :: State, }
spec PCKPacker.flush(verbose :: bool, ) :: {:ok :: label, state :: State, }
spec PCKPacker.pck_start(pck_name :: String, alignment :: int, key :: String, encrypt_directory :: bool, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.append(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedByteArray.append_array(array :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.bsearch(value :: int, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.clear() :: {:ok :: label, state :: State, }
spec PackedByteArray.compress(compression_mode :: int, ) :: {:ok :: label, state :: State, PackedByteArray}
spec PackedByteArray.count(value :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_double(byte_offset :: int, ) :: {:ok :: label, state :: State, float}
spec PackedByteArray.decode_float(byte_offset :: int, ) :: {:ok :: label, state :: State, float}
spec PackedByteArray.decode_half(byte_offset :: int, ) :: {:ok :: label, state :: State, float}
spec PackedByteArray.decode_s16(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_s32(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_s64(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_s8(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_u16(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_u32(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_u64(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_u8(byte_offset :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decode_var(byte_offset :: int, allow_objects :: bool, ) :: {:ok :: label, state :: State, Variant}
spec PackedByteArray.decode_var_size(byte_offset :: int, allow_objects :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.decompress(buffer_size :: int, compression_mode :: int, ) :: {:ok :: label, state :: State, PackedByteArray}
spec PackedByteArray.decompress_dynamic(max_output_size :: int, compression_mode :: int, ) :: {:ok :: label, state :: State, PackedByteArray}
spec PackedByteArray.duplicate() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedByteArray.encode_double(byte_offset :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_float(byte_offset :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_half(byte_offset :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_s16(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_s32(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_s64(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_s8(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_u16(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_u32(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_u64(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_u8(byte_offset :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.encode_var(byte_offset :: int, value :: Variant, allow_objects :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.fill(value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.find(value :: int, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.get_string_from_ascii() :: {:ok :: label, state :: State, String}
spec PackedByteArray.get_string_from_utf16() :: {:ok :: label, state :: State, String}
spec PackedByteArray.get_string_from_utf32() :: {:ok :: label, state :: State, String}
spec PackedByteArray.get_string_from_utf8() :: {:ok :: label, state :: State, String}
spec PackedByteArray.has(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedByteArray.has_encoded_var(byte_offset :: int, allow_objects :: bool, ) :: {:ok :: label, state :: State, bool}
spec PackedByteArray.hex_encode() :: {:ok :: label, state :: State, String}
spec PackedByteArray.insert(at_index :: int, value :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedByteArray.push_back(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedByteArray.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.reverse() :: {:ok :: label, state :: State, }
spec PackedByteArray.rfind(value :: int, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedByteArray.set(index :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedByteArray.size() :: {:ok :: label, state :: State, int}
spec PackedByteArray.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedByteArray}
spec PackedByteArray.sort() :: {:ok :: label, state :: State, }
spec PackedByteArray.to_float32_array() :: {:ok :: label, state :: State, PackedFloat32Array}
spec PackedByteArray.to_float64_array() :: {:ok :: label, state :: State, PackedFloat64Array}
spec PackedByteArray.to_int32_array() :: {:ok :: label, state :: State, PackedInt32Array}
spec PackedByteArray.to_int64_array() :: {:ok :: label, state :: State, PackedInt64Array}
spec PackedColorArray.append(value :: Color, ) :: {:ok :: label, state :: State, bool}
spec PackedColorArray.append_array(array :: PackedColorArray, ) :: {:ok :: label, state :: State, }
spec PackedColorArray.bsearch(value :: Color, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedColorArray.clear() :: {:ok :: label, state :: State, }
spec PackedColorArray.count(value :: Color, ) :: {:ok :: label, state :: State, int}
spec PackedColorArray.duplicate() :: {:ok :: label, state :: State, PackedColorArray}
spec PackedColorArray.fill(value :: Color, ) :: {:ok :: label, state :: State, }
spec PackedColorArray.find(value :: Color, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedColorArray.has(value :: Color, ) :: {:ok :: label, state :: State, bool}
spec PackedColorArray.insert(at_index :: int, value :: Color, ) :: {:ok :: label, state :: State, int}
spec PackedColorArray.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedColorArray.push_back(value :: Color, ) :: {:ok :: label, state :: State, bool}
spec PackedColorArray.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedColorArray.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedColorArray.reverse() :: {:ok :: label, state :: State, }
spec PackedColorArray.rfind(value :: Color, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedColorArray.set(index :: int, value :: Color, ) :: {:ok :: label, state :: State, }
spec PackedColorArray.size() :: {:ok :: label, state :: State, int}
spec PackedColorArray.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedColorArray}
spec PackedColorArray.sort() :: {:ok :: label, state :: State, }
spec PackedColorArray.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedDataContainer.pack(value :: Variant, ) :: {:ok :: label, state :: State, }
spec PackedDataContainer.size() :: {:ok :: label, state :: State, }
spec PackedDataContainerRef.size() :: {:ok :: label, state :: State, }
spec PackedFloat32Array.append(value :: float, ) :: {:ok :: label, state :: State, bool}
spec PackedFloat32Array.append_array(array :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec PackedFloat32Array.bsearch(value :: float, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.clear() :: {:ok :: label, state :: State, }
spec PackedFloat32Array.count(value :: float, ) :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.duplicate() :: {:ok :: label, state :: State, PackedFloat32Array}
spec PackedFloat32Array.fill(value :: float, ) :: {:ok :: label, state :: State, }
spec PackedFloat32Array.find(value :: float, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.has(value :: float, ) :: {:ok :: label, state :: State, bool}
spec PackedFloat32Array.insert(at_index :: int, value :: float, ) :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedFloat32Array.push_back(value :: float, ) :: {:ok :: label, state :: State, bool}
spec PackedFloat32Array.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedFloat32Array.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.reverse() :: {:ok :: label, state :: State, }
spec PackedFloat32Array.rfind(value :: float, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.set(index :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec PackedFloat32Array.size() :: {:ok :: label, state :: State, int}
spec PackedFloat32Array.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedFloat32Array}
spec PackedFloat32Array.sort() :: {:ok :: label, state :: State, }
spec PackedFloat32Array.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedFloat64Array.append(value :: float, ) :: {:ok :: label, state :: State, bool}
spec PackedFloat64Array.append_array(array :: PackedFloat64Array, ) :: {:ok :: label, state :: State, }
spec PackedFloat64Array.bsearch(value :: float, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.clear() :: {:ok :: label, state :: State, }
spec PackedFloat64Array.count(value :: float, ) :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.duplicate() :: {:ok :: label, state :: State, PackedFloat64Array}
spec PackedFloat64Array.fill(value :: float, ) :: {:ok :: label, state :: State, }
spec PackedFloat64Array.find(value :: float, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.has(value :: float, ) :: {:ok :: label, state :: State, bool}
spec PackedFloat64Array.insert(at_index :: int, value :: float, ) :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedFloat64Array.push_back(value :: float, ) :: {:ok :: label, state :: State, bool}
spec PackedFloat64Array.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedFloat64Array.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.reverse() :: {:ok :: label, state :: State, }
spec PackedFloat64Array.rfind(value :: float, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.set(index :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec PackedFloat64Array.size() :: {:ok :: label, state :: State, int}
spec PackedFloat64Array.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedFloat64Array}
spec PackedFloat64Array.sort() :: {:ok :: label, state :: State, }
spec PackedFloat64Array.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedInt32Array.append(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedInt32Array.append_array(array :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec PackedInt32Array.bsearch(value :: int, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedInt32Array.clear() :: {:ok :: label, state :: State, }
spec PackedInt32Array.count(value :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt32Array.duplicate() :: {:ok :: label, state :: State, PackedInt32Array}
spec PackedInt32Array.fill(value :: int, ) :: {:ok :: label, state :: State, }
spec PackedInt32Array.find(value :: int, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt32Array.has(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedInt32Array.insert(at_index :: int, value :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt32Array.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedInt32Array.push_back(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedInt32Array.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedInt32Array.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt32Array.reverse() :: {:ok :: label, state :: State, }
spec PackedInt32Array.rfind(value :: int, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt32Array.set(index :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedInt32Array.size() :: {:ok :: label, state :: State, int}
spec PackedInt32Array.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedInt32Array}
spec PackedInt32Array.sort() :: {:ok :: label, state :: State, }
spec PackedInt32Array.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedInt64Array.append(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedInt64Array.append_array(array :: PackedInt64Array, ) :: {:ok :: label, state :: State, }
spec PackedInt64Array.bsearch(value :: int, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedInt64Array.clear() :: {:ok :: label, state :: State, }
spec PackedInt64Array.count(value :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt64Array.duplicate() :: {:ok :: label, state :: State, PackedInt64Array}
spec PackedInt64Array.fill(value :: int, ) :: {:ok :: label, state :: State, }
spec PackedInt64Array.find(value :: int, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt64Array.has(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedInt64Array.insert(at_index :: int, value :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt64Array.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedInt64Array.push_back(value :: int, ) :: {:ok :: label, state :: State, bool}
spec PackedInt64Array.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedInt64Array.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt64Array.reverse() :: {:ok :: label, state :: State, }
spec PackedInt64Array.rfind(value :: int, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedInt64Array.set(index :: int, value :: int, ) :: {:ok :: label, state :: State, }
spec PackedInt64Array.size() :: {:ok :: label, state :: State, int}
spec PackedInt64Array.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedInt64Array}
spec PackedInt64Array.sort() :: {:ok :: label, state :: State, }
spec PackedInt64Array.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedScene.can_instantiate() :: {:ok :: label, state :: State, }
spec PackedScene.get_state() :: {:ok :: label, state :: State, }
spec PackedScene.instantiate(edit_state :: enum::PackedScene.GenEditState, ) :: {:ok :: label, state :: State, }
spec PackedScene.pack(path :: Node, ) :: {:ok :: label, state :: State, }
spec PackedStringArray.append(value :: String, ) :: {:ok :: label, state :: State, bool}
spec PackedStringArray.append_array(array :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec PackedStringArray.bsearch(value :: String, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedStringArray.clear() :: {:ok :: label, state :: State, }
spec PackedStringArray.count(value :: String, ) :: {:ok :: label, state :: State, int}
spec PackedStringArray.duplicate() :: {:ok :: label, state :: State, PackedStringArray}
spec PackedStringArray.fill(value :: String, ) :: {:ok :: label, state :: State, }
spec PackedStringArray.find(value :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedStringArray.has(value :: String, ) :: {:ok :: label, state :: State, bool}
spec PackedStringArray.insert(at_index :: int, value :: String, ) :: {:ok :: label, state :: State, int}
spec PackedStringArray.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedStringArray.push_back(value :: String, ) :: {:ok :: label, state :: State, bool}
spec PackedStringArray.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedStringArray.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedStringArray.reverse() :: {:ok :: label, state :: State, }
spec PackedStringArray.rfind(value :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedStringArray.set(index :: int, value :: String, ) :: {:ok :: label, state :: State, }
spec PackedStringArray.size() :: {:ok :: label, state :: State, int}
spec PackedStringArray.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedStringArray}
spec PackedStringArray.sort() :: {:ok :: label, state :: State, }
spec PackedStringArray.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedVector2Array.append(value :: Vector2, ) :: {:ok :: label, state :: State, bool}
spec PackedVector2Array.append_array(array :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec PackedVector2Array.bsearch(value :: Vector2, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedVector2Array.clear() :: {:ok :: label, state :: State, }
spec PackedVector2Array.count(value :: Vector2, ) :: {:ok :: label, state :: State, int}
spec PackedVector2Array.duplicate() :: {:ok :: label, state :: State, PackedVector2Array}
spec PackedVector2Array.fill(value :: Vector2, ) :: {:ok :: label, state :: State, }
spec PackedVector2Array.find(value :: Vector2, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedVector2Array.has(value :: Vector2, ) :: {:ok :: label, state :: State, bool}
spec PackedVector2Array.insert(at_index :: int, value :: Vector2, ) :: {:ok :: label, state :: State, int}
spec PackedVector2Array.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedVector2Array.push_back(value :: Vector2, ) :: {:ok :: label, state :: State, bool}
spec PackedVector2Array.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedVector2Array.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedVector2Array.reverse() :: {:ok :: label, state :: State, }
spec PackedVector2Array.rfind(value :: Vector2, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedVector2Array.set(index :: int, value :: Vector2, ) :: {:ok :: label, state :: State, }
spec PackedVector2Array.size() :: {:ok :: label, state :: State, int}
spec PackedVector2Array.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedVector2Array}
spec PackedVector2Array.sort() :: {:ok :: label, state :: State, }
spec PackedVector2Array.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PackedVector3Array.append(value :: Vector3, ) :: {:ok :: label, state :: State, bool}
spec PackedVector3Array.append_array(array :: PackedVector3Array, ) :: {:ok :: label, state :: State, }
spec PackedVector3Array.bsearch(value :: Vector3, before :: bool, ) :: {:ok :: label, state :: State, int}
spec PackedVector3Array.clear() :: {:ok :: label, state :: State, }
spec PackedVector3Array.count(value :: Vector3, ) :: {:ok :: label, state :: State, int}
spec PackedVector3Array.duplicate() :: {:ok :: label, state :: State, PackedVector3Array}
spec PackedVector3Array.fill(value :: Vector3, ) :: {:ok :: label, state :: State, }
spec PackedVector3Array.find(value :: Vector3, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedVector3Array.has(value :: Vector3, ) :: {:ok :: label, state :: State, bool}
spec PackedVector3Array.insert(at_index :: int, value :: Vector3, ) :: {:ok :: label, state :: State, int}
spec PackedVector3Array.is_empty() :: {:ok :: label, state :: State, bool}
spec PackedVector3Array.push_back(value :: Vector3, ) :: {:ok :: label, state :: State, bool}
spec PackedVector3Array.remove_at(index :: int, ) :: {:ok :: label, state :: State, }
spec PackedVector3Array.resize(new_size :: int, ) :: {:ok :: label, state :: State, int}
spec PackedVector3Array.reverse() :: {:ok :: label, state :: State, }
spec PackedVector3Array.rfind(value :: Vector3, from :: int, ) :: {:ok :: label, state :: State, int}
spec PackedVector3Array.set(index :: int, value :: Vector3, ) :: {:ok :: label, state :: State, }
spec PackedVector3Array.size() :: {:ok :: label, state :: State, int}
spec PackedVector3Array.slice(begin :: int, end :: int, ) :: {:ok :: label, state :: State, PackedVector3Array}
spec PackedVector3Array.sort() :: {:ok :: label, state :: State, }
spec PackedVector3Array.to_byte_array() :: {:ok :: label, state :: State, PackedByteArray}
spec PacketPeer.get_available_packet_count() :: {:ok :: label, state :: State, }
spec PacketPeer.get_encode_buffer_max_size() :: {:ok :: label, state :: State, }
spec PacketPeer.get_packet() :: {:ok :: label, state :: State, }
spec PacketPeer.get_packet_error() :: {:ok :: label, state :: State, }
spec PacketPeer.get_var(allow_objects :: bool, ) :: {:ok :: label, state :: State, }
spec PacketPeer.put_packet(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec PacketPeer.put_var(var :: Variant, full_objects :: bool, ) :: {:ok :: label, state :: State, }
spec PacketPeer.set_encode_buffer_max_size(max_size :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerDTLS.connect_to_peer(packet_peer :: PacketPeerUDP, hostname :: String, client_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec PacketPeerDTLS.disconnect_from_peer() :: {:ok :: label, state :: State, }
spec PacketPeerDTLS.get_status() :: {:ok :: label, state :: State, }
spec PacketPeerDTLS.poll() :: {:ok :: label, state :: State, }
spec PacketPeerExtension._get_available_packet_count() :: {:ok :: label, state :: State, }
spec PacketPeerExtension._get_max_packet_size() :: {:ok :: label, state :: State, }
spec PacketPeerExtension._get_packet(r_buffer :: const uint8_t **, r_buffer_size :: int32_t*, ) :: {:ok :: label, state :: State, }
spec PacketPeerExtension._put_packet(p_buffer :: const uint8_t*, p_buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerStream.get_input_buffer_max_size() :: {:ok :: label, state :: State, }
spec PacketPeerStream.get_output_buffer_max_size() :: {:ok :: label, state :: State, }
spec PacketPeerStream.get_stream_peer() :: {:ok :: label, state :: State, }
spec PacketPeerStream.set_input_buffer_max_size(max_size_bytes :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerStream.set_output_buffer_max_size(max_size_bytes :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerStream.set_stream_peer(peer :: StreamPeer, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.bind(port :: int, bind_address :: String, recv_buf_size :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.close() :: {:ok :: label, state :: State, }
spec PacketPeerUDP.connect_to_host(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.get_local_port() :: {:ok :: label, state :: State, }
spec PacketPeerUDP.get_packet_ip() :: {:ok :: label, state :: State, }
spec PacketPeerUDP.get_packet_port() :: {:ok :: label, state :: State, }
spec PacketPeerUDP.is_bound() :: {:ok :: label, state :: State, }
spec PacketPeerUDP.is_socket_connected() :: {:ok :: label, state :: State, }
spec PacketPeerUDP.join_multicast_group(multicast_address :: String, interface_name :: String, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.leave_multicast_group(multicast_address :: String, interface_name :: String, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.set_broadcast_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.set_dest_address(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec PacketPeerUDP.wait() :: {:ok :: label, state :: State, }
spec PanoramaSkyMaterial.get_panorama() :: {:ok :: label, state :: State, }
spec PanoramaSkyMaterial.is_filtering_enabled() :: {:ok :: label, state :: State, }
spec PanoramaSkyMaterial.set_filtering_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PanoramaSkyMaterial.set_panorama(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParallaxBackground.get_limit_begin() :: {:ok :: label, state :: State, }
spec ParallaxBackground.get_limit_end() :: {:ok :: label, state :: State, }
spec ParallaxBackground.get_scroll_base_offset() :: {:ok :: label, state :: State, }
spec ParallaxBackground.get_scroll_base_scale() :: {:ok :: label, state :: State, }
spec ParallaxBackground.get_scroll_offset() :: {:ok :: label, state :: State, }
spec ParallaxBackground.is_ignore_camera_zoom() :: {:ok :: label, state :: State, }
spec ParallaxBackground.set_ignore_camera_zoom(ignore :: bool, ) :: {:ok :: label, state :: State, }
spec ParallaxBackground.set_limit_begin(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxBackground.set_limit_end(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxBackground.set_scroll_base_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxBackground.set_scroll_base_scale(scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxBackground.set_scroll_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxLayer.get_mirroring() :: {:ok :: label, state :: State, }
spec ParallaxLayer.get_motion_offset() :: {:ok :: label, state :: State, }
spec ParallaxLayer.get_motion_scale() :: {:ok :: label, state :: State, }
spec ParallaxLayer.set_mirroring(mirror :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxLayer.set_motion_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParallaxLayer.set_motion_scale(scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_collision_bounce() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_collision_friction() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_collision_mode() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_color() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_color_initial_ramp() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_color_ramp() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_direction() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_box_extents() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_color_texture() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_normal_texture() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_point_count() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_point_texture() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_ring_axis() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_ring_height() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_ring_inner_radius() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_ring_radius() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_shape() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_emission_sphere_radius() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_flatness() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_gravity() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_lifetime_randomness() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_param_max(param :: enum::ParticleProcessMaterial.Parameter, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_param_min(param :: enum::ParticleProcessMaterial.Parameter, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_param_texture(param :: enum::ParticleProcessMaterial.Parameter, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_particle_flag(particle_flag :: enum::ParticleProcessMaterial.ParticleFlags, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_spread() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_sub_emitter_amount_at_collision() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_sub_emitter_amount_at_end() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_sub_emitter_frequency() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_sub_emitter_keep_velocity() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_sub_emitter_mode() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_turbulence_enabled() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_turbulence_noise_scale() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_turbulence_noise_speed() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_turbulence_noise_speed_random() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.get_turbulence_noise_strength() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.is_attractor_interaction_enabled() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.is_collision_using_scale() :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_attractor_interaction_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_collision_bounce(bounce :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_collision_friction(friction :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_collision_mode(mode :: enum::ParticleProcessMaterial.CollisionMode, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_collision_use_scale(radius :: bool, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_color_initial_ramp(ramp :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_color_ramp(ramp :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_direction(degrees :: Vector3, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_box_extents(extents :: Vector3, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_color_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_normal_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_point_count(point_count :: int, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_point_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_ring_axis(axis :: Vector3, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_ring_height(height :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_ring_inner_radius(inner_radius :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_ring_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_shape(shape :: enum::ParticleProcessMaterial.EmissionShape, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_emission_sphere_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_flatness(amount :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_gravity(accel_vec :: Vector3, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_lifetime_randomness(randomness :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_param_max(param :: enum::ParticleProcessMaterial.Parameter, value :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_param_min(param :: enum::ParticleProcessMaterial.Parameter, value :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_param_texture(param :: enum::ParticleProcessMaterial.Parameter, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_particle_flag(particle_flag :: enum::ParticleProcessMaterial.ParticleFlags, enable :: bool, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_spread(degrees :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_sub_emitter_amount_at_collision(amount :: int, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_sub_emitter_amount_at_end(amount :: int, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_sub_emitter_frequency(hz :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_sub_emitter_keep_velocity(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_sub_emitter_mode(mode :: enum::ParticleProcessMaterial.SubEmitterMode, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_turbulence_enabled(turbulence_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_turbulence_noise_scale(turbulence_noise_scale :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_turbulence_noise_speed(turbulence_noise_speed :: Vector3, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_turbulence_noise_speed_random(turbulence_noise_speed_random :: float, ) :: {:ok :: label, state :: State, }
spec ParticleProcessMaterial.set_turbulence_noise_strength(turbulence_noise_strength :: float, ) :: {:ok :: label, state :: State, }
spec Path2D.get_curve() :: {:ok :: label, state :: State, }
spec Path2D.set_curve(curve :: Curve2D, ) :: {:ok :: label, state :: State, }
spec Path3D.get_curve() :: {:ok :: label, state :: State, }
spec Path3D.set_curve(curve :: Curve3D, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.get_cubic_interpolation() :: {:ok :: label, state :: State, }
spec PathFollow2D.get_h_offset() :: {:ok :: label, state :: State, }
spec PathFollow2D.get_lookahead() :: {:ok :: label, state :: State, }
spec PathFollow2D.get_progress() :: {:ok :: label, state :: State, }
spec PathFollow2D.get_progress_ratio() :: {:ok :: label, state :: State, }
spec PathFollow2D.get_v_offset() :: {:ok :: label, state :: State, }
spec PathFollow2D.has_loop() :: {:ok :: label, state :: State, }
spec PathFollow2D.is_rotating() :: {:ok :: label, state :: State, }
spec PathFollow2D.set_cubic_interpolation(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_h_offset(h_offset :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_lookahead(lookahead :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_loop(loop :: bool, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_progress(progress :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_progress_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_rotates(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PathFollow2D.set_v_offset(v_offset :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.correct_posture(transform :: Transform3D, rotation_mode :: enum::PathFollow3D.RotationMode, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.get_cubic_interpolation() :: {:ok :: label, state :: State, }
spec PathFollow3D.get_h_offset() :: {:ok :: label, state :: State, }
spec PathFollow3D.get_progress() :: {:ok :: label, state :: State, }
spec PathFollow3D.get_progress_ratio() :: {:ok :: label, state :: State, }
spec PathFollow3D.get_rotation_mode() :: {:ok :: label, state :: State, }
spec PathFollow3D.get_v_offset() :: {:ok :: label, state :: State, }
spec PathFollow3D.has_loop() :: {:ok :: label, state :: State, }
spec PathFollow3D.is_tilt_enabled() :: {:ok :: label, state :: State, }
spec PathFollow3D.set_cubic_interpolation(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_h_offset(h_offset :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_loop(loop :: bool, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_progress(progress :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_progress_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_rotation_mode(rotation_mode :: enum::PathFollow3D.RotationMode, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_tilt_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PathFollow3D.set_v_offset(v_offset :: float, ) :: {:ok :: label, state :: State, }
spec Performance.add_custom_monitor(id :: StringName, callable :: Callable, arguments :: Array, ) :: {:ok :: label, state :: State, }
spec Performance.get_custom_monitor(id :: StringName, ) :: {:ok :: label, state :: State, }
spec Performance.get_custom_monitor_names() :: {:ok :: label, state :: State, }
spec Performance.get_monitor(monitor :: enum::Performance.Monitor, ) :: {:ok :: label, state :: State, }
spec Performance.get_monitor_modification_time() :: {:ok :: label, state :: State, }
spec Performance.has_custom_monitor(id :: StringName, ) :: {:ok :: label, state :: State, }
spec Performance.remove_custom_monitor(id :: StringName, ) :: {:ok :: label, state :: State, }
spec PhysicalBone2D.get_auto_configure_joint() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.get_bone2d_index() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.get_bone2d_nodepath() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.get_follow_bone_when_simulating() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.get_joint() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.get_simulate_physics() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.is_simulating_physics() :: {:ok :: label, state :: State, }
spec PhysicalBone2D.set_auto_configure_joint(auto_configure_joint :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicalBone2D.set_bone2d_index(bone_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicalBone2D.set_bone2d_nodepath(nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec PhysicalBone2D.set_follow_bone_when_simulating(follow_bone :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicalBone2D.set_simulate_physics(simulate_physics :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D._integrate_forces(state :: PhysicsDirectBodyState3D, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.apply_central_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.apply_impulse(impulse :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_angular_damp() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_angular_damp_mode() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_angular_velocity() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_body_offset() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_bone_id() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_bounce() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_friction() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_gravity_scale() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_joint_offset() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_joint_rotation() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_joint_type() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_linear_damp() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_linear_damp_mode() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_linear_velocity() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_mass() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.get_simulate_physics() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.is_able_to_sleep() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.is_simulating_physics() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.is_using_custom_integrator() :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_angular_damp(angular_damp :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_angular_damp_mode(angular_damp_mode :: enum::PhysicalBone3D.DampMode, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_angular_velocity(angular_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_body_offset(offset :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_bounce(bounce :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_can_sleep(able_to_sleep :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_friction(friction :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_gravity_scale(gravity_scale :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_joint_offset(offset :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_joint_rotation(euler :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_joint_type(joint_type :: enum::PhysicalBone3D.JointType, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_linear_damp(linear_damp :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_linear_damp_mode(linear_damp_mode :: enum::PhysicalBone3D.DampMode, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_linear_velocity(linear_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalBone3D.set_use_custom_integrator(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_energy_multiplier() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_ground_color() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_mie_coefficient() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_mie_color() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_mie_eccentricity() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_night_sky() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_rayleigh_coefficient() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_rayleigh_color() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_sun_disk_scale() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_turbidity() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.get_use_debanding() :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_energy_multiplier(multiplier :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_ground_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_mie_coefficient(mie :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_mie_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_mie_eccentricity(eccentricity :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_night_sky(night_sky :: Texture2D, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_rayleigh_coefficient(rayleigh :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_rayleigh_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_sun_disk_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_turbidity(turbidity :: float, ) :: {:ok :: label, state :: State, }
spec PhysicalSkyMaterial.set_use_debanding(use_debanding :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsBody2D.add_collision_exception_with(body :: Node, ) :: {:ok :: label, state :: State, }
spec PhysicsBody2D.get_collision_exceptions() :: {:ok :: label, state :: State, }
spec PhysicsBody2D.move_and_collide(motion :: Vector2, test_only :: bool, safe_margin :: float, recovery_as_collision :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsBody2D.remove_collision_exception_with(body :: Node, ) :: {:ok :: label, state :: State, }
spec PhysicsBody2D.test_move(from :: Transform2D, motion :: Vector2, collision :: KinematicCollision2D, safe_margin :: float, recovery_as_collision :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsBody3D.add_collision_exception_with(body :: Node, ) :: {:ok :: label, state :: State, }
spec PhysicsBody3D.get_axis_lock(axis :: enum::PhysicsServer3D.BodyAxis, ) :: {:ok :: label, state :: State, }
spec PhysicsBody3D.get_collision_exceptions() :: {:ok :: label, state :: State, }
spec PhysicsBody3D.move_and_collide(motion :: Vector3, test_only :: bool, safe_margin :: float, recovery_as_collision :: bool, max_collisions :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsBody3D.remove_collision_exception_with(body :: Node, ) :: {:ok :: label, state :: State, }
spec PhysicsBody3D.set_axis_lock(axis :: enum::PhysicsServer3D.BodyAxis, lock :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsBody3D.test_move(from :: Transform3D, motion :: Vector3, collision :: KinematicCollision3D, safe_margin :: float, recovery_as_collision :: bool, max_collisions :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.add_constant_central_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.add_constant_force(force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.add_constant_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.apply_central_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.apply_central_impulse(impulse :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.apply_force(force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.apply_impulse(impulse :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.apply_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.apply_torque_impulse(impulse :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_angular_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_center_of_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_center_of_mass_local() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_constant_force() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_constant_torque() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_collider(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_collider_id(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_collider_object(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_collider_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_collider_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_collider_velocity_at_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_count() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_impulse(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_local_normal(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_local_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_contact_local_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_inverse_inertia() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_inverse_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_linear_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_space_state() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_step() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_total_angular_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_total_gravity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_total_linear_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_transform() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.get_velocity_at_local_position(local_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.integrate_forces() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.is_sleeping() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.set_angular_velocity(velocity :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.set_constant_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.set_constant_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.set_linear_velocity(velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.set_sleep_state(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2D.set_transform(transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._add_constant_central_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._add_constant_force(force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._add_constant_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._apply_central_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._apply_central_impulse(impulse :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._apply_force(force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._apply_impulse(impulse :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._apply_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._apply_torque_impulse(impulse :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_angular_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_center_of_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_center_of_mass_local() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_constant_force() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_constant_torque() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_collider(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_collider_id(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_collider_object(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_collider_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_collider_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_collider_velocity_at_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_count() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_impulse(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_local_normal(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_local_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_contact_local_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_inverse_inertia() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_inverse_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_linear_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_space_state() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_step() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_total_angular_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_total_gravity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_total_linear_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_transform() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._get_velocity_at_local_position(local_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._integrate_forces() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._is_sleeping() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._set_angular_velocity(velocity :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._set_constant_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._set_constant_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._set_linear_velocity(velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._set_sleep_state(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState2DExtension._set_transform(transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.add_constant_central_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.add_constant_force(force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.add_constant_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.apply_central_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.apply_central_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.apply_force(force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.apply_impulse(impulse :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.apply_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.apply_torque_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_angular_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_center_of_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_center_of_mass_local() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_constant_force() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_constant_torque() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_collider(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_collider_id(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_collider_object(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_collider_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_collider_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_collider_velocity_at_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_count() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_impulse(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_local_normal(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_local_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_contact_local_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_inverse_inertia() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_inverse_inertia_tensor() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_inverse_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_linear_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_principal_inertia_axes() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_space_state() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_step() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_total_angular_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_total_gravity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_total_linear_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_transform() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.get_velocity_at_local_position(local_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.integrate_forces() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.is_sleeping() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.set_angular_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.set_constant_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.set_constant_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.set_linear_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.set_sleep_state(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3D.set_transform(transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._add_constant_central_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._add_constant_force(force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._add_constant_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._apply_central_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._apply_central_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._apply_force(force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._apply_impulse(impulse :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._apply_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._apply_torque_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_angular_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_center_of_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_center_of_mass_local() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_constant_force() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_constant_torque() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_collider(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_collider_id(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_collider_object(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_collider_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_collider_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_collider_velocity_at_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_count() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_impulse(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_local_normal(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_local_position(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_contact_local_shape(contact_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_inverse_inertia() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_inverse_inertia_tensor() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_inverse_mass() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_linear_velocity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_principal_inertia_axes() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_space_state() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_step() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_total_angular_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_total_gravity() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_total_linear_damp() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_transform() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._get_velocity_at_local_position(local_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._integrate_forces() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._is_sleeping() :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._set_angular_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._set_constant_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._set_constant_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._set_linear_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._set_sleep_state(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectBodyState3DExtension._set_transform(transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2D.cast_motion(parameters :: PhysicsShapeQueryParameters2D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2D.collide_shape(parameters :: PhysicsShapeQueryParameters2D, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2D.get_rest_info(parameters :: PhysicsShapeQueryParameters2D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2D.intersect_point(parameters :: PhysicsPointQueryParameters2D, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2D.intersect_ray(parameters :: PhysicsRayQueryParameters2D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2D.intersect_shape(parameters :: PhysicsShapeQueryParameters2D, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension._cast_motion(shape_rid :: RID, transform :: Transform2D, motion :: Vector2, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, closest_safe :: double*, closest_unsafe :: double*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension._collide_shape(shape_rid :: RID, transform :: Transform2D, motion :: Vector2, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, results :: void*, max_results :: int, result_count :: int32_t*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension._intersect_point(position :: Vector2, canvas_instance_id :: int, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, results :: PhysicsServer2DExtensionShapeResult*, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension._intersect_ray(from :: Vector2, to :: Vector2, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, hit_from_inside :: bool, result :: PhysicsServer2DExtensionRayResult*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension._intersect_shape(shape_rid :: RID, transform :: Transform2D, motion :: Vector2, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, result :: PhysicsServer2DExtensionShapeResult*, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension._rest_info(shape_rid :: RID, transform :: Transform2D, motion :: Vector2, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, rest_info :: PhysicsServer2DExtensionShapeRestInfo*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState2DExtension.is_body_excluded_from_query(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3D.cast_motion(parameters :: PhysicsShapeQueryParameters3D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3D.collide_shape(parameters :: PhysicsShapeQueryParameters3D, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3D.get_rest_info(parameters :: PhysicsShapeQueryParameters3D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3D.intersect_point(parameters :: PhysicsPointQueryParameters3D, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3D.intersect_ray(parameters :: PhysicsRayQueryParameters3D, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3D.intersect_shape(parameters :: PhysicsShapeQueryParameters3D, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._cast_motion(shape_rid :: RID, transform :: Transform3D, motion :: Vector3, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, closest_safe :: double*, closest_unsafe :: double*, info :: PhysicsServer3DExtensionShapeRestInfo*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._collide_shape(shape_rid :: RID, transform :: Transform3D, motion :: Vector3, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, results :: void*, max_results :: int, result_count :: int32_t*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._get_closest_point_to_object_volume(object :: RID, point :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._intersect_point(position :: Vector3, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, results :: PhysicsServer3DExtensionShapeResult*, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._intersect_ray(from :: Vector3, to :: Vector3, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, hit_from_inside :: bool, hit_back_faces :: bool, result :: PhysicsServer3DExtensionRayResult*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._intersect_shape(shape_rid :: RID, transform :: Transform3D, motion :: Vector3, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, result_count :: PhysicsServer3DExtensionShapeResult*, max_results :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension._rest_info(shape_rid :: RID, transform :: Transform3D, motion :: Vector3, margin :: float, collision_mask :: int, collide_with_bodies :: bool, collide_with_areas :: bool, rest_info :: PhysicsServer3DExtensionShapeRestInfo*, ) :: {:ok :: label, state :: State, }
spec PhysicsDirectSpaceState3DExtension.is_body_excluded_from_query(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsMaterial.get_bounce() :: {:ok :: label, state :: State, }
spec PhysicsMaterial.get_friction() :: {:ok :: label, state :: State, }
spec PhysicsMaterial.is_absorbent() :: {:ok :: label, state :: State, }
spec PhysicsMaterial.is_rough() :: {:ok :: label, state :: State, }
spec PhysicsMaterial.set_absorbent(absorbent :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsMaterial.set_bounce(bounce :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsMaterial.set_friction(friction :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsMaterial.set_rough(rough :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.get_canvas_instance_id() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.get_collision_mask() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.get_exclude() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.get_position() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.set_canvas_instance_id(canvas_instance_id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.set_exclude(exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters2D.set_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.get_exclude() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.get_position() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.set_exclude(exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsPointQueryParameters3D.set_position(position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.create(from :: Vector2, to :: Vector2, collision_mask :: int, exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.get_collision_mask() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.get_exclude() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.get_from() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.get_to() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.is_hit_from_inside_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_exclude(exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_from(from :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_hit_from_inside(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters2D.set_to(to :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.create(from :: Vector3, to :: Vector3, collision_mask :: int, exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.get_exclude() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.get_from() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.get_to() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.is_hit_back_faces_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.is_hit_from_inside_enabled() :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_exclude(exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_from(from :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_hit_back_faces(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_hit_from_inside(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsRayQueryParameters3D.set_to(to :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_add_shape(area :: RID, shape :: RID, transform :: Transform2D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_attach_canvas_instance_id(area :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_attach_object_instance_id(area :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_clear_shapes(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_canvas_instance_id(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_collision_layer(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_collision_mask(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_object_instance_id(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_param(area :: RID, param :: enum::PhysicsServer2D.AreaParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_shape_count(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_shape_transform(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_space(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_get_transform(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_remove_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_area_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_collision_layer(area :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_collision_mask(area :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_monitorable(area :: RID, monitorable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_param(area :: RID, param :: enum::PhysicsServer2D.AreaParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_shape(area :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_shape_disabled(area :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_shape_transform(area :: RID, shape_idx :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_space(area :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.area_set_transform(area :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_add_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_add_constant_central_force(body :: RID, force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_add_constant_force(body :: RID, force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_add_constant_torque(body :: RID, torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_add_shape(body :: RID, shape :: RID, transform :: Transform2D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_apply_central_force(body :: RID, force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_apply_central_impulse(body :: RID, impulse :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_apply_force(body :: RID, force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_apply_impulse(body :: RID, impulse :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_apply_torque(body :: RID, torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_apply_torque_impulse(body :: RID, impulse :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_attach_canvas_instance_id(body :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_attach_object_instance_id(body :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_clear_shapes(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_canvas_instance_id(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_collision_layer(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_collision_mask(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_collision_priority(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_constant_force(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_constant_torque(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_continuous_collision_detection_mode(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_direct_state(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_max_contacts_reported(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_mode(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_object_instance_id(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_param(body :: RID, param :: enum::PhysicsServer2D.BodyParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_shape_count(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_shape_transform(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_space(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_get_state(body :: RID, state :: enum::PhysicsServer2D.BodyState, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_is_omitting_force_integration(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_remove_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_remove_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_reset_mass_properties(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_axis_velocity(body :: RID, axis_velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_collision_layer(body :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_collision_mask(body :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_collision_priority(body :: RID, priority :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_constant_force(body :: RID, force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_constant_torque(body :: RID, torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_continuous_collision_detection_mode(body :: RID, mode :: enum::PhysicsServer2D.CCDMode, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_force_integration_callback(body :: RID, callable :: Callable, userdata :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_max_contacts_reported(body :: RID, amount :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_mode(body :: RID, mode :: enum::PhysicsServer2D.BodyMode, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_omit_force_integration(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_param(body :: RID, param :: enum::PhysicsServer2D.BodyParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_shape(body :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_shape_as_one_way_collision(body :: RID, shape_idx :: int, enable :: bool, margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_shape_disabled(body :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_shape_transform(body :: RID, shape_idx :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_space(body :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_set_state(body :: RID, state :: enum::PhysicsServer2D.BodyState, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.body_test_motion(body :: RID, parameters :: PhysicsTestMotionParameters2D, result :: PhysicsTestMotionResult2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.capsule_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.circle_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.concave_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.convex_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.damped_spring_joint_get_param(joint :: RID, param :: enum::PhysicsServer2D.DampedSpringParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.damped_spring_joint_set_param(joint :: RID, param :: enum::PhysicsServer2D.DampedSpringParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.get_process_info(process_info :: enum::PhysicsServer2D.ProcessInfo, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_clear(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_disable_collisions_between_bodies(joint :: RID, disable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_get_param(joint :: RID, param :: enum::PhysicsServer2D.JointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_get_type(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_is_disabled_collisions_between_bodies(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_make_damped_spring(joint :: RID, anchor_a :: Vector2, anchor_b :: Vector2, body_a :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_make_groove(joint :: RID, groove1_a :: Vector2, groove2_a :: Vector2, anchor_b :: Vector2, body_a :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_make_pin(joint :: RID, anchor :: Vector2, body_a :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.joint_set_param(joint :: RID, param :: enum::PhysicsServer2D.JointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.pin_joint_get_param(joint :: RID, param :: enum::PhysicsServer2D.PinJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.pin_joint_set_param(joint :: RID, param :: enum::PhysicsServer2D.PinJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.rectangle_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.segment_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.separation_ray_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.shape_get_data(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.shape_get_type(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.shape_set_data(shape :: RID, data :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.space_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2D.space_get_direct_state(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.space_get_param(space :: RID, param :: enum::PhysicsServer2D.SpaceParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.space_is_active(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.space_set_active(space :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.space_set_param(space :: RID, param :: enum::PhysicsServer2D.SpaceParameter, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2D.world_boundary_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_add_shape(area :: RID, shape :: RID, transform :: Transform2D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_attach_canvas_instance_id(area :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_attach_object_instance_id(area :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_clear_shapes(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_canvas_instance_id(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_collision_layer(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_collision_mask(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_object_instance_id(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_param(area :: RID, param :: enum::PhysicsServer2D.AreaParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_shape_count(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_shape_transform(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_space(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_get_transform(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_remove_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_area_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_collision_layer(area :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_collision_mask(area :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_monitorable(area :: RID, monitorable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_param(area :: RID, param :: enum::PhysicsServer2D.AreaParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_pickable(area :: RID, pickable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_shape(area :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_shape_disabled(area :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_shape_transform(area :: RID, shape_idx :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_space(area :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._area_set_transform(area :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_add_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_add_constant_central_force(body :: RID, force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_add_constant_force(body :: RID, force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_add_constant_torque(body :: RID, torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_add_shape(body :: RID, shape :: RID, transform :: Transform2D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_apply_central_force(body :: RID, force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_apply_central_impulse(body :: RID, impulse :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_apply_force(body :: RID, force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_apply_impulse(body :: RID, impulse :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_apply_torque(body :: RID, torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_apply_torque_impulse(body :: RID, impulse :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_attach_canvas_instance_id(body :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_attach_object_instance_id(body :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_clear_shapes(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_collide_shape(body :: RID, body_shape :: int, shape :: RID, shape_xform :: Transform2D, motion :: Vector2, results :: void*, result_max :: int, result_count :: int32_t*, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_canvas_instance_id(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_collision_exceptions(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_collision_layer(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_collision_mask(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_collision_priority(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_constant_force(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_constant_torque(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_contacts_reported_depth_threshold(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_continuous_collision_detection_mode(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_direct_state(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_max_contacts_reported(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_mode(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_object_instance_id(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_param(body :: RID, param :: enum::PhysicsServer2D.BodyParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_shape_count(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_shape_transform(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_space(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_get_state(body :: RID, state :: enum::PhysicsServer2D.BodyState, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_is_omitting_force_integration(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_remove_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_remove_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_reset_mass_properties(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_axis_velocity(body :: RID, axis_velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_collision_layer(body :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_collision_mask(body :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_collision_priority(body :: RID, priority :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_constant_force(body :: RID, force :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_constant_torque(body :: RID, torque :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_contacts_reported_depth_threshold(body :: RID, threshold :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_continuous_collision_detection_mode(body :: RID, mode :: enum::PhysicsServer2D.CCDMode, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_force_integration_callback(body :: RID, callable :: Callable, userdata :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_max_contacts_reported(body :: RID, amount :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_mode(body :: RID, mode :: enum::PhysicsServer2D.BodyMode, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_omit_force_integration(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_param(body :: RID, param :: enum::PhysicsServer2D.BodyParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_pickable(body :: RID, pickable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_shape(body :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_shape_as_one_way_collision(body :: RID, shape_idx :: int, enable :: bool, margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_shape_disabled(body :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_shape_transform(body :: RID, shape_idx :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_space(body :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_state(body :: RID, state :: enum::PhysicsServer2D.BodyState, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_set_state_sync_callback(body :: RID, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._body_test_motion(body :: RID, from :: Transform2D, motion :: Vector2, margin :: float, collide_separation_ray :: bool, recovery_as_collision :: bool, result :: PhysicsServer2DExtensionMotionResult*, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._capsule_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._circle_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._concave_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._convex_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._damped_spring_joint_get_param(joint :: RID, param :: enum::PhysicsServer2D.DampedSpringParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._damped_spring_joint_set_param(joint :: RID, param :: enum::PhysicsServer2D.DampedSpringParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._end_sync() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._finish() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._flush_queries() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._get_process_info(process_info :: enum::PhysicsServer2D.ProcessInfo, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._init() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._is_flushing_queries() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_clear(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_disable_collisions_between_bodies(joint :: RID, disable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_get_param(joint :: RID, param :: enum::PhysicsServer2D.JointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_get_type(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_is_disabled_collisions_between_bodies(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_make_damped_spring(joint :: RID, anchor_a :: Vector2, anchor_b :: Vector2, body_a :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_make_groove(joint :: RID, a_groove1 :: Vector2, a_groove2 :: Vector2, b_anchor :: Vector2, body_a :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_make_pin(joint :: RID, anchor :: Vector2, body_a :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._joint_set_param(joint :: RID, param :: enum::PhysicsServer2D.JointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._pin_joint_get_param(joint :: RID, param :: enum::PhysicsServer2D.PinJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._pin_joint_set_param(joint :: RID, param :: enum::PhysicsServer2D.PinJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._rectangle_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._segment_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._separation_ray_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._shape_collide(shape_A :: RID, xform_A :: Transform2D, motion_A :: Vector2, shape_B :: RID, xform_B :: Transform2D, motion_B :: Vector2, results :: void*, result_max :: int, result_count :: int32_t*, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._shape_get_custom_solver_bias(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._shape_get_data(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._shape_get_type(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._shape_set_custom_solver_bias(shape :: RID, bias :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._shape_set_data(shape :: RID, data :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_get_contact_count(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_get_contacts(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_get_direct_state(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_get_param(space :: RID, param :: enum::PhysicsServer2D.SpaceParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_is_active(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_set_active(space :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_set_debug_contacts(space :: RID, max_contacts :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._space_set_param(space :: RID, param :: enum::PhysicsServer2D.SpaceParameter, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._step(step :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._sync() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension._world_boundary_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension.body_test_motion_is_excluding_body(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DExtension.body_test_motion_is_excluding_object(object :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DManager.register_server(name :: String, create_callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer2DManager.set_default_server(name :: String, priority :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_add_shape(area :: RID, shape :: RID, transform :: Transform3D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_attach_object_instance_id(area :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_clear_shapes(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_collision_layer(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_collision_mask(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_object_instance_id(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_param(area :: RID, param :: enum::PhysicsServer3D.AreaParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_shape_count(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_shape_transform(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_space(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_get_transform(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_remove_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_area_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_collision_layer(area :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_collision_mask(area :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_monitorable(area :: RID, monitorable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_param(area :: RID, param :: enum::PhysicsServer3D.AreaParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_ray_pickable(area :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_shape(area :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_shape_disabled(area :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_shape_transform(area :: RID, shape_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_space(area :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.area_set_transform(area :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_add_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_add_constant_central_force(body :: RID, force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_add_constant_force(body :: RID, force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_add_constant_torque(body :: RID, torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_add_shape(body :: RID, shape :: RID, transform :: Transform3D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_apply_central_force(body :: RID, force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_apply_central_impulse(body :: RID, impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_apply_force(body :: RID, force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_apply_impulse(body :: RID, impulse :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_apply_torque(body :: RID, torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_apply_torque_impulse(body :: RID, impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_attach_object_instance_id(body :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_clear_shapes(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_collision_layer(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_collision_mask(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_collision_priority(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_constant_force(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_constant_torque(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_direct_state(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_max_contacts_reported(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_mode(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_object_instance_id(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_param(body :: RID, param :: enum::PhysicsServer3D.BodyParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_shape_count(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_shape_transform(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_space(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_get_state(body :: RID, state :: enum::PhysicsServer3D.BodyState, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_is_axis_locked(body :: RID, axis :: enum::PhysicsServer3D.BodyAxis, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_is_continuous_collision_detection_enabled(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_is_omitting_force_integration(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_remove_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_remove_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_reset_mass_properties(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_axis_lock(body :: RID, axis :: enum::PhysicsServer3D.BodyAxis, lock :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_axis_velocity(body :: RID, axis_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_collision_layer(body :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_collision_mask(body :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_collision_priority(body :: RID, priority :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_constant_force(body :: RID, force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_constant_torque(body :: RID, torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_enable_continuous_collision_detection(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_force_integration_callback(body :: RID, callable :: Callable, userdata :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_max_contacts_reported(body :: RID, amount :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_mode(body :: RID, mode :: enum::PhysicsServer3D.BodyMode, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_omit_force_integration(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_param(body :: RID, param :: enum::PhysicsServer3D.BodyParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_ray_pickable(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_shape(body :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_shape_disabled(body :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_shape_transform(body :: RID, shape_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_space(body :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_set_state(body :: RID, state :: enum::PhysicsServer3D.BodyState, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.body_test_motion(body :: RID, parameters :: PhysicsTestMotionParameters3D, result :: PhysicsTestMotionResult3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.box_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.capsule_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.concave_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.cone_twist_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.ConeTwistJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.cone_twist_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.ConeTwistJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.convex_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.custom_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.cylinder_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.generic_6dof_joint_get_flag(joint :: RID, axis :: enum::Vector3.Axis, flag :: enum::PhysicsServer3D.G6DOFJointAxisFlag, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.generic_6dof_joint_get_param(joint :: RID, axis :: enum::Vector3.Axis, param :: enum::PhysicsServer3D.G6DOFJointAxisParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.generic_6dof_joint_set_flag(joint :: RID, axis :: enum::Vector3.Axis, flag :: enum::PhysicsServer3D.G6DOFJointAxisFlag, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.generic_6dof_joint_set_param(joint :: RID, axis :: enum::Vector3.Axis, param :: enum::PhysicsServer3D.G6DOFJointAxisParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.get_process_info(process_info :: enum::PhysicsServer3D.ProcessInfo, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.heightmap_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.hinge_joint_get_flag(joint :: RID, flag :: enum::PhysicsServer3D.HingeJointFlag, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.hinge_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.HingeJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.hinge_joint_set_flag(joint :: RID, flag :: enum::PhysicsServer3D.HingeJointFlag, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.hinge_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.HingeJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_clear(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_disable_collisions_between_bodies(joint :: RID, disable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_get_solver_priority(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_get_type(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_is_disabled_collisions_between_bodies(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_make_cone_twist(joint :: RID, body_A :: RID, local_ref_A :: Transform3D, body_B :: RID, local_ref_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_make_generic_6dof(joint :: RID, body_A :: RID, local_ref_A :: Transform3D, body_B :: RID, local_ref_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_make_hinge(joint :: RID, body_A :: RID, hinge_A :: Transform3D, body_B :: RID, hinge_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_make_pin(joint :: RID, body_A :: RID, local_A :: Vector3, body_B :: RID, local_B :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_make_slider(joint :: RID, body_A :: RID, local_ref_A :: Transform3D, body_B :: RID, local_ref_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.joint_set_solver_priority(joint :: RID, priority :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.pin_joint_get_local_a(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.pin_joint_get_local_b(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.pin_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.PinJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.pin_joint_set_local_a(joint :: RID, local_A :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.pin_joint_set_local_b(joint :: RID, local_B :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.pin_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.PinJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.separation_ray_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.shape_get_data(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.shape_get_type(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.shape_set_data(shape :: RID, data :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.slider_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.SliderJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.slider_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.SliderJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.soft_body_get_bounds(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.space_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.space_get_direct_state(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.space_get_param(space :: RID, param :: enum::PhysicsServer3D.SpaceParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.space_is_active(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.space_set_active(space :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.space_set_param(space :: RID, param :: enum::PhysicsServer3D.SpaceParameter, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3D.sphere_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3D.world_boundary_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_add_shape(area :: RID, shape :: RID, transform :: Transform3D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_attach_object_instance_id(area :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_clear_shapes(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_collision_layer(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_collision_mask(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_object_instance_id(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_param(area :: RID, param :: enum::PhysicsServer3D.AreaParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_shape_count(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_shape_transform(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_space(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_get_transform(area :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_remove_shape(area :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_area_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_collision_layer(area :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_collision_mask(area :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_monitor_callback(area :: RID, callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_monitorable(area :: RID, monitorable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_param(area :: RID, param :: enum::PhysicsServer3D.AreaParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_ray_pickable(area :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_shape(area :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_shape_disabled(area :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_shape_transform(area :: RID, shape_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_space(area :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._area_set_transform(area :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_add_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_add_constant_central_force(body :: RID, force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_add_constant_force(body :: RID, force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_add_constant_torque(body :: RID, torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_add_shape(body :: RID, shape :: RID, transform :: Transform3D, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_apply_central_force(body :: RID, force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_apply_central_impulse(body :: RID, impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_apply_force(body :: RID, force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_apply_impulse(body :: RID, impulse :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_apply_torque(body :: RID, torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_apply_torque_impulse(body :: RID, impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_attach_object_instance_id(body :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_clear_shapes(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_collision_exceptions(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_collision_layer(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_collision_mask(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_collision_priority(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_constant_force(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_constant_torque(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_contacts_reported_depth_threshold(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_direct_state(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_max_contacts_reported(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_mode(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_object_instance_id(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_param(body :: RID, param :: enum::PhysicsServer3D.BodyParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_shape_count(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_shape_transform(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_space(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_state(body :: RID, state :: enum::PhysicsServer3D.BodyState, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_get_user_flags(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_is_axis_locked(body :: RID, axis :: enum::PhysicsServer3D.BodyAxis, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_is_continuous_collision_detection_enabled(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_is_omitting_force_integration(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_remove_collision_exception(body :: RID, excepted_body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_remove_shape(body :: RID, shape_idx :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_reset_mass_properties(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_axis_lock(body :: RID, axis :: enum::PhysicsServer3D.BodyAxis, lock :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_axis_velocity(body :: RID, axis_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_collision_layer(body :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_collision_mask(body :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_collision_priority(body :: RID, priority :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_constant_force(body :: RID, force :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_constant_torque(body :: RID, torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_contacts_reported_depth_threshold(body :: RID, threshold :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_enable_continuous_collision_detection(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_force_integration_callback(body :: RID, callable :: Callable, userdata :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_max_contacts_reported(body :: RID, amount :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_mode(body :: RID, mode :: enum::PhysicsServer3D.BodyMode, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_omit_force_integration(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_param(body :: RID, param :: enum::PhysicsServer3D.BodyParameter, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_ray_pickable(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_shape(body :: RID, shape_idx :: int, shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_shape_disabled(body :: RID, shape_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_shape_transform(body :: RID, shape_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_space(body :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_state(body :: RID, state :: enum::PhysicsServer3D.BodyState, value :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_state_sync_callback(body :: RID, callable :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_set_user_flags(body :: RID, flags :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._body_test_motion(body :: RID, from :: Transform3D, motion :: Vector3, margin :: float, max_collisions :: int, collide_separation_ray :: bool, result :: PhysicsServer3DExtensionMotionResult*, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._box_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._capsule_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._concave_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._cone_twist_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.ConeTwistJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._cone_twist_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.ConeTwistJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._convex_polygon_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._custom_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._cylinder_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._end_sync() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._finish() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._flush_queries() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._generic_6dof_joint_get_flag(joint :: RID, axis :: enum::Vector3.Axis, flag :: enum::PhysicsServer3D.G6DOFJointAxisFlag, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._generic_6dof_joint_get_param(joint :: RID, axis :: enum::Vector3.Axis, param :: enum::PhysicsServer3D.G6DOFJointAxisParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._generic_6dof_joint_set_flag(joint :: RID, axis :: enum::Vector3.Axis, flag :: enum::PhysicsServer3D.G6DOFJointAxisFlag, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._generic_6dof_joint_set_param(joint :: RID, axis :: enum::Vector3.Axis, param :: enum::PhysicsServer3D.G6DOFJointAxisParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._get_process_info(process_info :: enum::PhysicsServer3D.ProcessInfo, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._heightmap_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._hinge_joint_get_flag(joint :: RID, flag :: enum::PhysicsServer3D.HingeJointFlag, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._hinge_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.HingeJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._hinge_joint_set_flag(joint :: RID, flag :: enum::PhysicsServer3D.HingeJointFlag, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._hinge_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.HingeJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._init() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._is_flushing_queries() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_clear(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_disable_collisions_between_bodies(joint :: RID, disable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_get_solver_priority(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_get_type(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_is_disabled_collisions_between_bodies(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_make_cone_twist(joint :: RID, body_A :: RID, local_ref_A :: Transform3D, body_B :: RID, local_ref_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_make_generic_6dof(joint :: RID, body_A :: RID, local_ref_A :: Transform3D, body_B :: RID, local_ref_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_make_hinge(joint :: RID, body_A :: RID, hinge_A :: Transform3D, body_B :: RID, hinge_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_make_hinge_simple(joint :: RID, body_A :: RID, pivot_A :: Vector3, axis_A :: Vector3, body_B :: RID, pivot_B :: Vector3, axis_B :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_make_pin(joint :: RID, body_A :: RID, local_A :: Vector3, body_B :: RID, local_B :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_make_slider(joint :: RID, body_A :: RID, local_ref_A :: Transform3D, body_B :: RID, local_ref_B :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._joint_set_solver_priority(joint :: RID, priority :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._pin_joint_get_local_a(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._pin_joint_get_local_b(joint :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._pin_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.PinJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._pin_joint_set_local_a(joint :: RID, local_A :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._pin_joint_set_local_b(joint :: RID, local_B :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._pin_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.PinJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._separation_ray_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_get_custom_solver_bias(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_get_data(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_get_margin(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_get_type(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_set_custom_solver_bias(shape :: RID, bias :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_set_data(shape :: RID, data :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._shape_set_margin(shape :: RID, margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._slider_joint_get_param(joint :: RID, param :: enum::PhysicsServer3D.SliderJointParam, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._slider_joint_set_param(joint :: RID, param :: enum::PhysicsServer3D.SliderJointParam, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_add_collision_exception(body :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_bounds(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_collision_exceptions(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_collision_layer(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_collision_mask(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_damping_coefficient(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_drag_coefficient(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_linear_stiffness(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_point_global_position(body :: RID, point_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_pressure_coefficient(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_simulation_precision(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_space(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_state(body :: RID, state :: enum::PhysicsServer3D.BodyState, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_get_total_mass(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_is_point_pinned(body :: RID, point_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_move_point(body :: RID, point_index :: int, global_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_pin_point(body :: RID, point_index :: int, pin :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_remove_all_pinned_points(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_remove_collision_exception(body :: RID, body_b :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_collision_layer(body :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_collision_mask(body :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_damping_coefficient(body :: RID, damping_coefficient :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_drag_coefficient(body :: RID, drag_coefficient :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_linear_stiffness(body :: RID, linear_stiffness :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_mesh(body :: RID, mesh :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_pressure_coefficient(body :: RID, pressure_coefficient :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_ray_pickable(body :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_simulation_precision(body :: RID, simulation_precision :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_space(body :: RID, space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_state(body :: RID, state :: enum::PhysicsServer3D.BodyState, variant :: Variant, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_total_mass(body :: RID, total_mass :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_set_transform(body :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._soft_body_update_rendering_server(body :: RID, rendering_server_handler :: PhysicsServer3DRenderingServerHandler, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_get_contact_count(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_get_contacts(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_get_direct_state(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_get_param(space :: RID, param :: enum::PhysicsServer3D.SpaceParameter, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_is_active(space :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_set_active(space :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_set_debug_contacts(space :: RID, max_contacts :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._space_set_param(space :: RID, param :: enum::PhysicsServer3D.SpaceParameter, value :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._sphere_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._step(step :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._sync() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension._world_boundary_shape_create() :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension.body_test_motion_is_excluding_body(body :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DExtension.body_test_motion_is_excluding_object(object :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DManager.register_server(name :: String, create_callback :: Callable, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DManager.set_default_server(name :: String, priority :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DRenderingServerHandler._set_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DRenderingServerHandler._set_normal(vertex_id :: int, normals :: const void*, ) :: {:ok :: label, state :: State, }
spec PhysicsServer3DRenderingServerHandler._set_vertex(vertex_id :: int, vertices :: const void*, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_collision_mask() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_exclude() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_margin() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_motion() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_shape() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_shape_rid() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.get_transform() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_exclude(exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_motion(motion :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_shape(shape :: Resource, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_shape_rid(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters2D.set_transform(transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_exclude() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_margin() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_motion() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_shape() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_shape_rid() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.get_transform() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_exclude(exclude :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_motion(motion :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_shape(shape :: Resource, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_shape_rid(shape :: RID, ) :: {:ok :: label, state :: State, }
spec PhysicsShapeQueryParameters3D.set_transform(transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.get_exclude_bodies() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.get_exclude_objects() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.get_from() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.get_margin() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.get_motion() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.is_collide_separation_ray_enabled() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.is_recovery_as_collision_enabled() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_collide_separation_ray_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_exclude_bodies(exclude_list :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_exclude_objects(exclude_list :: typedarray::int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_from(from :: Transform2D, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_motion(motion :: Vector2, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters2D.set_recovery_as_collision_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.get_exclude_bodies() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.get_exclude_objects() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.get_from() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.get_margin() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.get_max_collisions() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.get_motion() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.is_collide_separation_ray_enabled() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.is_recovery_as_collision_enabled() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_collide_separation_ray_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_exclude_bodies(exclude_list :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_exclude_objects(exclude_list :: typedarray::int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_from(from :: Transform3D, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_max_collisions(max_collisions :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_motion(motion :: Vector3, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionParameters3D.set_recovery_as_collision_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collider() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collider_id() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collider_rid() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collider_shape() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collider_velocity() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collision_depth() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collision_local_shape() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collision_normal() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collision_point() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collision_safe_fraction() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_collision_unsafe_fraction() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_remainder() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult2D.get_travel() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collider(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collider_id(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collider_rid(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collider_shape(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collider_velocity(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_count() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_depth(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_local_shape(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_normal(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_point(collision_index :: int, ) :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_safe_fraction() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_collision_unsafe_fraction() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_remainder() :: {:ok :: label, state :: State, }
spec PhysicsTestMotionResult3D.get_travel() :: {:ok :: label, state :: State, }
spec PinJoint2D.get_softness() :: {:ok :: label, state :: State, }
spec PinJoint2D.set_softness(softness :: float, ) :: {:ok :: label, state :: State, }
spec PinJoint3D.get_param(param :: enum::PinJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec PinJoint3D.set_param(param :: enum::PinJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec PlaceholderMesh.set_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec PlaceholderTexture2D.set_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec PlaceholderTexture3D.get_size() :: {:ok :: label, state :: State, }
spec PlaceholderTexture3D.set_size(size :: Vector3i, ) :: {:ok :: label, state :: State, }
spec PlaceholderTextureLayered.get_size() :: {:ok :: label, state :: State, }
spec PlaceholderTextureLayered.set_layers(layers :: int, ) :: {:ok :: label, state :: State, }
spec PlaceholderTextureLayered.set_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Plane.distance_to(point :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Plane.get_center() :: {:ok :: label, state :: State, Vector3}
spec Plane.has_point(point :: Vector3, tolerance :: float, ) :: {:ok :: label, state :: State, bool}
spec Plane.intersect_3(b :: Plane, c :: Plane, ) :: {:ok :: label, state :: State, Variant}
spec Plane.intersects_ray(from :: Vector3, dir :: Vector3, ) :: {:ok :: label, state :: State, Variant}
spec Plane.intersects_segment(from :: Vector3, to :: Vector3, ) :: {:ok :: label, state :: State, Variant}
spec Plane.is_equal_approx(to_plane :: Plane, ) :: {:ok :: label, state :: State, bool}
spec Plane.is_finite() :: {:ok :: label, state :: State, bool}
spec Plane.is_point_over(point :: Vector3, ) :: {:ok :: label, state :: State, bool}
spec Plane.normalized() :: {:ok :: label, state :: State, Plane}
spec Plane.project(point :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec PlaneMesh.get_center_offset() :: {:ok :: label, state :: State, }
spec PlaneMesh.get_orientation() :: {:ok :: label, state :: State, }
spec PlaneMesh.get_size() :: {:ok :: label, state :: State, }
spec PlaneMesh.get_subdivide_depth() :: {:ok :: label, state :: State, }
spec PlaneMesh.get_subdivide_width() :: {:ok :: label, state :: State, }
spec PlaneMesh.set_center_offset(offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec PlaneMesh.set_orientation(orientation :: enum::PlaneMesh.Orientation, ) :: {:ok :: label, state :: State, }
spec PlaneMesh.set_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec PlaneMesh.set_subdivide_depth(subdivide :: int, ) :: {:ok :: label, state :: State, }
spec PlaneMesh.set_subdivide_width(subdivide :: int, ) :: {:ok :: label, state :: State, }
spec PlaybackStats.get_playback_stats() :: {:ok :: label, state :: State, }
spec PointLight2D.get_texture() :: {:ok :: label, state :: State, }
spec PointLight2D.get_texture_offset() :: {:ok :: label, state :: State, }
spec PointLight2D.get_texture_scale() :: {:ok :: label, state :: State, }
spec PointLight2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec PointLight2D.set_texture_offset(texture_offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec PointLight2D.set_texture_scale(texture_scale :: float, ) :: {:ok :: label, state :: State, }
spec Polygon2D.add_bone(path :: NodePath, weights :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec Polygon2D.clear_bones() :: {:ok :: label, state :: State, }
spec Polygon2D.erase_bone(index :: int, ) :: {:ok :: label, state :: State, }
spec Polygon2D.get_antialiased() :: {:ok :: label, state :: State, }
spec Polygon2D.get_bone_count() :: {:ok :: label, state :: State, }
spec Polygon2D.get_bone_path(index :: int, ) :: {:ok :: label, state :: State, }
spec Polygon2D.get_bone_weights(index :: int, ) :: {:ok :: label, state :: State, }
spec Polygon2D.get_color() :: {:ok :: label, state :: State, }
spec Polygon2D.get_internal_vertex_count() :: {:ok :: label, state :: State, }
spec Polygon2D.get_invert_border() :: {:ok :: label, state :: State, }
spec Polygon2D.get_invert_enabled() :: {:ok :: label, state :: State, }
spec Polygon2D.get_offset() :: {:ok :: label, state :: State, }
spec Polygon2D.get_polygon() :: {:ok :: label, state :: State, }
spec Polygon2D.get_polygons() :: {:ok :: label, state :: State, }
spec Polygon2D.get_skeleton() :: {:ok :: label, state :: State, }
spec Polygon2D.get_texture() :: {:ok :: label, state :: State, }
spec Polygon2D.get_texture_offset() :: {:ok :: label, state :: State, }
spec Polygon2D.get_texture_rotation() :: {:ok :: label, state :: State, }
spec Polygon2D.get_texture_scale() :: {:ok :: label, state :: State, }
spec Polygon2D.get_uv() :: {:ok :: label, state :: State, }
spec Polygon2D.get_vertex_colors() :: {:ok :: label, state :: State, }
spec Polygon2D.set_antialiased(antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_bone_path(index :: int, path :: NodePath, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_bone_weights(index :: int, weights :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_internal_vertex_count(internal_vertex_count :: int, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_invert_border(invert_border :: float, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_invert_enabled(invert :: bool, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_polygons(polygons :: Array, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_skeleton(skeleton :: NodePath, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_texture_offset(texture_offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_texture_rotation(texture_rotation :: float, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_texture_scale(texture_scale :: Vector2, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_uv(uv :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Polygon2D.set_vertex_colors(vertex_colors :: PackedColorArray, ) :: {:ok :: label, state :: State, }
spec PolygonOccluder3D.get_polygon() :: {:ok :: label, state :: State, }
spec PolygonOccluder3D.set_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.find_path(from :: Vector2, to :: Vector2, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.get_bounds() :: {:ok :: label, state :: State, }
spec PolygonPathFinder.get_closest_point(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.get_intersections(from :: Vector2, to :: Vector2, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.get_point_penalty(idx :: int, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.is_point_inside(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.set_point_penalty(idx :: int, penalty :: float, ) :: {:ok :: label, state :: State, }
spec PolygonPathFinder.setup(points :: PackedVector2Array, connections :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_check_item(label :: String, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_check_shortcut(shortcut :: Shortcut, id :: int, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_icon_check_item(texture :: Texture2D, label :: String, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_icon_check_shortcut(texture :: Texture2D, shortcut :: Shortcut, id :: int, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_icon_item(texture :: Texture2D, label :: String, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_icon_radio_check_item(texture :: Texture2D, label :: String, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_icon_radio_check_shortcut(texture :: Texture2D, shortcut :: Shortcut, id :: int, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_icon_shortcut(texture :: Texture2D, shortcut :: Shortcut, id :: int, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_item(label :: String, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_multistate_item(label :: String, max_states :: int, default_state :: int, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_radio_check_item(label :: String, id :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_radio_check_shortcut(shortcut :: Shortcut, id :: int, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_separator(label :: String, id :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_shortcut(shortcut :: Shortcut, id :: int, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.add_submenu_item(label :: String, submenu :: String, id :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.clear() :: {:ok :: label, state :: State, }
spec PopupMenu.get_allow_search() :: {:ok :: label, state :: State, }
spec PopupMenu.get_focused_item() :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_accelerator(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_count() :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_icon(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_id(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_indent(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_index(id :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_language(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_metadata(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_shortcut(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_submenu(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_text(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_text_direction(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_item_tooltip(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.get_submenu_popup_delay() :: {:ok :: label, state :: State, }
spec PopupMenu.is_hide_on_checkable_item_selection() :: {:ok :: label, state :: State, }
spec PopupMenu.is_hide_on_item_selection() :: {:ok :: label, state :: State, }
spec PopupMenu.is_hide_on_state_item_selection() :: {:ok :: label, state :: State, }
spec PopupMenu.is_item_checkable(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.is_item_checked(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.is_item_disabled(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.is_item_radio_checkable(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.is_item_separator(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.is_item_shortcut_disabled(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.remove_item(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.scroll_to_item(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_allow_search(allow :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_focused_item(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_hide_on_checkable_item_selection(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_hide_on_item_selection(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_hide_on_state_item_selection(enable :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_accelerator(index :: int, accel :: enum::Key, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_as_checkable(index :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_as_radio_checkable(index :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_as_separator(index :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_checked(index :: int, checked :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_count(count :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_disabled(index :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_icon(index :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_id(index :: int, id :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_indent(index :: int, indent :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_language(index :: int, language :: String, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_metadata(index :: int, metadata :: Variant, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_multistate(index :: int, state :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_shortcut(index :: int, shortcut :: Shortcut, global :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_shortcut_disabled(index :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_submenu(index :: int, submenu :: String, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_text(index :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_text_direction(index :: int, direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_item_tooltip(index :: int, tooltip :: String, ) :: {:ok :: label, state :: State, }
spec PopupMenu.set_submenu_popup_delay(seconds :: float, ) :: {:ok :: label, state :: State, }
spec PopupMenu.toggle_item_checked(index :: int, ) :: {:ok :: label, state :: State, }
spec PopupMenu.toggle_item_multistate(index :: int, ) :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.create_from_image(image :: Image, compression_mode :: enum::PortableCompressedTexture2D.CompressionMode, normal_map :: bool, lossy_quality :: float, ) :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.get_compression_mode() :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.get_format() :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.get_size_override() :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.is_keeping_all_compressed_buffers() :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.is_keeping_compressed_buffer() :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.set_keep_all_compressed_buffers(keep :: bool, ) :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.set_keep_compressed_buffer(keep :: bool, ) :: {:ok :: label, state :: State, }
spec PortableCompressedTexture2D.set_size_override(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec PrimitiveMesh._create_mesh_array() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.get_add_uv2() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.get_custom_aabb() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.get_flip_faces() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.get_material() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.get_mesh_arrays() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.get_uv2_padding() :: {:ok :: label, state :: State, }
spec PrimitiveMesh.set_add_uv2(add_uv2 :: bool, ) :: {:ok :: label, state :: State, }
spec PrimitiveMesh.set_custom_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec PrimitiveMesh.set_flip_faces(flip_faces :: bool, ) :: {:ok :: label, state :: State, }
spec PrimitiveMesh.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec PrimitiveMesh.set_uv2_padding(uv2_padding :: float, ) :: {:ok :: label, state :: State, }
spec PrismMesh.get_left_to_right() :: {:ok :: label, state :: State, }
spec PrismMesh.get_size() :: {:ok :: label, state :: State, }
spec PrismMesh.get_subdivide_depth() :: {:ok :: label, state :: State, }
spec PrismMesh.get_subdivide_height() :: {:ok :: label, state :: State, }
spec PrismMesh.get_subdivide_width() :: {:ok :: label, state :: State, }
spec PrismMesh.set_left_to_right(left_to_right :: float, ) :: {:ok :: label, state :: State, }
spec PrismMesh.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec PrismMesh.set_subdivide_depth(segments :: int, ) :: {:ok :: label, state :: State, }
spec PrismMesh.set_subdivide_height(segments :: int, ) :: {:ok :: label, state :: State, }
spec PrismMesh.set_subdivide_width(segments :: int, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_ground_bottom_color() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_ground_curve() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_ground_energy_multiplier() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_ground_horizon_color() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sky_cover() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sky_cover_modulate() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sky_curve() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sky_energy_multiplier() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sky_horizon_color() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sky_top_color() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sun_angle_max() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_sun_curve() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.get_use_debanding() :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_ground_bottom_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_ground_curve(curve :: float, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_ground_energy_multiplier(energy :: float, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_ground_horizon_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sky_cover(sky_cover :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sky_cover_modulate(color :: Color, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sky_curve(curve :: float, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sky_energy_multiplier(multiplier :: float, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sky_horizon_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sky_top_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sun_angle_max(degrees :: float, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_sun_curve(curve :: float, ) :: {:ok :: label, state :: State, }
spec ProceduralSkyMaterial.set_use_debanding(use_debanding :: bool, ) :: {:ok :: label, state :: State, }
spec ProgressBar.get_fill_mode() :: {:ok :: label, state :: State, }
spec ProgressBar.is_percentage_shown() :: {:ok :: label, state :: State, }
spec ProgressBar.set_fill_mode(mode :: int, ) :: {:ok :: label, state :: State, }
spec ProgressBar.set_show_percentage(visible :: bool, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.add_property_info(hint :: Dictionary, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.clear(name :: String, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.get_global_class_list() :: {:ok :: label, state :: State, }
spec ProjectSettings.get_order(name :: String, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.get_setting(name :: String, default_value :: Variant, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.get_setting_with_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.globalize_path(path :: String, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.has_setting(name :: String, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.load_resource_pack(pack :: String, replace_files :: bool, offset :: int, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.localize_path(path :: String, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.save() :: {:ok :: label, state :: State, }
spec ProjectSettings.save_custom(file :: String, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.set_initial_value(name :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.set_order(name :: String, position :: int, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.set_restart_if_changed(name :: String, restart :: bool, ) :: {:ok :: label, state :: State, }
spec ProjectSettings.set_setting(name :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Projection.create_depth_correction(flip_y :: bool, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_fit_aabb(aabb :: AABB, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_for_hmd(eye :: int, aspect :: float, intraocular_dist :: float, display_width :: float, display_to_lens :: float, oversample :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_frustum(left :: float, right :: float, bottom :: float, top :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_frustum_aspect(size :: float, aspect :: float, offset :: Vector2, z_near :: float, z_far :: float, flip_fov :: bool, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_light_atlas_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_orthogonal(left :: float, right :: float, bottom :: float, top :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_orthogonal_aspect(size :: float, aspect :: float, z_near :: float, z_far :: float, flip_fov :: bool, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_perspective(fovy :: float, aspect :: float, z_near :: float, z_far :: float, flip_fov :: bool, ) :: {:ok :: label, state :: State, Projection}
spec Projection.create_perspective_hmd(fovy :: float, aspect :: float, z_near :: float, z_far :: float, flip_fov :: bool, eye :: int, intraocular_dist :: float, convergence_dist :: float, ) :: {:ok :: label, state :: State, Projection}
spec Projection.determinant() :: {:ok :: label, state :: State, float}
spec Projection.flipped_y() :: {:ok :: label, state :: State, Projection}
spec Projection.get_aspect() :: {:ok :: label, state :: State, float}
spec Projection.get_far_plane_half_extents() :: {:ok :: label, state :: State, Vector2}
spec Projection.get_fov() :: {:ok :: label, state :: State, float}
spec Projection.get_fovy(fovx :: float, aspect :: float, ) :: {:ok :: label, state :: State, float}
spec Projection.get_lod_multiplier() :: {:ok :: label, state :: State, float}
spec Projection.get_pixels_per_meter(for_pixel_width :: int, ) :: {:ok :: label, state :: State, int}
spec Projection.get_projection_plane(plane :: int, ) :: {:ok :: label, state :: State, Plane}
spec Projection.get_viewport_half_extents() :: {:ok :: label, state :: State, Vector2}
spec Projection.get_z_far() :: {:ok :: label, state :: State, float}
spec Projection.get_z_near() :: {:ok :: label, state :: State, float}
spec Projection.inverse() :: {:ok :: label, state :: State, Projection}
spec Projection.is_orthogonal() :: {:ok :: label, state :: State, bool}
spec Projection.jitter_offseted(offset :: Vector2, ) :: {:ok :: label, state :: State, Projection}
spec Projection.perspective_znear_adjusted(new_znear :: float, ) :: {:ok :: label, state :: State, Projection}
spec PropertyTweener.as_relative() :: {:ok :: label, state :: State, }
spec PropertyTweener.from(value :: Variant, ) :: {:ok :: label, state :: State, }
spec PropertyTweener.from_current() :: {:ok :: label, state :: State, }
spec PropertyTweener.set_delay(delay :: float, ) :: {:ok :: label, state :: State, }
spec PropertyTweener.set_ease(ease :: enum::Tween.EaseType, ) :: {:ok :: label, state :: State, }
spec PropertyTweener.set_trans(trans :: enum::Tween.TransitionType, ) :: {:ok :: label, state :: State, }
spec QuadOccluder3D.get_size() :: {:ok :: label, state :: State, }
spec QuadOccluder3D.set_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec Quaternion.angle_to(to :: Quaternion, ) :: {:ok :: label, state :: State, float}
spec Quaternion.dot(with :: Quaternion, ) :: {:ok :: label, state :: State, float}
spec Quaternion.exp() :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.from_euler(euler :: Vector3, ) :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.get_angle() :: {:ok :: label, state :: State, float}
spec Quaternion.get_axis() :: {:ok :: label, state :: State, Vector3}
spec Quaternion.get_euler(order :: int, ) :: {:ok :: label, state :: State, Vector3}
spec Quaternion.inverse() :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.is_equal_approx(to :: Quaternion, ) :: {:ok :: label, state :: State, bool}
spec Quaternion.is_finite() :: {:ok :: label, state :: State, bool}
spec Quaternion.is_normalized() :: {:ok :: label, state :: State, bool}
spec Quaternion.length() :: {:ok :: label, state :: State, float}
spec Quaternion.length_squared() :: {:ok :: label, state :: State, float}
spec Quaternion.log() :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.normalized() :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.slerp(to :: Quaternion, weight :: float, ) :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.slerpni(to :: Quaternion, weight :: float, ) :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.spherical_cubic_interpolate(b :: Quaternion, pre_a :: Quaternion, post_b :: Quaternion, weight :: float, ) :: {:ok :: label, state :: State, Quaternion}
spec Quaternion.spherical_cubic_interpolate_in_time(b :: Quaternion, pre_a :: Quaternion, post_b :: Quaternion, weight :: float, b_t :: float, pre_a_t :: float, post_b_t :: float, ) :: {:ok :: label, state :: State, Quaternion}
spec RDAttachmentFormat.get_format() :: {:ok :: label, state :: State, }
spec RDAttachmentFormat.get_samples() :: {:ok :: label, state :: State, }
spec RDAttachmentFormat.get_usage_flags() :: {:ok :: label, state :: State, }
spec RDAttachmentFormat.set_format(p_member :: enum::RenderingDevice.DataFormat, ) :: {:ok :: label, state :: State, }
spec RDAttachmentFormat.set_samples(p_member :: enum::RenderingDevice.TextureSamples, ) :: {:ok :: label, state :: State, }
spec RDAttachmentFormat.set_usage_flags(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDFramebufferPass.get_color_attachments() :: {:ok :: label, state :: State, }
spec RDFramebufferPass.get_depth_attachment() :: {:ok :: label, state :: State, }
spec RDFramebufferPass.get_input_attachments() :: {:ok :: label, state :: State, }
spec RDFramebufferPass.get_preserve_attachments() :: {:ok :: label, state :: State, }
spec RDFramebufferPass.get_resolve_attachments() :: {:ok :: label, state :: State, }
spec RDFramebufferPass.set_color_attachments(p_member :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RDFramebufferPass.set_depth_attachment(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDFramebufferPass.set_input_attachments(p_member :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RDFramebufferPass.set_preserve_attachments(p_member :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RDFramebufferPass.set_resolve_attachments(p_member :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.get_attachments() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.get_blend_constant() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.get_enable_logic_op() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.get_logic_op() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.set_attachments(attachments :: typedarray::RDPipelineColorBlendStateAttachment, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.set_blend_constant(p_member :: Color, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.set_enable_logic_op(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendState.set_logic_op(p_member :: enum::RenderingDevice.LogicOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_alpha_blend_op() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_color_blend_op() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_dst_alpha_blend_factor() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_dst_color_blend_factor() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_enable_blend() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_src_alpha_blend_factor() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_src_color_blend_factor() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_write_a() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_write_b() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_write_g() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.get_write_r() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_alpha_blend_op(p_member :: enum::RenderingDevice.BlendOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_as_mix() :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_color_blend_op(p_member :: enum::RenderingDevice.BlendOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_dst_alpha_blend_factor(p_member :: enum::RenderingDevice.BlendFactor, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_dst_color_blend_factor(p_member :: enum::RenderingDevice.BlendFactor, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_enable_blend(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_src_alpha_blend_factor(p_member :: enum::RenderingDevice.BlendFactor, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_src_color_blend_factor(p_member :: enum::RenderingDevice.BlendFactor, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_write_a(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_write_b(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_write_g(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineColorBlendStateAttachment.set_write_r(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_compare() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_compare_mask() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_depth_fail() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_fail() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_pass() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_reference() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_back_op_write_mask() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_depth_compare_operator() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_depth_range_max() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_depth_range_min() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_enable_depth_range() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_enable_depth_test() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_enable_depth_write() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_enable_stencil() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_compare() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_compare_mask() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_depth_fail() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_fail() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_pass() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_reference() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.get_front_op_write_mask() :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_compare(p_member :: enum::RenderingDevice.CompareOperator, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_compare_mask(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_depth_fail(p_member :: enum::RenderingDevice.StencilOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_fail(p_member :: enum::RenderingDevice.StencilOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_pass(p_member :: enum::RenderingDevice.StencilOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_reference(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_back_op_write_mask(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_depth_compare_operator(p_member :: enum::RenderingDevice.CompareOperator, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_depth_range_max(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_depth_range_min(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_enable_depth_range(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_enable_depth_test(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_enable_depth_write(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_enable_stencil(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_compare(p_member :: enum::RenderingDevice.CompareOperator, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_compare_mask(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_depth_fail(p_member :: enum::RenderingDevice.StencilOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_fail(p_member :: enum::RenderingDevice.StencilOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_pass(p_member :: enum::RenderingDevice.StencilOperation, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_reference(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineDepthStencilState.set_front_op_write_mask(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.get_enable_alpha_to_coverage() :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.get_enable_alpha_to_one() :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.get_enable_sample_shading() :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.get_min_sample_shading() :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.get_sample_count() :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.get_sample_masks() :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.set_enable_alpha_to_coverage(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.set_enable_alpha_to_one(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.set_enable_sample_shading(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.set_min_sample_shading(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.set_sample_count(p_member :: enum::RenderingDevice.TextureSamples, ) :: {:ok :: label, state :: State, }
spec RDPipelineMultisampleState.set_sample_masks(masks :: typedarray::int, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_cull_mode() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_depth_bias_clamp() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_depth_bias_constant_factor() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_depth_bias_enabled() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_depth_bias_slope_factor() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_discard_primitives() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_enable_depth_clamp() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_front_face() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_line_width() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_patch_control_points() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.get_wireframe() :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_cull_mode(p_member :: enum::RenderingDevice.PolygonCullMode, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_depth_bias_clamp(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_depth_bias_constant_factor(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_depth_bias_enabled(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_depth_bias_slope_factor(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_discard_primitives(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_enable_depth_clamp(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_front_face(p_member :: enum::RenderingDevice.PolygonFrontFace, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_line_width(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_patch_control_points(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineRasterizationState.set_wireframe(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDPipelineSpecializationConstant.get_constant_id() :: {:ok :: label, state :: State, }
spec RDPipelineSpecializationConstant.get_value() :: {:ok :: label, state :: State, }
spec RDPipelineSpecializationConstant.set_constant_id(constant_id :: int, ) :: {:ok :: label, state :: State, }
spec RDPipelineSpecializationConstant.set_value(value :: Variant, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.get_anisotropy_max() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_border_color() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_compare_op() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_enable_compare() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_lod_bias() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_mag_filter() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_max_lod() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_min_filter() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_min_lod() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_mip_filter() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_repeat_u() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_repeat_v() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_repeat_w() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_unnormalized_uvw() :: {:ok :: label, state :: State, }
spec RDSamplerState.get_use_anisotropy() :: {:ok :: label, state :: State, }
spec RDSamplerState.set_anisotropy_max(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_border_color(p_member :: enum::RenderingDevice.SamplerBorderColor, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_compare_op(p_member :: enum::RenderingDevice.CompareOperator, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_enable_compare(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_lod_bias(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_mag_filter(p_member :: enum::RenderingDevice.SamplerFilter, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_max_lod(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_min_filter(p_member :: enum::RenderingDevice.SamplerFilter, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_min_lod(p_member :: float, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_mip_filter(p_member :: enum::RenderingDevice.SamplerFilter, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_repeat_u(p_member :: enum::RenderingDevice.SamplerRepeatMode, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_repeat_v(p_member :: enum::RenderingDevice.SamplerRepeatMode, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_repeat_w(p_member :: enum::RenderingDevice.SamplerRepeatMode, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_unnormalized_uvw(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDSamplerState.set_use_anisotropy(p_member :: bool, ) :: {:ok :: label, state :: State, }
spec RDShaderFile.get_base_error() :: {:ok :: label, state :: State, }
spec RDShaderFile.get_spirv(version :: StringName, ) :: {:ok :: label, state :: State, }
spec RDShaderFile.get_version_list() :: {:ok :: label, state :: State, }
spec RDShaderFile.set_base_error(error :: String, ) :: {:ok :: label, state :: State, }
spec RDShaderFile.set_bytecode(bytecode :: RDShaderSPIRV, version :: StringName, ) :: {:ok :: label, state :: State, }
spec RDShaderSPIRV.get_stage_bytecode(stage :: enum::RenderingDevice.ShaderStage, ) :: {:ok :: label, state :: State, }
spec RDShaderSPIRV.get_stage_compile_error(stage :: enum::RenderingDevice.ShaderStage, ) :: {:ok :: label, state :: State, }
spec RDShaderSPIRV.set_stage_bytecode(stage :: enum::RenderingDevice.ShaderStage, bytecode :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RDShaderSPIRV.set_stage_compile_error(stage :: enum::RenderingDevice.ShaderStage, compile_error :: String, ) :: {:ok :: label, state :: State, }
spec RDShaderSource.get_language() :: {:ok :: label, state :: State, }
spec RDShaderSource.get_stage_source(stage :: enum::RenderingDevice.ShaderStage, ) :: {:ok :: label, state :: State, }
spec RDShaderSource.set_language(language :: enum::RenderingDevice.ShaderLanguage, ) :: {:ok :: label, state :: State, }
spec RDShaderSource.set_stage_source(stage :: enum::RenderingDevice.ShaderStage, source :: String, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.add_shareable_format(format :: enum::RenderingDevice.DataFormat, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_array_layers() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_depth() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_format() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_height() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_mipmaps() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_samples() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_texture_type() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_usage_bits() :: {:ok :: label, state :: State, }
spec RDTextureFormat.get_width() :: {:ok :: label, state :: State, }
spec RDTextureFormat.remove_shareable_format(format :: enum::RenderingDevice.DataFormat, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_array_layers(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_depth(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_format(p_member :: enum::RenderingDevice.DataFormat, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_height(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_mipmaps(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_samples(p_member :: enum::RenderingDevice.TextureSamples, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_texture_type(p_member :: enum::RenderingDevice.TextureType, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_usage_bits(p_member :: bitfield::RenderingDevice.TextureUsageBits, ) :: {:ok :: label, state :: State, }
spec RDTextureFormat.set_width(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDTextureView.get_format_override() :: {:ok :: label, state :: State, }
spec RDTextureView.get_swizzle_a() :: {:ok :: label, state :: State, }
spec RDTextureView.get_swizzle_b() :: {:ok :: label, state :: State, }
spec RDTextureView.get_swizzle_g() :: {:ok :: label, state :: State, }
spec RDTextureView.get_swizzle_r() :: {:ok :: label, state :: State, }
spec RDTextureView.set_format_override(p_member :: enum::RenderingDevice.DataFormat, ) :: {:ok :: label, state :: State, }
spec RDTextureView.set_swizzle_a(p_member :: enum::RenderingDevice.TextureSwizzle, ) :: {:ok :: label, state :: State, }
spec RDTextureView.set_swizzle_b(p_member :: enum::RenderingDevice.TextureSwizzle, ) :: {:ok :: label, state :: State, }
spec RDTextureView.set_swizzle_g(p_member :: enum::RenderingDevice.TextureSwizzle, ) :: {:ok :: label, state :: State, }
spec RDTextureView.set_swizzle_r(p_member :: enum::RenderingDevice.TextureSwizzle, ) :: {:ok :: label, state :: State, }
spec RDUniform.add_id(id :: RID, ) :: {:ok :: label, state :: State, }
spec RDUniform.clear_ids() :: {:ok :: label, state :: State, }
spec RDUniform.get_binding() :: {:ok :: label, state :: State, }
spec RDUniform.get_ids() :: {:ok :: label, state :: State, }
spec RDUniform.get_uniform_type() :: {:ok :: label, state :: State, }
spec RDUniform.set_binding(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDUniform.set_uniform_type(p_member :: enum::RenderingDevice.UniformType, ) :: {:ok :: label, state :: State, }
spec RDVertexAttribute.get_format() :: {:ok :: label, state :: State, }
spec RDVertexAttribute.get_frequency() :: {:ok :: label, state :: State, }
spec RDVertexAttribute.get_location() :: {:ok :: label, state :: State, }
spec RDVertexAttribute.get_offset() :: {:ok :: label, state :: State, }
spec RDVertexAttribute.get_stride() :: {:ok :: label, state :: State, }
spec RDVertexAttribute.set_format(p_member :: enum::RenderingDevice.DataFormat, ) :: {:ok :: label, state :: State, }
spec RDVertexAttribute.set_frequency(p_member :: enum::RenderingDevice.VertexFrequency, ) :: {:ok :: label, state :: State, }
spec RDVertexAttribute.set_location(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDVertexAttribute.set_offset(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RDVertexAttribute.set_stride(p_member :: int, ) :: {:ok :: label, state :: State, }
spec RID.get_id() :: {:ok :: label, state :: State, int}
spec RID.is_valid() :: {:ok :: label, state :: State, bool}
spec RandomNumberGenerator.get_seed() :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.get_state() :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.randf() :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.randf_range(from :: float, to :: float, ) :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.randfn(mean :: float, deviation :: float, ) :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.randi() :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.randi_range(from :: int, to :: int, ) :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.randomize() :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.set_seed(seed :: int, ) :: {:ok :: label, state :: State, }
spec RandomNumberGenerator.set_state(state :: int, ) :: {:ok :: label, state :: State, }
spec Range._value_changed(new_value :: float, ) :: {:ok :: label, state :: State, }
spec Range.get_as_ratio() :: {:ok :: label, state :: State, }
spec Range.get_max() :: {:ok :: label, state :: State, }
spec Range.get_min() :: {:ok :: label, state :: State, }
spec Range.get_page() :: {:ok :: label, state :: State, }
spec Range.get_step() :: {:ok :: label, state :: State, }
spec Range.get_value() :: {:ok :: label, state :: State, }
spec Range.is_greater_allowed() :: {:ok :: label, state :: State, }
spec Range.is_lesser_allowed() :: {:ok :: label, state :: State, }
spec Range.is_ratio_exp() :: {:ok :: label, state :: State, }
spec Range.is_using_rounded_values() :: {:ok :: label, state :: State, }
spec Range.set_allow_greater(allow :: bool, ) :: {:ok :: label, state :: State, }
spec Range.set_allow_lesser(allow :: bool, ) :: {:ok :: label, state :: State, }
spec Range.set_as_ratio(value :: float, ) :: {:ok :: label, state :: State, }
spec Range.set_exp_ratio(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Range.set_max(maximum :: float, ) :: {:ok :: label, state :: State, }
spec Range.set_min(minimum :: float, ) :: {:ok :: label, state :: State, }
spec Range.set_page(pagesize :: float, ) :: {:ok :: label, state :: State, }
spec Range.set_step(step :: float, ) :: {:ok :: label, state :: State, }
spec Range.set_use_rounded_values(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Range.set_value(value :: float, ) :: {:ok :: label, state :: State, }
spec Range.set_value_no_signal(value :: float, ) :: {:ok :: label, state :: State, }
spec Range.share(with :: Node, ) :: {:ok :: label, state :: State, }
spec Range.unshare() :: {:ok :: label, state :: State, }
spec RayCast2D.add_exception(node :: CollisionObject2D, ) :: {:ok :: label, state :: State, }
spec RayCast2D.add_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec RayCast2D.clear_exceptions() :: {:ok :: label, state :: State, }
spec RayCast2D.force_raycast_update() :: {:ok :: label, state :: State, }
spec RayCast2D.get_collider() :: {:ok :: label, state :: State, }
spec RayCast2D.get_collider_rid() :: {:ok :: label, state :: State, }
spec RayCast2D.get_collider_shape() :: {:ok :: label, state :: State, }
spec RayCast2D.get_collision_mask() :: {:ok :: label, state :: State, }
spec RayCast2D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec RayCast2D.get_collision_normal() :: {:ok :: label, state :: State, }
spec RayCast2D.get_collision_point() :: {:ok :: label, state :: State, }
spec RayCast2D.get_exclude_parent_body() :: {:ok :: label, state :: State, }
spec RayCast2D.get_target_position() :: {:ok :: label, state :: State, }
spec RayCast2D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec RayCast2D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec RayCast2D.is_colliding() :: {:ok :: label, state :: State, }
spec RayCast2D.is_enabled() :: {:ok :: label, state :: State, }
spec RayCast2D.is_hit_from_inside_enabled() :: {:ok :: label, state :: State, }
spec RayCast2D.remove_exception(node :: CollisionObject2D, ) :: {:ok :: label, state :: State, }
spec RayCast2D.remove_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_exclude_parent_body(mask :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_hit_from_inside(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast2D.set_target_position(local_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec RayCast3D.add_exception(node :: CollisionObject3D, ) :: {:ok :: label, state :: State, }
spec RayCast3D.add_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec RayCast3D.clear_exceptions() :: {:ok :: label, state :: State, }
spec RayCast3D.force_raycast_update() :: {:ok :: label, state :: State, }
spec RayCast3D.get_collider() :: {:ok :: label, state :: State, }
spec RayCast3D.get_collider_rid() :: {:ok :: label, state :: State, }
spec RayCast3D.get_collider_shape() :: {:ok :: label, state :: State, }
spec RayCast3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec RayCast3D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec RayCast3D.get_collision_normal() :: {:ok :: label, state :: State, }
spec RayCast3D.get_collision_point() :: {:ok :: label, state :: State, }
spec RayCast3D.get_debug_shape_custom_color() :: {:ok :: label, state :: State, }
spec RayCast3D.get_debug_shape_thickness() :: {:ok :: label, state :: State, }
spec RayCast3D.get_exclude_parent_body() :: {:ok :: label, state :: State, }
spec RayCast3D.get_target_position() :: {:ok :: label, state :: State, }
spec RayCast3D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec RayCast3D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec RayCast3D.is_colliding() :: {:ok :: label, state :: State, }
spec RayCast3D.is_enabled() :: {:ok :: label, state :: State, }
spec RayCast3D.is_hit_from_inside_enabled() :: {:ok :: label, state :: State, }
spec RayCast3D.remove_exception(node :: CollisionObject3D, ) :: {:ok :: label, state :: State, }
spec RayCast3D.remove_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_debug_shape_custom_color(debug_shape_custom_color :: Color, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_debug_shape_thickness(debug_shape_thickness :: int, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_exclude_parent_body(mask :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_hit_from_inside(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RayCast3D.set_target_position(local_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Rect2.abs() :: {:ok :: label, state :: State, Rect2}
spec Rect2.encloses(b :: Rect2, ) :: {:ok :: label, state :: State, bool}
spec Rect2.expand(to :: Vector2, ) :: {:ok :: label, state :: State, Rect2}
spec Rect2.get_area() :: {:ok :: label, state :: State, float}
spec Rect2.get_center() :: {:ok :: label, state :: State, Vector2}
spec Rect2.grow(amount :: float, ) :: {:ok :: label, state :: State, Rect2}
spec Rect2.grow_individual(left :: float, top :: float, right :: float, bottom :: float, ) :: {:ok :: label, state :: State, Rect2}
spec Rect2.grow_side(side :: int, amount :: float, ) :: {:ok :: label, state :: State, Rect2}
spec Rect2.has_area() :: {:ok :: label, state :: State, bool}
spec Rect2.has_point(point :: Vector2, ) :: {:ok :: label, state :: State, bool}
spec Rect2.intersection(b :: Rect2, ) :: {:ok :: label, state :: State, Rect2}
spec Rect2.intersects(b :: Rect2, include_borders :: bool, ) :: {:ok :: label, state :: State, bool}
spec Rect2.is_equal_approx(rect :: Rect2, ) :: {:ok :: label, state :: State, bool}
spec Rect2.is_finite() :: {:ok :: label, state :: State, bool}
spec Rect2.merge(b :: Rect2, ) :: {:ok :: label, state :: State, Rect2}
spec Rect2i.abs() :: {:ok :: label, state :: State, Rect2i}
spec Rect2i.encloses(b :: Rect2i, ) :: {:ok :: label, state :: State, bool}
spec Rect2i.expand(to :: Vector2i, ) :: {:ok :: label, state :: State, Rect2i}
spec Rect2i.get_area() :: {:ok :: label, state :: State, int}
spec Rect2i.get_center() :: {:ok :: label, state :: State, Vector2i}
spec Rect2i.grow(amount :: int, ) :: {:ok :: label, state :: State, Rect2i}
spec Rect2i.grow_individual(left :: int, top :: int, right :: int, bottom :: int, ) :: {:ok :: label, state :: State, Rect2i}
spec Rect2i.grow_side(side :: int, amount :: int, ) :: {:ok :: label, state :: State, Rect2i}
spec Rect2i.has_area() :: {:ok :: label, state :: State, bool}
spec Rect2i.has_point(point :: Vector2i, ) :: {:ok :: label, state :: State, bool}
spec Rect2i.intersection(b :: Rect2i, ) :: {:ok :: label, state :: State, Rect2i}
spec Rect2i.intersects(b :: Rect2i, ) :: {:ok :: label, state :: State, bool}
spec Rect2i.merge(b :: Rect2i, ) :: {:ok :: label, state :: State, Rect2i}
spec RectangleShape2D.get_size() :: {:ok :: label, state :: State, }
spec RectangleShape2D.set_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec RefCounted.get_reference_count() :: {:ok :: label, state :: State, }
spec RefCounted.init_ref() :: {:ok :: label, state :: State, }
spec RefCounted.reference() :: {:ok :: label, state :: State, }
spec RefCounted.unreference() :: {:ok :: label, state :: State, }
spec ReferenceRect.get_border_color() :: {:ok :: label, state :: State, }
spec ReferenceRect.get_border_width() :: {:ok :: label, state :: State, }
spec ReferenceRect.get_editor_only() :: {:ok :: label, state :: State, }
spec ReferenceRect.set_border_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec ReferenceRect.set_border_width(width :: float, ) :: {:ok :: label, state :: State, }
spec ReferenceRect.set_editor_only(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.are_shadows_enabled() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_ambient_color() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_ambient_color_energy() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_ambient_mode() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_cull_mask() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_intensity() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_max_distance() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_mesh_lod_threshold() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_origin_offset() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_size() :: {:ok :: label, state :: State, }
spec ReflectionProbe.get_update_mode() :: {:ok :: label, state :: State, }
spec ReflectionProbe.is_box_projection_enabled() :: {:ok :: label, state :: State, }
spec ReflectionProbe.is_set_as_interior() :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_ambient_color(ambient :: Color, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_ambient_color_energy(ambient_energy :: float, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_ambient_mode(ambient :: enum::ReflectionProbe.AmbientMode, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_as_interior(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_cull_mask(layers :: int, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_enable_box_projection(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_enable_shadows(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_intensity(intensity :: float, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_max_distance(max_distance :: float, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_mesh_lod_threshold(ratio :: float, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_origin_offset(origin_offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec ReflectionProbe.set_update_mode(mode :: enum::ReflectionProbe.UpdateMode, ) :: {:ok :: label, state :: State, }
spec RegEx.clear() :: {:ok :: label, state :: State, }
spec RegEx.compile(pattern :: String, ) :: {:ok :: label, state :: State, }
spec RegEx.create_from_string(pattern :: String, ) :: {:ok :: label, state :: State, }
spec RegEx.get_group_count() :: {:ok :: label, state :: State, }
spec RegEx.get_names() :: {:ok :: label, state :: State, }
spec RegEx.get_pattern() :: {:ok :: label, state :: State, }
spec RegEx.is_valid() :: {:ok :: label, state :: State, }
spec RegEx.search(subject :: String, offset :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec RegEx.search_all(subject :: String, offset :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec RegEx.sub(subject :: String, replacement :: String, all :: bool, offset :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec RegExMatch.get_end(name :: Variant, ) :: {:ok :: label, state :: State, }
spec RegExMatch.get_group_count() :: {:ok :: label, state :: State, }
spec RegExMatch.get_names() :: {:ok :: label, state :: State, }
spec RegExMatch.get_start(name :: Variant, ) :: {:ok :: label, state :: State, }
spec RegExMatch.get_string(name :: Variant, ) :: {:ok :: label, state :: State, }
spec RegExMatch.get_strings() :: {:ok :: label, state :: State, }
spec RegExMatch.get_subject() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.force_update_cache() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.get_remote_node() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.get_update_position() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.get_update_rotation() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.get_update_scale() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.get_use_global_coordinates() :: {:ok :: label, state :: State, }
spec RemoteTransform2D.set_remote_node(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RemoteTransform2D.set_update_position(update_remote_position :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform2D.set_update_rotation(update_remote_rotation :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform2D.set_update_scale(update_remote_scale :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform2D.set_use_global_coordinates(use_global_coordinates :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform3D.force_update_cache() :: {:ok :: label, state :: State, }
spec RemoteTransform3D.get_remote_node() :: {:ok :: label, state :: State, }
spec RemoteTransform3D.get_update_position() :: {:ok :: label, state :: State, }
spec RemoteTransform3D.get_update_rotation() :: {:ok :: label, state :: State, }
spec RemoteTransform3D.get_update_scale() :: {:ok :: label, state :: State, }
spec RemoteTransform3D.get_use_global_coordinates() :: {:ok :: label, state :: State, }
spec RemoteTransform3D.set_remote_node(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RemoteTransform3D.set_update_position(update_remote_position :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform3D.set_update_rotation(update_remote_rotation :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform3D.set_update_scale(update_remote_scale :: bool, ) :: {:ok :: label, state :: State, }
spec RemoteTransform3D.set_use_global_coordinates(use_global_coordinates :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.enable_foot_placement(p_enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.enable_hip_placement(p_enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.enable_solve_ik_every_frame(p_enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.get_arm_lower_limb_twist() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_lower_twist_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_pole_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_roll_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_target_position_influence() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_target_rotation_influence() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_twist_inflection_point_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_twist_overflow() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_upper_limb_twist() :: {:ok :: label, state :: State, }
spec RenIK.get_arm_upper_twist_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_in_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_in_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_out_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_out_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_apex_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_contact_point_ease() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_contact_point_ease_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_drop_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_drop_horizontal_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_drop_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_drop_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_drop_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_drop_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_ground_time() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_lift_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_lift_horizontal_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_lift_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_lift_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_lift_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_lift_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_scaling_ease() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_speed_scalar_max() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_speed_scalar_min() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_tip_toe_angle_max() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_tip_toe_distance_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_backward_tip_toe_speed_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_collision_mask() :: {:ok :: label, state :: State, }
spec RenIK.get_collision_mask_bit(bit :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.get_foot_left_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_foot_left_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_foot_left_target_path() :: {:ok :: label, state :: State, }
spec RenIK.get_foot_right_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_foot_right_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_foot_right_target_path() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_in_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_in_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_out_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_out_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_apex_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_contact_point_ease() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_contact_point_ease_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_drop_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_drop_horizontal_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_drop_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_drop_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_drop_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_drop_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_ground_time() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_lift_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_lift_horizontal_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_lift_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_lift_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_lift_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_lift_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_scaling_ease() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_speed_scalar_max() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_speed_scalar_min() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_tip_toe_angle_max() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_tip_toe_distance_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_forward_tip_toe_speed_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_hand_left_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_hand_left_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_hand_left_target_path() :: {:ok :: label, state :: State, }
spec RenIK.get_hand_right_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_hand_right_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_hand_right_target_path() :: {:ok :: label, state :: State, }
spec RenIK.get_head_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_head_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_head_target_path() :: {:ok :: label, state :: State, }
spec RenIK.get_hip_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_hip_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_hip_target_path() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_lower_limb_twist() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_lower_twist_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_pole_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_roll_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_target_position_influence() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_target_rotation_influence() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_twist_inflection_point_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_twist_overflow() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_upper_limb_twist() :: {:ok :: label, state :: State, }
spec RenIK.get_leg_upper_twist_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_live_preview() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_arm_left_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_arm_left_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_arm_right_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_arm_right_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_leg_left_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_leg_left_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_leg_right_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_leg_right_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_lower_spine_stiffness() :: {:ok :: label, state :: State, }
spec RenIK.get_shoulder_influence() :: {:ok :: label, state :: State, }
spec RenIK.get_shoulder_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_shoulder_pole_offset() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_in_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_in_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_out_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_out_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_apex_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_contact_point_ease() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_contact_point_ease_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_drop_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_drop_horizontal_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_drop_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_drop_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_drop_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_drop_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_ground_time() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_lift_angle() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_lift_horizontal_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_lift_time_base() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_lift_time_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_lift_vertical() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_lift_vertical_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_scaling_ease() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_speed_scalar_max() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_speed_scalar_min() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_tip_toe_angle_max() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_tip_toe_distance_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_sideways_tip_toe_speed_scalar() :: {:ok :: label, state :: State, }
spec RenIK.get_skeleton_path() :: {:ok :: label, state :: State, }
spec RenIK.get_spine_curve() :: {:ok :: label, state :: State, }
spec RenIK.get_spine_twist() :: {:ok :: label, state :: State, }
spec RenIK.get_spine_twist_start() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_arm_left_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_arm_left_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_arm_right_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_arm_right_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_leg_left_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_leg_left_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_leg_right_bone() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_leg_right_bone_name() :: {:ok :: label, state :: State, }
spec RenIK.get_upper_spine_stiffness() :: {:ok :: label, state :: State, }
spec RenIK.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec RenIK.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec RenIK.set_arm_lower_limb_twist(ratio :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_lower_twist_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_pole_offset(euler :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_roll_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_target_position_influence(xyz :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_target_rotation_influence(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_twist_inflection_point_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_twist_overflow(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_upper_limb_twist(ratio :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_arm_upper_twist_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_angle(apex_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_in_time_base(apex_in_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_in_time_scalar(apex_in_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_out_time_base(apex_out_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_out_time_scalar(apex_out_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_vertical(apex_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_apex_vertical_scalar(apex_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_contact_point_ease(contact_point_ease :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_contact_point_ease_scalar(contact_point_ease_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_drop_angle(drop_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_drop_horizontal_scalar(drop_horizontal_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_drop_time_base(drop_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_drop_time_scalar(drop_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_drop_vertical(drop_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_drop_vertical_scalar(drop_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_ground_time(ground_time :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_lift_angle(lift_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_lift_horizontal_scalar(lift_horizontal_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_lift_time_base(lift_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_lift_time_scalar(lift_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_lift_vertical(lift_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_lift_vertical_scalar(lift_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_scaling_ease(scaling_ease :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_speed_scalar_max(speed_scalar_max :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_speed_scalar_min(speed_scalar_min :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_tip_toe_angle_max(tip_toe_angle_max :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_tip_toe_distance_scalar(tip_toe_distance_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_backward_tip_toe_speed_scalar(tip_toe_speed_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_collision_mask_bit(bit :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.set_foot_left_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_foot_left_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_foot_left_target_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_foot_right_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_foot_right_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_foot_right_target_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_angle(apex_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_in_time_base(apex_in_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_in_time_scalar(apex_in_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_out_time_base(apex_out_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_out_time_scalar(apex_out_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_vertical(apex_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_apex_vertical_scalar(apex_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_contact_point_ease(contact_point_ease :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_contact_point_ease_scalar(contact_point_ease_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_drop_angle(drop_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_drop_horizontal_scalar(drop_horizontal_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_drop_time_base(drop_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_drop_time_scalar(drop_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_drop_vertical(drop_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_drop_vertical_scalar(drop_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_ground_time(ground_time :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_lift_angle(lift_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_lift_horizontal_scalar(lift_horizontal_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_lift_time_base(lift_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_lift_time_scalar(lift_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_lift_vertical(lift_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_lift_vertical_scalar(lift_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_scaling_ease(scaling_ease :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_speed_scalar_max(speed_scalar_max :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_speed_scalar_min(speed_scalar_min :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_tip_toe_angle_max(tip_toe_angle_max :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_tip_toe_distance_scalar(tip_toe_distance_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_forward_tip_toe_speed_scalar(tip_toe_speed_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hand_left_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hand_left_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hand_left_target_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hand_right_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hand_right_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hand_right_target_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_head_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_head_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_head_target_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hip_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hip_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_hip_target_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_lower_limb_twist(ratio :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_lower_twist_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_pole_offset(euler :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_roll_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_target_position_influence(xyz :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_target_rotation_influence(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_twist_inflection_point_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_twist_overflow(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_upper_limb_twist(ratio :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_leg_upper_twist_offset(degrees :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_live_preview(p_enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_arm_left_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_arm_left_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_arm_right_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_arm_right_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_leg_left_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_leg_left_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_leg_right_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_leg_right_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_lower_spine_stiffness(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_shoulder_influence(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_shoulder_offset(euler :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_shoulder_pole_offset(euler :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_angle(apex_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_in_time_base(apex_in_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_in_time_scalar(apex_in_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_out_time_base(apex_out_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_out_time_scalar(apex_out_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_vertical(apex_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_apex_vertical_scalar(apex_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_contact_point_ease(contact_point_ease :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_contact_point_ease_scalar(contact_point_ease_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_drop_angle(drop_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_drop_horizontal_scalar(drop_horizontal_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_drop_time_base(drop_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_drop_time_scalar(drop_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_drop_vertical(drop_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_drop_vertical_scalar(drop_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_ground_time(ground_time :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_lift_angle(lift_angle :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_lift_horizontal_scalar(lift_horizontal_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_lift_time_base(lift_time_base :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_lift_time_scalar(lift_time_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_lift_vertical(lift_vertical :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_lift_vertical_scalar(lift_vertical_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_scaling_ease(scaling_ease :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_speed_scalar_max(speed_scalar_max :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_speed_scalar_min(speed_scalar_min :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_tip_toe_angle_max(tip_toe_angle_max :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_tip_toe_distance_scalar(tip_toe_distance_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_sideways_tip_toe_speed_scalar(tip_toe_speed_scalar :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_skeleton_(p_node :: Node, ) :: {:ok :: label, state :: State, }
spec RenIK.set_skeleton_path(p_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RenIK.set_spine_curve(direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenIK.set_spine_twist(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_spine_twist_start(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_arm_left_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_arm_left_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_arm_right_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_arm_right_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_leg_left_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_leg_left_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_leg_right_bone(p_bone :: int, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_leg_right_bone_by_name(p_bone :: String, ) :: {:ok :: label, state :: State, }
spec RenIK.set_upper_spine_stiffness(influence :: float, ) :: {:ok :: label, state :: State, }
spec RenIK.update_ik() :: {:ok :: label, state :: State, }
spec RenIK.update_placement(_unnamed_arg0 :: float, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.barrier(from :: bitfield::RenderingDevice.BarrierMask, to :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.buffer_clear(buffer :: RID, offset :: int, size_bytes :: int, post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.buffer_get_data(buffer :: RID, offset_bytes :: int, size_bytes :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.buffer_update(buffer :: RID, offset :: int, size_bytes :: int, data :: PackedByteArray, post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.capture_timestamp(name :: String, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_add_barrier(compute_list :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_begin(allow_draw_overlap :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_bind_compute_pipeline(compute_list :: int, compute_pipeline :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_bind_uniform_set(compute_list :: int, uniform_set :: RID, set_index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_dispatch(compute_list :: int, x_groups :: int, y_groups :: int, z_groups :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_end(post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_list_set_push_constant(compute_list :: int, buffer :: PackedByteArray, size_bytes :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_pipeline_create(shader :: RID, specialization_constants :: typedarray::RDPipelineSpecializationConstant, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.compute_pipeline_is_valid(compute_pieline :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.create_local_device() :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_command_begin_label(name :: String, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_command_end_label() :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_command_insert_label(name :: String, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_begin(framebuffer :: RID, initial_color_action :: enum::RenderingDevice.InitialAction, final_color_action :: enum::RenderingDevice.FinalAction, initial_depth_action :: enum::RenderingDevice.InitialAction, final_depth_action :: enum::RenderingDevice.FinalAction, clear_color_values :: PackedColorArray, clear_depth :: float, clear_stencil :: int, region :: Rect2, storage_textures :: Array, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_begin_for_screen(screen :: int, clear_color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_begin_split(framebuffer :: RID, splits :: int, initial_color_action :: enum::RenderingDevice.InitialAction, final_color_action :: enum::RenderingDevice.FinalAction, initial_depth_action :: enum::RenderingDevice.InitialAction, final_depth_action :: enum::RenderingDevice.FinalAction, clear_color_values :: PackedColorArray, clear_depth :: float, clear_stencil :: int, region :: Rect2, storage_textures :: typedarray::RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_bind_index_array(draw_list :: int, index_array :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_bind_render_pipeline(draw_list :: int, render_pipeline :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_bind_uniform_set(draw_list :: int, uniform_set :: RID, set_index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_bind_vertex_array(draw_list :: int, vertex_array :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_disable_scissor(draw_list :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_draw(draw_list :: int, use_indices :: bool, instances :: int, procedural_vertex_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_enable_scissor(draw_list :: int, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_end(post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_set_blend_constants(draw_list :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_set_push_constant(draw_list :: int, buffer :: PackedByteArray, size_bytes :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_switch_to_next_pass() :: {:ok :: label, state :: State, }
spec RenderingDevice.draw_list_switch_to_next_pass_split(splits :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_create(textures :: typedarray::RID, validate_with_format :: int, view_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_create_empty(size :: Vector2i, samples :: enum::RenderingDevice.TextureSamples, validate_with_format :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_create_multipass(textures :: typedarray::RID, passes :: typedarray::RDFramebufferPass, validate_with_format :: int, view_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_format_create(attachments :: typedarray::RDAttachmentFormat, view_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_format_create_empty(samples :: enum::RenderingDevice.TextureSamples, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_format_create_multipass(attachments :: typedarray::RDAttachmentFormat, passes :: typedarray::RDFramebufferPass, view_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_format_get_texture_samples(format :: int, render_pass :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_get_format(framebuffer :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.framebuffer_is_valid(framebuffer :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.full_barrier() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_captured_timestamp_cpu_time(index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.get_captured_timestamp_gpu_time(index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.get_captured_timestamp_name(index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.get_captured_timestamps_count() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_captured_timestamps_frame() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_device_name() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_device_pipeline_cache_uuid() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_device_vendor_name() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_driver_resource(resource :: enum::RenderingDevice.DriverResource, rid :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.get_frame_delay() :: {:ok :: label, state :: State, }
spec RenderingDevice.get_memory_usage(type :: enum::RenderingDevice.MemoryType, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.index_array_create(index_buffer :: RID, index_offset :: int, index_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.index_buffer_create(size_indices :: int, format :: enum::RenderingDevice.IndexBufferFormat, data :: PackedByteArray, use_restart_indices :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.limit_get(limit :: enum::RenderingDevice.Limit, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.render_pipeline_create(shader :: RID, framebuffer_format :: int, vertex_format :: int, primitive :: enum::RenderingDevice.RenderPrimitive, rasterization_state :: RDPipelineRasterizationState, multisample_state :: RDPipelineMultisampleState, stencil_state :: RDPipelineDepthStencilState, color_blend_state :: RDPipelineColorBlendState, dynamic_state_flags :: bitfield::RenderingDevice.PipelineDynamicStateFlags, for_render_pass :: int, specialization_constants :: typedarray::RDPipelineSpecializationConstant, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.render_pipeline_is_valid(render_pipeline :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.sampler_create(state :: RDSamplerState, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.screen_get_framebuffer_format() :: {:ok :: label, state :: State, }
spec RenderingDevice.screen_get_height(screen :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.screen_get_width(screen :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.set_resource_name(id :: RID, name :: String, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.shader_compile_binary_from_spirv(spirv_data :: RDShaderSPIRV, name :: String, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.shader_compile_spirv_from_source(shader_source :: RDShaderSource, allow_cache :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.shader_create_from_bytecode(binary_data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.shader_create_from_spirv(spirv_data :: RDShaderSPIRV, name :: String, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.shader_get_vertex_input_attribute_mask(shader :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.storage_buffer_create(size_bytes :: int, data :: PackedByteArray, usage :: bitfield::RenderingDevice.StorageBufferUsage, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.submit() :: {:ok :: label, state :: State, }
spec RenderingDevice.sync() :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_buffer_create(size_bytes :: int, format :: enum::RenderingDevice.DataFormat, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_clear(texture :: RID, color :: Color, base_mipmap :: int, mipmap_count :: int, base_layer :: int, layer_count :: int, post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_copy(from_texture :: RID, to_texture :: RID, from_pos :: Vector3, to_pos :: Vector3, size :: Vector3, src_mipmap :: int, dst_mipmap :: int, src_layer :: int, dst_layer :: int, post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_create(format :: RDTextureFormat, view :: RDTextureView, data :: typedarray::PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_create_shared(view :: RDTextureView, with_texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_create_shared_from_slice(view :: RDTextureView, with_texture :: RID, layer :: int, mipmap :: int, mipmaps :: int, slice_type :: enum::RenderingDevice.TextureSliceType, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_get_data(texture :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_is_format_supported_for_usage(format :: enum::RenderingDevice.DataFormat, usage_flags :: bitfield::RenderingDevice.TextureUsageBits, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_is_shared(texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_is_valid(texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_resolve_multisample(from_texture :: RID, to_texture :: RID, post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.texture_update(texture :: RID, layer :: int, data :: PackedByteArray, post_barrier :: bitfield::RenderingDevice.BarrierMask, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.uniform_buffer_create(size_bytes :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.uniform_set_create(uniforms :: typedarray::RDUniform, shader :: RID, shader_set :: int, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.uniform_set_is_valid(uniform_set :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.vertex_array_create(vertex_count :: int, vertex_format :: int, src_buffers :: typedarray::RID, offsets :: PackedInt64Array, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.vertex_buffer_create(size_bytes :: int, data :: PackedByteArray, use_as_storage :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingDevice.vertex_format_create(vertex_descriptions :: typedarray::RDVertexAttribute, ) :: {:ok :: label, state :: State, }
spec RenderingServer.bake_render_uv2(base :: RID, material_overrides :: typedarray::RID, image_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_attributes_create() :: {:ok :: label, state :: State, }
spec RenderingServer.camera_attributes_set_auto_exposure(camera_attributes :: RID, enable :: bool, min_sensitivity :: float, max_sensitivity :: float, speed :: float, scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_attributes_set_dof_blur(camera_attributes :: RID, far_enable :: bool, far_distance :: float, far_transition :: float, near_enable :: bool, near_distance :: float, near_transition :: float, amount :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_attributes_set_dof_blur_bokeh_shape(shape :: enum::RenderingServer.DOFBokehShape, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_attributes_set_dof_blur_quality(quality :: enum::RenderingServer.DOFBlurQuality, use_jitter :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_attributes_set_exposure(camera_attributes :: RID, multiplier :: float, normalization :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_create() :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_camera_attributes(camera :: RID, effects :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_cull_mask(camera :: RID, layers :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_environment(camera :: RID, env :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_frustum(camera :: RID, size :: float, offset :: Vector2, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_orthogonal(camera :: RID, size :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_override_projection(camera :: RID, matrix :: Projection, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_perspective(camera :: RID, fovy_degrees :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_transform(camera :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.camera_set_use_vertical_aspect(camera :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_create() :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_animation_slice(item :: RID, animation_length :: float, slice_begin :: float, slice_end :: float, offset :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_circle(item :: RID, pos :: Vector2, radius :: float, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_clip_ignore(item :: RID, ignore :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_lcd_texture_rect_region(item :: RID, rect :: Rect2, texture :: RID, src_rect :: Rect2, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_line(item :: RID, from :: Vector2, to :: Vector2, color :: Color, width :: float, antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_mesh(item :: RID, mesh :: RID, transform :: Transform2D, modulate :: Color, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_msdf_texture_rect_region(item :: RID, rect :: Rect2, texture :: RID, src_rect :: Rect2, modulate :: Color, outline_size :: int, px_range :: float, scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_multimesh(item :: RID, mesh :: RID, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_nine_patch(item :: RID, rect :: Rect2, source :: Rect2, texture :: RID, topleft :: Vector2, bottomright :: Vector2, x_axis_mode :: enum::RenderingServer.NinePatchAxisMode, y_axis_mode :: enum::RenderingServer.NinePatchAxisMode, draw_center :: bool, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_particles(item :: RID, particles :: RID, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_polygon(item :: RID, points :: PackedVector2Array, colors :: PackedColorArray, uvs :: PackedVector2Array, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_polyline(item :: RID, points :: PackedVector2Array, colors :: PackedColorArray, width :: float, antialiased :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_primitive(item :: RID, points :: PackedVector2Array, colors :: PackedColorArray, uvs :: PackedVector2Array, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_rect(item :: RID, rect :: Rect2, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_set_transform(item :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_texture_rect(item :: RID, rect :: Rect2, texture :: RID, tile :: bool, modulate :: Color, transpose :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_texture_rect_region(item :: RID, rect :: Rect2, texture :: RID, src_rect :: Rect2, modulate :: Color, transpose :: bool, clip_uv :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_add_triangle_array(item :: RID, indices :: PackedInt32Array, points :: PackedVector2Array, colors :: PackedColorArray, uvs :: PackedVector2Array, bones :: PackedInt32Array, weights :: PackedFloat32Array, texture :: RID, count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_clear(item :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_create() :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_canvas_group_mode(item :: RID, mode :: enum::RenderingServer.CanvasGroupMode, clear_margin :: float, fit_empty :: bool, fit_margin :: float, blur_mipmaps :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_clip(item :: RID, clip :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_copy_to_backbuffer(item :: RID, enabled :: bool, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_custom_rect(item :: RID, use_custom_rect :: bool, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_default_texture_filter(item :: RID, filter :: enum::RenderingServer.CanvasItemTextureFilter, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_default_texture_repeat(item :: RID, repeat :: enum::RenderingServer.CanvasItemTextureRepeat, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_distance_field_mode(item :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_draw_behind_parent(item :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_draw_index(item :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_light_mask(item :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_material(item :: RID, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_modulate(item :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_parent(item :: RID, parent :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_self_modulate(item :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_sort_children_by_y(item :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_transform(item :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_use_parent_material(item :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_visibility_layer(item :: RID, visibility_layer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_visibility_notifier(item :: RID, enable :: bool, area :: Rect2, enter_callable :: Callable, exit_callable :: Callable, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_visible(item :: RID, visible :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_z_as_relative_to_parent(item :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_item_set_z_index(item :: RID, z_index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_attach_to_canvas(light :: RID, canvas :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_create() :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_attach_to_canvas(occluder :: RID, canvas :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_create() :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_set_as_sdf_collision(occluder :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_set_enabled(occluder :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_set_light_mask(occluder :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_set_polygon(occluder :: RID, polygon :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_occluder_set_transform(occluder :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_blend_mode(light :: RID, mode :: enum::RenderingServer.CanvasLightBlendMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_color(light :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_enabled(light :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_energy(light :: RID, energy :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_height(light :: RID, height :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_item_cull_mask(light :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_item_shadow_cull_mask(light :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_layer_range(light :: RID, min_layer :: int, max_layer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_mode(light :: RID, mode :: enum::RenderingServer.CanvasLightMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_shadow_color(light :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_shadow_enabled(light :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_shadow_filter(light :: RID, filter :: enum::RenderingServer.CanvasLightShadowFilter, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_shadow_smooth(light :: RID, smooth :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_texture(light :: RID, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_texture_offset(light :: RID, offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_texture_scale(light :: RID, scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_transform(light :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_light_set_z_range(light :: RID, min_z :: int, max_z :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_occluder_polygon_create() :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_occluder_polygon_set_cull_mode(occluder_polygon :: RID, mode :: enum::RenderingServer.CanvasOccluderPolygonCullMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_occluder_polygon_set_shape(occluder_polygon :: RID, shape :: PackedVector2Array, closed :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_set_disable_scale(disable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_set_item_mirroring(canvas :: RID, item :: RID, mirroring :: Vector2, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_set_modulate(canvas :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_set_shadow_texture_size(size :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_texture_create() :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_texture_set_channel(canvas_texture :: RID, channel :: enum::RenderingServer.CanvasTextureChannel, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_texture_set_shading_parameters(canvas_texture :: RID, base_color :: Color, shininess :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_texture_set_texture_filter(canvas_texture :: RID, filter :: enum::RenderingServer.CanvasItemTextureFilter, ) :: {:ok :: label, state :: State, }
spec RenderingServer.canvas_texture_set_texture_repeat(canvas_texture :: RID, repeat :: enum::RenderingServer.CanvasItemTextureRepeat, ) :: {:ok :: label, state :: State, }
spec RenderingServer.create_local_rendering_device() :: {:ok :: label, state :: State, }
spec RenderingServer.decal_create() :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_albedo_mix(decal :: RID, albedo_mix :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_cull_mask(decal :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_distance_fade(decal :: RID, enabled :: bool, begin :: float, length :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_emission_energy(decal :: RID, energy :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_fade(decal :: RID, above :: float, below :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_modulate(decal :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_normal_fade(decal :: RID, fade :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_size(decal :: RID, size :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decal_set_texture(decal :: RID, type :: enum::RenderingServer.DecalTexture, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.decals_set_filter(filter :: enum::RenderingServer.DecalFilter, ) :: {:ok :: label, state :: State, }
spec RenderingServer.directional_light_create() :: {:ok :: label, state :: State, }
spec RenderingServer.directional_shadow_atlas_set_size(size :: int, is_16bits :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.directional_soft_shadow_filter_set_quality(quality :: enum::RenderingServer.ShadowQuality, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_bake_panorama(environment :: RID, bake_irradiance :: bool, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_create() :: {:ok :: label, state :: State, }
spec RenderingServer.environment_glow_set_use_bicubic_upscale(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_adjustment(env :: RID, enable :: bool, brightness :: float, contrast :: float, saturation :: float, use_1d_color_correction :: bool, color_correction :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_ambient_light(env :: RID, color :: Color, ambient :: enum::RenderingServer.EnvironmentAmbientSource, energy :: float, sky_contibution :: float, reflection_source :: enum::RenderingServer.EnvironmentReflectionSource, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_background(env :: RID, bg :: enum::RenderingServer.EnvironmentBG, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_bg_color(env :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_bg_energy(env :: RID, multiplier :: float, exposure_value :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_canvas_max_layer(env :: RID, max_layer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_fog(env :: RID, enable :: bool, light_color :: Color, light_energy :: float, sun_scatter :: float, density :: float, height :: float, height_density :: float, aerial_perspective :: float, sky_affect :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_glow(env :: RID, enable :: bool, levels :: PackedFloat32Array, intensity :: float, strength :: float, mix :: float, bloom_threshold :: float, blend_mode :: enum::RenderingServer.EnvironmentGlowBlendMode, hdr_bleed_threshold :: float, hdr_bleed_scale :: float, hdr_luminance_cap :: float, glow_map_strength :: float, glow_map :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sdfgi(env :: RID, enable :: bool, cascades :: int, min_cell_size :: float, y_scale :: enum::RenderingServer.EnvironmentSDFGIYScale, use_occlusion :: bool, bounce_feedback :: float, read_sky :: bool, energy :: float, normal_bias :: float, probe_bias :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sdfgi_frames_to_converge(frames :: enum::RenderingServer.EnvironmentSDFGIFramesToConverge, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sdfgi_frames_to_update_light(frames :: enum::RenderingServer.EnvironmentSDFGIFramesToUpdateLight, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sdfgi_ray_count(ray_count :: enum::RenderingServer.EnvironmentSDFGIRayCount, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sky(env :: RID, sky :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sky_custom_fov(env :: RID, scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_sky_orientation(env :: RID, orientation :: Basis, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_ssao(env :: RID, enable :: bool, radius :: float, intensity :: float, power :: float, detail :: float, horizon :: float, sharpness :: float, light_affect :: float, ao_channel_affect :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_ssao_quality(quality :: enum::RenderingServer.EnvironmentSSAOQuality, half_size :: bool, adaptive_target :: float, blur_passes :: int, fadeout_from :: float, fadeout_to :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_ssil_quality(quality :: enum::RenderingServer.EnvironmentSSILQuality, half_size :: bool, adaptive_target :: float, blur_passes :: int, fadeout_from :: float, fadeout_to :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_ssr(env :: RID, enable :: bool, max_steps :: int, fade_in :: float, fade_out :: float, depth_tolerance :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_ssr_roughness_quality(quality :: enum::RenderingServer.EnvironmentSSRRoughnessQuality, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_tonemap(env :: RID, tone_mapper :: enum::RenderingServer.EnvironmentToneMapper, exposure :: float, white :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_volumetric_fog(env :: RID, enable :: bool, density :: float, albedo :: Color, emission :: Color, emission_energy :: float, anisotropy :: float, length :: float, p_detail_spread :: float, gi_inject :: float, temporal_reprojection :: bool, temporal_reprojection_amount :: float, ambient_inject :: float, sky_affect :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_volumetric_fog_filter_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.environment_set_volumetric_fog_volume_size(size :: int, depth :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.fog_volume_create() :: {:ok :: label, state :: State, }
spec RenderingServer.fog_volume_set_material(fog_volume :: RID, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.fog_volume_set_shape(fog_volume :: RID, shape :: enum::RenderingServer.FogVolumeShape, ) :: {:ok :: label, state :: State, }
spec RenderingServer.fog_volume_set_size(fog_volume :: RID, size :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenderingServer.force_draw(swap_buffers :: bool, frame_step :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.force_sync() :: {:ok :: label, state :: State, }
spec RenderingServer.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.get_default_clear_color() :: {:ok :: label, state :: State, }
spec RenderingServer.get_frame_setup_time_cpu() :: {:ok :: label, state :: State, }
spec RenderingServer.get_rendering_device() :: {:ok :: label, state :: State, }
spec RenderingServer.get_rendering_info(info :: enum::RenderingServer.RenderingInfo, ) :: {:ok :: label, state :: State, }
spec RenderingServer.get_shader_parameter_list(shader :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.get_test_cube() :: {:ok :: label, state :: State, }
spec RenderingServer.get_test_texture() :: {:ok :: label, state :: State, }
spec RenderingServer.get_video_adapter_api_version() :: {:ok :: label, state :: State, }
spec RenderingServer.get_video_adapter_name() :: {:ok :: label, state :: State, }
spec RenderingServer.get_video_adapter_type() :: {:ok :: label, state :: State, }
spec RenderingServer.get_video_adapter_vendor() :: {:ok :: label, state :: State, }
spec RenderingServer.get_white_texture() :: {:ok :: label, state :: State, }
spec RenderingServer.gi_set_use_half_resolution(half_resolution :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_add(name :: StringName, type :: enum::RenderingServer.GlobalShaderParameterType, default_value :: Variant, ) :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_get(name :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_get_list() :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_get_type(name :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_remove(name :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_set(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec RenderingServer.global_shader_parameter_set_override(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec RenderingServer.has_changed() :: {:ok :: label, state :: State, }
spec RenderingServer.has_feature(feature :: enum::RenderingServer.Features, ) :: {:ok :: label, state :: State, }
spec RenderingServer.has_os_feature(feature :: String, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_attach_object_instance_id(instance :: RID, id :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_attach_skeleton(instance :: RID, skeleton :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_create() :: {:ok :: label, state :: State, }
spec RenderingServer.instance_create2(base :: RID, scenario :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_get_shader_parameter(instance :: RID, parameter :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_get_shader_parameter_default_value(instance :: RID, parameter :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_get_shader_parameter_list(instance :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_cast_shadows_setting(instance :: RID, shadow_casting_setting :: enum::RenderingServer.ShadowCastingSetting, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_flag(instance :: RID, flag :: enum::RenderingServer.InstanceFlags, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_lightmap(instance :: RID, lightmap :: RID, lightmap_uv_scale :: Rect2, lightmap_slice :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_lod_bias(instance :: RID, lod_bias :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_material_overlay(instance :: RID, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_material_override(instance :: RID, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_shader_parameter(instance :: RID, parameter :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_transparency(instance :: RID, transparency :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_geometry_set_visibility_range(instance :: RID, min :: float, max :: float, min_margin :: float, max_margin :: float, fade_mode :: enum::RenderingServer.VisibilityRangeFadeMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_base(instance :: RID, base :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_blend_shape_weight(instance :: RID, shape :: int, weight :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_custom_aabb(instance :: RID, aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_extra_visibility_margin(instance :: RID, margin :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_ignore_culling(instance :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_layer_mask(instance :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_pivot_data(instance :: RID, sorting_offset :: float, use_aabb_center :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_scenario(instance :: RID, scenario :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_surface_override_material(instance :: RID, surface :: int, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_transform(instance :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_visibility_parent(instance :: RID, parent :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instance_set_visible(instance :: RID, visible :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instances_cull_aabb(aabb :: AABB, scenario :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instances_cull_convex(convex :: typedarray::Plane, scenario :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.instances_cull_ray(from :: Vector3, to :: Vector3, scenario :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.is_render_loop_enabled() :: {:ok :: label, state :: State, }
spec RenderingServer.light_directional_set_blend_splits(light :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_directional_set_shadow_mode(light :: RID, mode :: enum::RenderingServer.LightDirectionalShadowMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_directional_set_sky_mode(light :: RID, mode :: enum::RenderingServer.LightDirectionalSkyMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_omni_set_shadow_mode(light :: RID, mode :: enum::RenderingServer.LightOmniShadowMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_projectors_set_filter(filter :: enum::RenderingServer.LightProjectorFilter, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_bake_mode(light :: RID, bake_mode :: enum::RenderingServer.LightBakeMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_color(light :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_cull_mask(light :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_distance_fade(decal :: RID, enabled :: bool, begin :: float, shadow :: float, length :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_max_sdfgi_cascade(light :: RID, cascade :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_negative(light :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_param(light :: RID, param :: enum::RenderingServer.LightParam, value :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_projector(light :: RID, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_reverse_cull_face_mode(light :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.light_set_shadow(light :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_create() :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_get_probe_capture_bsp_tree(lightmap :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_get_probe_capture_points(lightmap :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_get_probe_capture_sh(lightmap :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_get_probe_capture_tetrahedra(lightmap :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_set_baked_exposure_normalization(lightmap :: RID, baked_exposure :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_set_probe_bounds(lightmap :: RID, bounds :: AABB, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_set_probe_capture_data(lightmap :: RID, points :: PackedVector3Array, point_sh :: PackedColorArray, tetrahedra :: PackedInt32Array, bsp_tree :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_set_probe_capture_update_speed(speed :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_set_probe_interior(lightmap :: RID, interior :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.lightmap_set_textures(lightmap :: RID, light :: RID, uses_sh :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.make_sphere_mesh(latitudes :: int, longitudes :: int, radius :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.material_create() :: {:ok :: label, state :: State, }
spec RenderingServer.material_get_param(material :: RID, parameter :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.material_set_next_pass(material :: RID, next_material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.material_set_param(material :: RID, parameter :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec RenderingServer.material_set_render_priority(material :: RID, priority :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.material_set_shader(shader_material :: RID, shader :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_add_surface(mesh :: RID, surface :: Dictionary, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_add_surface_from_arrays(mesh :: RID, primitive :: enum::RenderingServer.PrimitiveType, arrays :: Array, blend_shapes :: Array, lods :: Dictionary, compress_format :: bitfield::RenderingServer.ArrayFormat, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_clear(mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_create() :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_create_from_surfaces(surfaces :: typedarray::Dictionary, blend_shape_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_get_blend_shape_count(mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_get_blend_shape_mode(mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_get_custom_aabb(mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_get_surface(mesh :: RID, surface :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_get_surface_count(mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_set_blend_shape_mode(mesh :: RID, mode :: enum::RenderingServer.BlendShapeMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_set_custom_aabb(mesh :: RID, aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_set_shadow_mesh(mesh :: RID, shadow_mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_arrays(mesh :: RID, surface :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_blend_shape_arrays(mesh :: RID, surface :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_format_attribute_stride(format :: bitfield::RenderingServer.ArrayFormat, vertex_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_format_offset(format :: bitfield::RenderingServer.ArrayFormat, vertex_count :: int, array_index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_format_skin_stride(format :: bitfield::RenderingServer.ArrayFormat, vertex_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_format_vertex_stride(format :: bitfield::RenderingServer.ArrayFormat, vertex_count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_get_material(mesh :: RID, surface :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_set_material(mesh :: RID, surface :: int, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_update_attribute_region(mesh :: RID, surface :: int, offset :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_update_skin_region(mesh :: RID, surface :: int, offset :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingServer.mesh_surface_update_vertex_region(mesh :: RID, surface :: int, offset :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_allocate_data(multimesh :: RID, instances :: int, transform_format :: enum::RenderingServer.MultimeshTransformFormat, color_format :: bool, custom_data_format :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_create() :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_get_aabb(multimesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_get_buffer(multimesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_get_instance_count(multimesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_get_mesh(multimesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_get_visible_instances(multimesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_get_color(multimesh :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_get_custom_data(multimesh :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_get_transform(multimesh :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_get_transform_2d(multimesh :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_set_color(multimesh :: RID, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_set_custom_data(multimesh :: RID, index :: int, custom_data :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_set_transform(multimesh :: RID, index :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_instance_set_transform_2d(multimesh :: RID, index :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_set_buffer(multimesh :: RID, buffer :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_set_mesh(multimesh :: RID, mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.multimesh_set_visible_instances(multimesh :: RID, visible :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.occluder_create() :: {:ok :: label, state :: State, }
spec RenderingServer.occluder_set_mesh(occluder :: RID, vertices :: PackedVector3Array, indices :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RenderingServer.omni_light_create() :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_create() :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_height_field_update(particles_collision :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_attractor_attenuation(particles_collision :: RID, curve :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_attractor_directionality(particles_collision :: RID, amount :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_attractor_strength(particles_collision :: RID, setrngth :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_box_extents(particles_collision :: RID, extents :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_collision_type(particles_collision :: RID, type :: enum::RenderingServer.ParticlesCollisionType, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_cull_mask(particles_collision :: RID, mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_field_texture(particles_collision :: RID, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_height_field_resolution(particles_collision :: RID, resolution :: enum::RenderingServer.ParticlesCollisionHeightfieldResolution, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_collision_set_sphere_radius(particles_collision :: RID, radius :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_create() :: {:ok :: label, state :: State, }
spec RenderingServer.particles_emit(particles :: RID, transform :: Transform3D, velocity :: Vector3, color :: Color, custom :: Color, emit_flags :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_get_current_aabb(particles :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_get_emitting(particles :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_is_inactive(particles :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_request_process(particles :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_restart(particles :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_amount(particles :: RID, amount :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_collision_base_size(particles :: RID, size :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_custom_aabb(particles :: RID, aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_draw_order(particles :: RID, order :: enum::RenderingServer.ParticlesDrawOrder, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_draw_pass_mesh(particles :: RID, pass :: int, mesh :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_draw_passes(particles :: RID, count :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_emission_transform(particles :: RID, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_emitting(particles :: RID, emitting :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_explosiveness_ratio(particles :: RID, ratio :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_fixed_fps(particles :: RID, fps :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_fractional_delta(particles :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_interpolate(particles :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_lifetime(particles :: RID, lifetime :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_mode(particles :: RID, mode :: enum::RenderingServer.ParticlesMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_one_shot(particles :: RID, one_shot :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_pre_process_time(particles :: RID, time :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_process_material(particles :: RID, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_randomness_ratio(particles :: RID, ratio :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_speed_scale(particles :: RID, scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_subemitter(particles :: RID, subemitter_particles :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_trail_bind_poses(particles :: RID, bind_poses :: typedarray::Transform3D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_trails(particles :: RID, enable :: bool, length_sec :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_transform_align(particles :: RID, align :: enum::RenderingServer.ParticlesTransformAlign, ) :: {:ok :: label, state :: State, }
spec RenderingServer.particles_set_use_local_coordinates(particles :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.positional_soft_shadow_filter_set_quality(quality :: enum::RenderingServer.ShadowQuality, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_create() :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_ambient_color(probe :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_ambient_energy(probe :: RID, energy :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_ambient_mode(probe :: RID, mode :: enum::RenderingServer.ReflectionProbeAmbientMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_as_interior(probe :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_cull_mask(probe :: RID, layers :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_enable_box_projection(probe :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_enable_shadows(probe :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_intensity(probe :: RID, intensity :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_max_distance(probe :: RID, distance :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_mesh_lod_threshold(probe :: RID, pixels :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_origin_offset(probe :: RID, offset :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_resolution(probe :: RID, resolution :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_size(probe :: RID, size :: Vector3, ) :: {:ok :: label, state :: State, }
spec RenderingServer.reflection_probe_set_update_mode(probe :: RID, mode :: enum::RenderingServer.ReflectionProbeUpdateMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.request_frame_drawn_callback(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec RenderingServer.scenario_create() :: {:ok :: label, state :: State, }
spec RenderingServer.scenario_set_camera_attributes(scenario :: RID, effects :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.scenario_set_environment(scenario :: RID, environment :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.scenario_set_fallback_environment(scenario :: RID, environment :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.screen_space_roughness_limiter_set_active(enable :: bool, amount :: float, limit :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.set_boot_image(image :: Image, color :: Color, scale :: bool, use_filter :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.set_debug_generate_wireframes(generate :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.set_default_clear_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec RenderingServer.set_render_loop_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.shader_create() :: {:ok :: label, state :: State, }
spec RenderingServer.shader_get_code(shader :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.shader_get_default_texture_parameter(shader :: RID, name :: StringName, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.shader_get_parameter_default(shader :: RID, name :: StringName, ) :: {:ok :: label, state :: State, }
spec RenderingServer.shader_set_code(shader :: RID, code :: String, ) :: {:ok :: label, state :: State, }
spec RenderingServer.shader_set_default_texture_parameter(shader :: RID, name :: StringName, texture :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.shader_set_path_hint(shader :: RID, path :: String, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_allocate_data(skeleton :: RID, bones :: int, is_2d_skeleton :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_bone_get_transform(skeleton :: RID, bone :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_bone_get_transform_2d(skeleton :: RID, bone :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_bone_set_transform(skeleton :: RID, bone :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_bone_set_transform_2d(skeleton :: RID, bone :: int, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_create() :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_get_bone_count(skeleton :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.skeleton_set_base_transform_2d(skeleton :: RID, base_transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.sky_bake_panorama(sky :: RID, energy :: float, bake_irradiance :: bool, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec RenderingServer.sky_create() :: {:ok :: label, state :: State, }
spec RenderingServer.sky_set_material(sky :: RID, material :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.sky_set_mode(sky :: RID, mode :: enum::RenderingServer.SkyMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.sky_set_radiance_size(sky :: RID, radiance_size :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.spot_light_create() :: {:ok :: label, state :: State, }
spec RenderingServer.sub_surface_scattering_set_quality(quality :: enum::RenderingServer.SubSurfaceScatteringQuality, ) :: {:ok :: label, state :: State, }
spec RenderingServer.sub_surface_scattering_set_scale(scale :: float, depth_scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_create(image :: Image, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_get(texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_layer_get(texture :: RID, layer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_layered_create(layers :: typedarray::Image, layered_type :: enum::RenderingServer.TextureLayeredType, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_layered_placeholder_create(layered_type :: enum::RenderingServer.TextureLayeredType, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_placeholder_create() :: {:ok :: label, state :: State, }
spec RenderingServer.texture_2d_update(texture :: RID, image :: Image, layer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_3d_create(format :: enum::Image.Format, width :: int, height :: int, depth :: int, mipmaps :: bool, data :: typedarray::Image, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_3d_get(texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_3d_placeholder_create() :: {:ok :: label, state :: State, }
spec RenderingServer.texture_3d_update(texture :: RID, data :: typedarray::Image, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_get_path(texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_get_rd_texture(texture :: RID, srgb :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_proxy_create(base :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_proxy_update(texture :: RID, proxy_to :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_replace(texture :: RID, by_texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_set_force_redraw_if_visible(texture :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_set_path(texture :: RID, path :: String, ) :: {:ok :: label, state :: State, }
spec RenderingServer.texture_set_size_override(texture :: RID, width :: int, height :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_attach_camera(viewport :: RID, camera :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_attach_canvas(viewport :: RID, canvas :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_attach_to_screen(viewport :: RID, rect :: Rect2, screen :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_create() :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_get_measured_render_time_cpu(viewport :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_get_measured_render_time_gpu(viewport :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_get_render_info(viewport :: RID, type :: enum::RenderingServer.ViewportRenderInfoType, info :: enum::RenderingServer.ViewportRenderInfo, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_get_texture(viewport :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_remove_canvas(viewport :: RID, canvas :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_active(viewport :: RID, active :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_canvas_cull_mask(viewport :: RID, canvas_cull_mask :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_canvas_stacking(viewport :: RID, canvas :: RID, layer :: int, sublayer :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_canvas_transform(viewport :: RID, canvas :: RID, offset :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_clear_mode(viewport :: RID, clear_mode :: enum::RenderingServer.ViewportClearMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_debug_draw(viewport :: RID, draw :: enum::RenderingServer.ViewportDebugDraw, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_default_canvas_item_texture_filter(viewport :: RID, filter :: enum::RenderingServer.CanvasItemTextureFilter, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_default_canvas_item_texture_repeat(viewport :: RID, repeat :: enum::RenderingServer.CanvasItemTextureRepeat, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_disable_2d(viewport :: RID, disable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_disable_3d(viewport :: RID, disable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_environment_mode(viewport :: RID, mode :: enum::RenderingServer.ViewportEnvironmentMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_fsr_sharpness(viewport :: RID, sharpness :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_global_canvas_transform(viewport :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_measure_render_time(viewport :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_msaa_2d(viewport :: RID, msaa :: enum::RenderingServer.ViewportMSAA, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_msaa_3d(viewport :: RID, msaa :: enum::RenderingServer.ViewportMSAA, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_occlusion_culling_build_quality(quality :: enum::RenderingServer.ViewportOcclusionCullingBuildQuality, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_occlusion_rays_per_thread(rays_per_thread :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_parent_viewport(viewport :: RID, parent_viewport :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_positional_shadow_atlas_quadrant_subdivision(viewport :: RID, quadrant :: int, subdivision :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_positional_shadow_atlas_size(viewport :: RID, size :: int, use_16_bits :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_render_direct_to_screen(viewport :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_scaling_3d_mode(viewport :: RID, scaling_3d_mode :: enum::RenderingServer.ViewportScaling3DMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_scaling_3d_scale(viewport :: RID, scale :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_scenario(viewport :: RID, scenario :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_screen_space_aa(viewport :: RID, mode :: enum::RenderingServer.ViewportScreenSpaceAA, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_sdf_oversize_and_scale(viewport :: RID, oversize :: enum::RenderingServer.ViewportSDFOversize, scale :: enum::RenderingServer.ViewportSDFScale, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_size(viewport :: RID, width :: int, height :: int, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_snap_2d_transforms_to_pixel(viewport :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_snap_2d_vertices_to_pixel(viewport :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_texture_mipmap_bias(viewport :: RID, mipmap_bias :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_transparent_background(viewport :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_update_mode(viewport :: RID, update_mode :: enum::RenderingServer.ViewportUpdateMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_use_debanding(viewport :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_use_occlusion_culling(viewport :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_use_taa(viewport :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_use_xr(viewport :: RID, use_xr :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_vrs_mode(viewport :: RID, mode :: enum::RenderingServer.ViewportVRSMode, ) :: {:ok :: label, state :: State, }
spec RenderingServer.viewport_set_vrs_texture(viewport :: RID, texture :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.visibility_notifier_create() :: {:ok :: label, state :: State, }
spec RenderingServer.visibility_notifier_set_aabb(notifier :: RID, aabb :: AABB, ) :: {:ok :: label, state :: State, }
spec RenderingServer.visibility_notifier_set_callbacks(notifier :: RID, enter_callable :: Callable, exit_callable :: Callable, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_allocate_data(voxel_gi :: RID, to_cell_xform :: Transform3D, aabb :: AABB, octree_size :: Vector3i, octree_cells :: PackedByteArray, data_cells :: PackedByteArray, distance_field :: PackedByteArray, level_counts :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_create() :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_get_data_cells(voxel_gi :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_get_distance_field(voxel_gi :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_get_level_counts(voxel_gi :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_get_octree_cells(voxel_gi :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_get_octree_size(voxel_gi :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_get_to_cell_xform(voxel_gi :: RID, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_baked_exposure_normalization(voxel_gi :: RID, baked_exposure :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_bias(voxel_gi :: RID, bias :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_dynamic_range(voxel_gi :: RID, range :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_energy(voxel_gi :: RID, energy :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_interior(voxel_gi :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_normal_bias(voxel_gi :: RID, bias :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_propagation(voxel_gi :: RID, amount :: float, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_quality(quality :: enum::RenderingServer.VoxelGIQuality, ) :: {:ok :: label, state :: State, }
spec RenderingServer.voxel_gi_set_use_two_bounces(voxel_gi :: RID, enable :: bool, ) :: {:ok :: label, state :: State, }
spec Resource.duplicate(subresources :: bool, ) :: {:ok :: label, state :: State, }
spec Resource.emit_changed() :: {:ok :: label, state :: State, }
spec Resource.get_local_scene() :: {:ok :: label, state :: State, }
spec Resource.get_name() :: {:ok :: label, state :: State, }
spec Resource.get_path() :: {:ok :: label, state :: State, }
spec Resource.get_rid() :: {:ok :: label, state :: State, }
spec Resource.is_local_to_scene() :: {:ok :: label, state :: State, }
spec Resource.set_local_to_scene(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Resource.set_name(name :: String, ) :: {:ok :: label, state :: State, }
spec Resource.set_path(path :: String, ) :: {:ok :: label, state :: State, }
spec Resource.setup_local_to_scene() :: {:ok :: label, state :: State, }
spec Resource.take_over_path(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._exists(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._get_classes_used(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._get_dependencies(path :: String, add_types :: bool, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._get_recognized_extensions() :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._get_resource_script_class(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._get_resource_type(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._get_resource_uid(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._handles_type(type :: StringName, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._load(path :: String, original_path :: String, use_sub_threads :: bool, cache_mode :: int, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._recognize_path(path :: String, type :: StringName, ) :: {:ok :: label, state :: State, }
spec ResourceFormatLoader._rename_dependencies(path :: String, renames :: Dictionary, ) :: {:ok :: label, state :: State, }
spec ResourceFormatSaver._get_recognized_extensions(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec ResourceFormatSaver._recognize(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec ResourceFormatSaver._recognize_path(resource :: Resource, path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceFormatSaver._save(resource :: Resource, path :: String, flags :: int, ) :: {:ok :: label, state :: State, }
spec ResourceFormatSaver._set_uid(path :: String, uid :: int, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.add_resource_format_loader(format_loader :: ResourceFormatLoader, at_front :: bool, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.exists(path :: String, type_hint :: String, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.get_dependencies(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.get_recognized_extensions_for_type(type :: String, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.get_resource_uid(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.has_cached(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.load(path :: String, type_hint :: String, cache_mode :: enum::ResourceLoader.CacheMode, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.load_threaded_get(path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.load_threaded_get_status(path :: String, progress :: Array, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.load_threaded_request(path :: String, type_hint :: String, use_sub_threads :: bool, cache_mode :: enum::ResourceLoader.CacheMode, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.load_threaded_request_whitelisted(path :: String, external_path_whitelist :: Dictionary, type_whitelist :: Dictionary, type_hint :: String, use_sub_threads :: bool, cache_mode :: enum::ResourceLoader.CacheMode, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.load_whitelisted(path :: String, external_path_whitelist :: Dictionary, type_whitelist :: Dictionary, type_hint :: String, cache_mode :: enum::ResourceLoader.CacheMode, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.remove_resource_format_loader(format_loader :: ResourceFormatLoader, ) :: {:ok :: label, state :: State, }
spec ResourceLoader.set_abort_on_missing_resources(abort :: bool, ) :: {:ok :: label, state :: State, }
spec ResourcePreloader.add_resource(name :: StringName, resource :: Resource, ) :: {:ok :: label, state :: State, }
spec ResourcePreloader.get_resource(name :: StringName, ) :: {:ok :: label, state :: State, }
spec ResourcePreloader.get_resource_list() :: {:ok :: label, state :: State, }
spec ResourcePreloader.has_resource(name :: StringName, ) :: {:ok :: label, state :: State, }
spec ResourcePreloader.remove_resource(name :: StringName, ) :: {:ok :: label, state :: State, }
spec ResourcePreloader.rename_resource(name :: StringName, newname :: StringName, ) :: {:ok :: label, state :: State, }
spec ResourceSaver.add_resource_format_saver(format_saver :: ResourceFormatSaver, at_front :: bool, ) :: {:ok :: label, state :: State, }
spec ResourceSaver.get_recognized_extensions(type :: Resource, ) :: {:ok :: label, state :: State, }
spec ResourceSaver.remove_resource_format_saver(format_saver :: ResourceFormatSaver, ) :: {:ok :: label, state :: State, }
spec ResourceSaver.save(resource :: Resource, path :: String, flags :: bitfield::ResourceSaver.SaverFlags, ) :: {:ok :: label, state :: State, }
spec ResourceUID.add_id(id :: int, path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceUID.create_id() :: {:ok :: label, state :: State, }
spec ResourceUID.get_id_path(id :: int, ) :: {:ok :: label, state :: State, }
spec ResourceUID.has_id(id :: int, ) :: {:ok :: label, state :: State, }
spec ResourceUID.id_to_text(id :: int, ) :: {:ok :: label, state :: State, }
spec ResourceUID.remove_id(id :: int, ) :: {:ok :: label, state :: State, }
spec ResourceUID.set_id(id :: int, path :: String, ) :: {:ok :: label, state :: State, }
spec ResourceUID.text_to_id(text_id :: String, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.get_process_callback() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.get_profile() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.get_source_skeleton() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.get_target_skeleton() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.is_active() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.is_position_enabled() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.is_rotation_enabled() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.is_scale_enabled() :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_position_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_process_callback(mode :: enum::RetargetPoseTransporter.AnimationProcessCallback, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_profile(profile :: RetargetProfile, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_rotation_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_scale_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_source_skeleton(skeleton :: NodePath, ) :: {:ok :: label, state :: State, }
spec RetargetPoseTransporter.set_target_skeleton(skeleton :: NodePath, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.add_absolute_transform_target(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.add_global_transform_target(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.add_local_transform_target(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.get_absolute_transform_target(idx :: int, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.get_absolute_transform_target_size() :: {:ok :: label, state :: State, }
spec RetargetProfile.get_global_transform_target(idx :: int, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.get_global_transform_target_size() :: {:ok :: label, state :: State, }
spec RetargetProfile.get_label_for_animation_name() :: {:ok :: label, state :: State, }
spec RetargetProfile.get_local_transform_target(idx :: int, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.get_local_transform_target_size() :: {:ok :: label, state :: State, }
spec RetargetProfile.has_absolute_transform_target(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.has_global_transform_target(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.has_local_transform_target(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_absolute_transform_target(idx :: int, bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_absolute_transform_target_size(size :: int, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_global_transform_target(idx :: int, bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_global_transform_target_size(size :: int, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_label_for_animation_name(label_for_animation_name :: String, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_local_transform_target(idx :: int, bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec RetargetProfile.set_local_transform_target_size(size :: int, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_global_transform(skeleton :: Skeleton3D, bone_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_global_transform_position(skeleton :: Skeleton3D, bone_idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_global_transform_rotation(skeleton :: Skeleton3D, bone_idx :: int, rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_global_transform_scale(skeleton :: Skeleton3D, bone_idx :: int, scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_local_transform(skeleton :: Skeleton3D, bone_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_local_transform_position(skeleton :: Skeleton3D, bone_idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_local_transform_rotation(skeleton :: Skeleton3D, bone_idx :: int, rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.extract_local_transform_scale(skeleton :: Skeleton3D, bone_idx :: int, scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.global_transform_position_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.global_transform_rotation_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.global_transform_scale_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.global_transform_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.local_transform_position_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.local_transform_rotation_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.local_transform_scale_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec RetargetUtility.local_transform_to_bone_pose(skeleton :: Skeleton3D, bone_idx :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.get_curve() :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.get_section_length() :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.get_section_segments() :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.get_sections() :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.get_shape() :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.get_size() :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.set_curve(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.set_section_length(section_length :: float, ) :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.set_section_segments(section_segments :: int, ) :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.set_sections(sections :: int, ) :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.set_shape(shape :: enum::RibbonTrailMesh.Shape, ) :: {:ok :: label, state :: State, }
spec RibbonTrailMesh.set_size(size :: float, ) :: {:ok :: label, state :: State, }
spec RichTextEffect._process_custom_fx(char_fx :: CharFXTransform, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.add_image(image :: Texture2D, width :: int, height :: int, color :: Color, inline_align :: enum::InlineAlignment, region :: Rect2, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.add_text(text :: String, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.append_text(bbcode :: String, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.clear() :: {:ok :: label, state :: State, }
spec RichTextLabel.deselect() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_autowrap_mode() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_character_line(character :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.get_character_paragraph(character :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.get_content_height() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_content_width() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_effects() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_language() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_line_count() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_line_offset(line :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.get_menu() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_paragraph_count() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_paragraph_offset(paragraph :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.get_parsed_text() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_progress_bar_delay() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_selected_text() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_selection_from() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_selection_to() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_tab_size() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_text() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_text_direction() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_total_character_count() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_v_scroll_bar() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_visible_characters() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_visible_characters_behavior() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_visible_line_count() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_visible_paragraph_count() :: {:ok :: label, state :: State, }
spec RichTextLabel.get_visible_ratio() :: {:ok :: label, state :: State, }
spec RichTextLabel.install_effect(effect :: Variant, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.is_context_menu_enabled() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_deselect_on_focus_loss_enabled() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_fit_content_enabled() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_hint_underlined() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_menu_visible() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_meta_underlined() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_ready() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_scroll_active() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_scroll_following() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_selection_enabled() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_shortcut_keys_enabled() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_threaded() :: {:ok :: label, state :: State, }
spec RichTextLabel.is_using_bbcode() :: {:ok :: label, state :: State, }
spec RichTextLabel.menu_option(option :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.newline() :: {:ok :: label, state :: State, }
spec RichTextLabel.parse_bbcode(bbcode :: String, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.parse_expressions_for_values(expressions :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.pop() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_bgcolor(bgcolor :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_bold() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_bold_italics() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_cell() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_customfx(effect :: RichTextEffect, env :: Dictionary, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_dropcap(string :: String, font :: Font, size :: int, dropcap_margins :: Rect2, color :: Color, outline_size :: int, outline_color :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_fgcolor(fgcolor :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_font(font :: Font, font_size :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_font_size(font_size :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_hint(description :: String, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_indent(level :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_italics() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_list(level :: int, type :: enum::RichTextLabel.ListType, capitalize :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_meta(data :: Variant, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_mono() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_normal() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_outline_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_outline_size(outline_size :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_paragraph(alignment :: enum::HorizontalAlignment, base_direction :: enum::Control.TextDirection, language :: String, st_parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_strikethrough() :: {:ok :: label, state :: State, }
spec RichTextLabel.push_table(columns :: int, inline_align :: enum::InlineAlignment, align_to_row :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.push_underline() :: {:ok :: label, state :: State, }
spec RichTextLabel.remove_paragraph(paragraph :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.scroll_to_line(line :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.scroll_to_paragraph(paragraph :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.scroll_to_selection() :: {:ok :: label, state :: State, }
spec RichTextLabel.select_all() :: {:ok :: label, state :: State, }
spec RichTextLabel.set_autowrap_mode(autowrap_mode :: enum::TextServer.AutowrapMode, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_cell_border_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_cell_padding(padding :: Rect2, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_cell_row_background_color(odd_row_bg :: Color, even_row_bg :: Color, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_cell_size_override(min_size :: Vector2, max_size :: Vector2, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_context_menu_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_deselect_on_focus_loss_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_effects(effects :: Array, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_fit_content(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_hint_underline(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_meta_underline(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_progress_bar_delay(delay_ms :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_scroll_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_scroll_follow(follow :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_selection_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_shortcut_keys_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_tab_size(spaces :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_table_column_expand(column :: int, expand :: bool, ratio :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_threaded(threaded :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_use_bbcode(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_visible_characters(amount :: int, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_visible_characters_behavior(behavior :: enum::TextServer.VisibleCharactersBehavior, ) :: {:ok :: label, state :: State, }
spec RichTextLabel.set_visible_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D._integrate_forces(state :: PhysicsDirectBodyState2D, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.add_constant_central_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.add_constant_force(force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.add_constant_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.apply_central_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.apply_central_impulse(impulse :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.apply_force(force :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.apply_impulse(impulse :: Vector2, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.apply_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.apply_torque_impulse(torque :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.get_angular_damp() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_angular_damp_mode() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_angular_velocity() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_center_of_mass() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_center_of_mass_mode() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_colliding_bodies() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_constant_force() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_constant_torque() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_contact_count() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_continuous_collision_detection_mode() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_freeze_mode() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_gravity_scale() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_inertia() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_linear_damp() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_linear_damp_mode() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_linear_velocity() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_mass() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_max_contacts_reported() :: {:ok :: label, state :: State, }
spec RigidBody2D.get_physics_material_override() :: {:ok :: label, state :: State, }
spec RigidBody2D.is_able_to_sleep() :: {:ok :: label, state :: State, }
spec RigidBody2D.is_contact_monitor_enabled() :: {:ok :: label, state :: State, }
spec RigidBody2D.is_freeze_enabled() :: {:ok :: label, state :: State, }
spec RigidBody2D.is_lock_rotation_enabled() :: {:ok :: label, state :: State, }
spec RigidBody2D.is_sleeping() :: {:ok :: label, state :: State, }
spec RigidBody2D.is_using_custom_integrator() :: {:ok :: label, state :: State, }
spec RigidBody2D.set_angular_damp(angular_damp :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_angular_damp_mode(angular_damp_mode :: enum::RigidBody2D.DampMode, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_angular_velocity(angular_velocity :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_axis_velocity(axis_velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_can_sleep(able_to_sleep :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_center_of_mass(center_of_mass :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_center_of_mass_mode(mode :: enum::RigidBody2D.CenterOfMassMode, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_constant_force(force :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_constant_torque(torque :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_contact_monitor(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_continuous_collision_detection_mode(mode :: enum::RigidBody2D.CCDMode, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_freeze_enabled(freeze_mode :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_freeze_mode(freeze_mode :: enum::RigidBody2D.FreezeMode, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_gravity_scale(gravity_scale :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_inertia(inertia :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_linear_damp(linear_damp :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_linear_damp_mode(linear_damp_mode :: enum::RigidBody2D.DampMode, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_linear_velocity(linear_velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_lock_rotation_enabled(lock_rotation :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_max_contacts_reported(amount :: int, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_physics_material_override(physics_material_override :: PhysicsMaterial, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_sleeping(sleeping :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody2D.set_use_custom_integrator(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D._integrate_forces(state :: PhysicsDirectBodyState3D, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.add_constant_central_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.add_constant_force(force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.add_constant_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.apply_central_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.apply_central_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.apply_force(force :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.apply_impulse(impulse :: Vector3, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.apply_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.apply_torque_impulse(impulse :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.get_angular_damp() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_angular_damp_mode() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_angular_velocity() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_center_of_mass() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_center_of_mass_mode() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_colliding_bodies() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_constant_force() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_constant_torque() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_contact_count() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_freeze_mode() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_gravity_scale() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_inertia() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_inverse_inertia_tensor() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_linear_damp() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_linear_damp_mode() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_linear_velocity() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_mass() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_max_contacts_reported() :: {:ok :: label, state :: State, }
spec RigidBody3D.get_physics_material_override() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_able_to_sleep() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_contact_monitor_enabled() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_freeze_enabled() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_lock_rotation_enabled() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_sleeping() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_using_continuous_collision_detection() :: {:ok :: label, state :: State, }
spec RigidBody3D.is_using_custom_integrator() :: {:ok :: label, state :: State, }
spec RigidBody3D.set_angular_damp(angular_damp :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_angular_damp_mode(angular_damp_mode :: enum::RigidBody3D.DampMode, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_angular_velocity(angular_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_axis_velocity(axis_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_can_sleep(able_to_sleep :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_center_of_mass(center_of_mass :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_center_of_mass_mode(mode :: enum::RigidBody3D.CenterOfMassMode, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_constant_force(force :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_constant_torque(torque :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_contact_monitor(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_freeze_enabled(freeze_mode :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_freeze_mode(freeze_mode :: enum::RigidBody3D.FreezeMode, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_gravity_scale(gravity_scale :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_inertia(inertia :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_linear_damp(linear_damp :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_linear_damp_mode(linear_damp_mode :: enum::RigidBody3D.DampMode, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_linear_velocity(linear_velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_lock_rotation_enabled(lock_rotation :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_max_contacts_reported(amount :: int, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_physics_material_override(physics_material_override :: PhysicsMaterial, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_sleeping(sleeping :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_use_continuous_collision_detection(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RigidBody3D.set_use_custom_integrator(enable :: bool, ) :: {:ok :: label, state :: State, }
spec RootMotionView.get_animation_path() :: {:ok :: label, state :: State, }
spec RootMotionView.get_cell_size() :: {:ok :: label, state :: State, }
spec RootMotionView.get_color() :: {:ok :: label, state :: State, }
spec RootMotionView.get_radius() :: {:ok :: label, state :: State, }
spec RootMotionView.get_zero_y() :: {:ok :: label, state :: State, }
spec RootMotionView.set_animation_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec RootMotionView.set_cell_size(size :: float, ) :: {:ok :: label, state :: State, }
spec RootMotionView.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec RootMotionView.set_radius(size :: float, ) :: {:ok :: label, state :: State, }
spec RootMotionView.set_zero_y(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.clear() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.complete_auth(id :: int, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.disconnect_peer(id :: int, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.get_auth_callback() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.get_auth_timeout() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.get_authenticating_peers() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.get_root_path() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.is_object_decoding_allowed() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.is_refusing_new_connections() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.is_server_relay_enabled() :: {:ok :: label, state :: State, }
spec SceneMultiplayer.send_auth(id :: int, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.send_bytes(bytes :: PackedByteArray, id :: int, mode :: enum::MultiplayerPeer.TransferMode, channel :: int, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.set_allow_object_decoding(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.set_auth_callback(callback :: Callable, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.set_auth_timeout(timeout :: float, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.set_refuse_new_connections(refuse :: bool, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.set_root_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneMultiplayer.set_server_relay_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.add_property(path :: NodePath, index :: int, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.get_properties() :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.has_property(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.property_get_index(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.property_get_spawn(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.property_get_sync(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.property_set_spawn(path :: NodePath, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.property_set_sync(path :: NodePath, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SceneReplicationConfig.remove_property(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_binds(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_count() :: {:ok :: label, state :: State, }
spec SceneState.get_connection_flags(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_method(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_signal(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_source(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_target(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_connection_unbinds(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_count() :: {:ok :: label, state :: State, }
spec SceneState.get_node_groups(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_index(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_instance(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_instance_placeholder(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_name(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_owner_path(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_path(idx :: int, for_parent :: bool, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_property_count(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_property_name(idx :: int, prop_idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_property_value(idx :: int, prop_idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.get_node_type(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneState.is_node_instance_placeholder(idx :: int, ) :: {:ok :: label, state :: State, }
spec SceneTree.call_group(group :: StringName, method :: StringName, ) :: {:ok :: label, state :: State, }
spec SceneTree.call_group_flags(flags :: int, group :: StringName, method :: StringName, ) :: {:ok :: label, state :: State, }
spec SceneTree.change_scene_to_file(path :: String, ) :: {:ok :: label, state :: State, }
spec SceneTree.change_scene_to_packed(packed_scene :: PackedScene, ) :: {:ok :: label, state :: State, }
spec SceneTree.create_timer(time_sec :: float, process_always :: bool, process_in_physics :: bool, ignore_time_scale :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.create_tween() :: {:ok :: label, state :: State, }
spec SceneTree.get_current_scene() :: {:ok :: label, state :: State, }
spec SceneTree.get_edited_scene_root() :: {:ok :: label, state :: State, }
spec SceneTree.get_first_node_in_group(group :: StringName, ) :: {:ok :: label, state :: State, }
spec SceneTree.get_frame() :: {:ok :: label, state :: State, }
spec SceneTree.get_multiplayer(for_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneTree.get_node_count() :: {:ok :: label, state :: State, }
spec SceneTree.get_nodes_in_group(group :: StringName, ) :: {:ok :: label, state :: State, }
spec SceneTree.get_processed_tweens() :: {:ok :: label, state :: State, }
spec SceneTree.get_root() :: {:ok :: label, state :: State, }
spec SceneTree.has_group(name :: StringName, ) :: {:ok :: label, state :: State, }
spec SceneTree.is_auto_accept_quit() :: {:ok :: label, state :: State, }
spec SceneTree.is_debugging_collisions_hint() :: {:ok :: label, state :: State, }
spec SceneTree.is_debugging_navigation_hint() :: {:ok :: label, state :: State, }
spec SceneTree.is_debugging_paths_hint() :: {:ok :: label, state :: State, }
spec SceneTree.is_multiplayer_poll_enabled() :: {:ok :: label, state :: State, }
spec SceneTree.is_paused() :: {:ok :: label, state :: State, }
spec SceneTree.is_quit_on_go_back() :: {:ok :: label, state :: State, }
spec SceneTree.notify_group(group :: StringName, notification :: int, ) :: {:ok :: label, state :: State, }
spec SceneTree.notify_group_flags(call_flags :: int, group :: StringName, notification :: int, ) :: {:ok :: label, state :: State, }
spec SceneTree.queue_delete(obj :: Object, ) :: {:ok :: label, state :: State, }
spec SceneTree.quit(exit_code :: int, ) :: {:ok :: label, state :: State, }
spec SceneTree.reload_current_scene() :: {:ok :: label, state :: State, }
spec SceneTree.set_auto_accept_quit(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_current_scene(child_node :: Node, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_debug_collisions_hint(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_debug_navigation_hint(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_debug_paths_hint(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_edited_scene_root(scene :: Node, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_group(group :: StringName, property :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_group_flags(call_flags :: int, group :: StringName, property :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_multiplayer(multiplayer :: MultiplayerAPI, root_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_multiplayer_poll_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_pause(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.set_quit_on_go_back(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SceneTree.unload_current_scene() :: {:ok :: label, state :: State, }
spec SceneTreeTimer.get_time_left() :: {:ok :: label, state :: State, }
spec SceneTreeTimer.set_time_left(time :: float, ) :: {:ok :: label, state :: State, }
spec Script.can_instantiate() :: {:ok :: label, state :: State, }
spec Script.get_base_script() :: {:ok :: label, state :: State, }
spec Script.get_instance_base_type() :: {:ok :: label, state :: State, }
spec Script.get_property_default_value(property :: StringName, ) :: {:ok :: label, state :: State, }
spec Script.get_script_constant_map() :: {:ok :: label, state :: State, }
spec Script.get_script_method_list() :: {:ok :: label, state :: State, }
spec Script.get_script_property_list() :: {:ok :: label, state :: State, }
spec Script.get_script_signal_list() :: {:ok :: label, state :: State, }
spec Script.get_source_code() :: {:ok :: label, state :: State, }
spec Script.has_script_signal(signal_name :: StringName, ) :: {:ok :: label, state :: State, }
spec Script.has_source_code() :: {:ok :: label, state :: State, }
spec Script.instance_has(base_object :: Object, ) :: {:ok :: label, state :: State, }
spec Script.is_tool() :: {:ok :: label, state :: State, }
spec Script.reload(keep_state :: bool, ) :: {:ok :: label, state :: State, }
spec Script.set_source_code(source :: String, ) :: {:ok :: label, state :: State, }
spec ScriptCreateDialog.config(inherits :: String, path :: String, built_in_enabled :: bool, load_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ScriptEditor.get_current_editor() :: {:ok :: label, state :: State, }
spec ScriptEditor.get_current_script() :: {:ok :: label, state :: State, }
spec ScriptEditor.get_open_script_editors() :: {:ok :: label, state :: State, }
spec ScriptEditor.get_open_scripts() :: {:ok :: label, state :: State, }
spec ScriptEditor.goto_line(line_number :: int, ) :: {:ok :: label, state :: State, }
spec ScriptEditor.open_script_create_dialog(base_name :: String, base_path :: String, ) :: {:ok :: label, state :: State, }
spec ScriptEditor.register_syntax_highlighter(syntax_highlighter :: EditorSyntaxHighlighter, ) :: {:ok :: label, state :: State, }
spec ScriptEditor.unregister_syntax_highlighter(syntax_highlighter :: EditorSyntaxHighlighter, ) :: {:ok :: label, state :: State, }
spec ScriptEditorBase.add_syntax_highlighter(highlighter :: EditorSyntaxHighlighter, ) :: {:ok :: label, state :: State, }
spec ScriptEditorBase.get_base_editor() :: {:ok :: label, state :: State, }
spec ScriptExtension._can_instantiate() :: {:ok :: label, state :: State, }
spec ScriptExtension._editor_can_reload_from_file() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_base_script() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_constants() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_documentation() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_global_name() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_instance_base_type() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_language() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_member_line(member :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._get_members() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_method_info(method :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._get_property_default_value(property :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._get_rpc_config() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_script_method_list() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_script_property_list() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_script_signal_list() :: {:ok :: label, state :: State, }
spec ScriptExtension._get_source_code() :: {:ok :: label, state :: State, }
spec ScriptExtension._has_method(method :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._has_property_default_value(property :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._has_script_signal(signal :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._has_source_code() :: {:ok :: label, state :: State, }
spec ScriptExtension._inherits_script(script :: Script, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._instance_create(for_object :: Object, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._instance_has(object :: Object, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._is_placeholder_fallback_enabled() :: {:ok :: label, state :: State, }
spec ScriptExtension._is_tool() :: {:ok :: label, state :: State, }
spec ScriptExtension._is_valid() :: {:ok :: label, state :: State, }
spec ScriptExtension._placeholder_erased(placeholder :: void*, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._placeholder_instance_create(for_object :: Object, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._reload(keep_state :: bool, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._set_source_code(code :: String, ) :: {:ok :: label, state :: State, }
spec ScriptExtension._update_exports() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._add_global_constant(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._add_named_global_constant(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._auto_indent_code(code :: String, from_line :: int, to_line :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._can_inherit_from_file() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._complete_code(code :: String, path :: String, owner :: Object, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._create_script() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_current_stack_info() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_error() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_globals(max_subitems :: int, max_depth :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_stack_level_count() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_stack_level_function(level :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_stack_level_instance(level :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_stack_level_line(level :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_stack_level_locals(level :: int, max_subitems :: int, max_depth :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_get_stack_level_members(level :: int, max_subitems :: int, max_depth :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._debug_parse_stack_level_expression(level :: int, expression :: String, max_subitems :: int, max_depth :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._find_function(class_name :: String, function_name :: String, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._finish() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._frame() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_built_in_templates(object :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_comment_delimiters() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_extension() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_global_class_name(path :: String, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_name() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_public_annotations() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_public_constants() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_public_functions() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_recognized_extensions() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_reserved_words() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_string_delimiters() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._get_type() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._handles_global_class_type(type :: String, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._has_named_classes() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._init() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._is_control_flow_keyword(keyword :: String, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._is_using_templates() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._lookup_code(code :: String, symbol :: String, path :: String, owner :: Object, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._make_function(class_name :: String, function_name :: String, function_args :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._make_template(template :: String, class_name :: String, base_class_name :: String, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._open_in_external_editor(script :: Script, line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._overrides_external_editor() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._profiling_get_accumulated_data(info_array :: ScriptLanguageExtensionProfilingInfo*, info_max :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._profiling_get_frame_data(info_array :: ScriptLanguageExtensionProfilingInfo*, info_max :: int, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._profiling_start() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._profiling_stop() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._reload_all_scripts() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._reload_tool_script(script :: Script, soft_reload :: bool, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._remove_named_global_constant(name :: StringName, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._supports_builtin_mode() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._supports_documentation() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._thread_enter() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._thread_exit() :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._validate(script :: String, path :: String, validate_functions :: bool, validate_errors :: bool, validate_warnings :: bool, validate_safe_lines :: bool, ) :: {:ok :: label, state :: State, }
spec ScriptLanguageExtension._validate_path(path :: String, ) :: {:ok :: label, state :: State, }
spec ScrollBar.get_custom_step() :: {:ok :: label, state :: State, }
spec ScrollBar.set_custom_step(step :: float, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.ensure_control_visible(control :: Control, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.get_deadzone() :: {:ok :: label, state :: State, }
spec ScrollContainer.get_h_scroll() :: {:ok :: label, state :: State, }
spec ScrollContainer.get_h_scroll_bar() :: {:ok :: label, state :: State, }
spec ScrollContainer.get_horizontal_scroll_mode() :: {:ok :: label, state :: State, }
spec ScrollContainer.get_v_scroll() :: {:ok :: label, state :: State, }
spec ScrollContainer.get_v_scroll_bar() :: {:ok :: label, state :: State, }
spec ScrollContainer.get_vertical_scroll_mode() :: {:ok :: label, state :: State, }
spec ScrollContainer.is_following_focus() :: {:ok :: label, state :: State, }
spec ScrollContainer.set_deadzone(deadzone :: int, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.set_follow_focus(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.set_h_scroll(value :: int, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.set_horizontal_scroll_mode(enable :: enum::ScrollContainer.ScrollMode, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.set_v_scroll(value :: int, ) :: {:ok :: label, state :: State, }
spec ScrollContainer.set_vertical_scroll_mode(enable :: enum::ScrollContainer.ScrollMode, ) :: {:ok :: label, state :: State, }
spec SegmentShape2D.get_a() :: {:ok :: label, state :: State, }
spec SegmentShape2D.get_b() :: {:ok :: label, state :: State, }
spec SegmentShape2D.set_a(a :: Vector2, ) :: {:ok :: label, state :: State, }
spec SegmentShape2D.set_b(b :: Vector2, ) :: {:ok :: label, state :: State, }
spec Semaphore.post() :: {:ok :: label, state :: State, }
spec Semaphore.try_wait() :: {:ok :: label, state :: State, }
spec Semaphore.wait() :: {:ok :: label, state :: State, }
spec SeparationRayShape2D.get_length() :: {:ok :: label, state :: State, }
spec SeparationRayShape2D.get_slide_on_slope() :: {:ok :: label, state :: State, }
spec SeparationRayShape2D.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec SeparationRayShape2D.set_slide_on_slope(active :: bool, ) :: {:ok :: label, state :: State, }
spec SeparationRayShape3D.get_length() :: {:ok :: label, state :: State, }
spec SeparationRayShape3D.get_slide_on_slope() :: {:ok :: label, state :: State, }
spec SeparationRayShape3D.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec SeparationRayShape3D.set_slide_on_slope(active :: bool, ) :: {:ok :: label, state :: State, }
spec Shader.get_code() :: {:ok :: label, state :: State, }
spec Shader.get_default_texture_parameter(name :: StringName, index :: int, ) :: {:ok :: label, state :: State, }
spec Shader.get_mode() :: {:ok :: label, state :: State, }
spec Shader.get_shader_uniform_list(get_groups :: bool, ) :: {:ok :: label, state :: State, }
spec Shader.set_code(code :: String, ) :: {:ok :: label, state :: State, }
spec Shader.set_default_texture_parameter(name :: StringName, texture :: Texture2D, index :: int, ) :: {:ok :: label, state :: State, }
spec ShaderInclude.get_code() :: {:ok :: label, state :: State, }
spec ShaderInclude.set_code(code :: String, ) :: {:ok :: label, state :: State, }
spec ShaderMaterial.get_shader() :: {:ok :: label, state :: State, }
spec ShaderMaterial.get_shader_parameter(param :: StringName, ) :: {:ok :: label, state :: State, }
spec ShaderMaterial.set_shader(shader :: Shader, ) :: {:ok :: label, state :: State, }
spec ShaderMaterial.set_shader_parameter(param :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Shape2D.collide(local_xform :: Transform2D, with_shape :: Shape2D, shape_xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Shape2D.collide_and_get_contacts(local_xform :: Transform2D, with_shape :: Shape2D, shape_xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Shape2D.collide_with_motion(local_xform :: Transform2D, local_motion :: Vector2, with_shape :: Shape2D, shape_xform :: Transform2D, shape_motion :: Vector2, ) :: {:ok :: label, state :: State, }
spec Shape2D.collide_with_motion_and_get_contacts(local_xform :: Transform2D, local_motion :: Vector2, with_shape :: Shape2D, shape_xform :: Transform2D, shape_motion :: Vector2, ) :: {:ok :: label, state :: State, }
spec Shape2D.draw(canvas_item :: RID, color :: Color, ) :: {:ok :: label, state :: State, }
spec Shape2D.get_custom_solver_bias() :: {:ok :: label, state :: State, }
spec Shape2D.get_rect() :: {:ok :: label, state :: State, }
spec Shape2D.set_custom_solver_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec Shape3D.get_custom_solver_bias() :: {:ok :: label, state :: State, }
spec Shape3D.get_debug_mesh() :: {:ok :: label, state :: State, }
spec Shape3D.get_margin() :: {:ok :: label, state :: State, }
spec Shape3D.set_custom_solver_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec Shape3D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.add_exception(node :: CollisionObject2D, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.add_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.clear_exceptions() :: {:ok :: label, state :: State, }
spec ShapeCast2D.force_shapecast_update() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_closest_collision_safe_fraction() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_closest_collision_unsafe_fraction() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collider(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collider_rid(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collider_shape(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collision_count() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collision_mask() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collision_normal(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_collision_point(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_exclude_parent_body() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_margin() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_max_results() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_shape() :: {:ok :: label, state :: State, }
spec ShapeCast2D.get_target_position() :: {:ok :: label, state :: State, }
spec ShapeCast2D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec ShapeCast2D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec ShapeCast2D.is_colliding() :: {:ok :: label, state :: State, }
spec ShapeCast2D.is_enabled() :: {:ok :: label, state :: State, }
spec ShapeCast2D.remove_exception(node :: CollisionObject2D, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.remove_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_exclude_parent_body(mask :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_max_results(max_results :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_shape(shape :: Shape2D, ) :: {:ok :: label, state :: State, }
spec ShapeCast2D.set_target_position(local_point :: Vector2, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.add_exception(node :: CollisionObject3D, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.add_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.clear_exceptions() :: {:ok :: label, state :: State, }
spec ShapeCast3D.force_shapecast_update() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_closest_collision_safe_fraction() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_closest_collision_unsafe_fraction() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collider(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collider_rid(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collider_shape(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collision_count() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collision_normal(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_collision_point(index :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_debug_shape_custom_color() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_exclude_parent_body() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_margin() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_max_results() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_shape() :: {:ok :: label, state :: State, }
spec ShapeCast3D.get_target_position() :: {:ok :: label, state :: State, }
spec ShapeCast3D.is_collide_with_areas_enabled() :: {:ok :: label, state :: State, }
spec ShapeCast3D.is_collide_with_bodies_enabled() :: {:ok :: label, state :: State, }
spec ShapeCast3D.is_colliding() :: {:ok :: label, state :: State, }
spec ShapeCast3D.is_enabled() :: {:ok :: label, state :: State, }
spec ShapeCast3D.remove_exception(node :: CollisionObject3D, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.remove_exception_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.resource_changed(resource :: Resource, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_collide_with_areas(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_collide_with_bodies(enable :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_debug_shape_custom_color(debug_shape_custom_color :: Color, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_exclude_parent_body(mask :: bool, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_max_results(max_results :: int, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_shape(shape :: Shape3D, ) :: {:ok :: label, state :: State, }
spec ShapeCast3D.set_target_position(local_point :: Vector3, ) :: {:ok :: label, state :: State, }
spec Shortcut.get_as_text() :: {:ok :: label, state :: State, }
spec Shortcut.get_events() :: {:ok :: label, state :: State, }
spec Shortcut.has_valid_event() :: {:ok :: label, state :: State, }
spec Shortcut.matches_event(event :: InputEvent, ) :: {:ok :: label, state :: State, }
spec Shortcut.set_events(events :: Array, ) :: {:ok :: label, state :: State, }
spec Signal.connect(callable :: Callable, flags :: int, ) :: {:ok :: label, state :: State, int}
spec Signal.disconnect(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec Signal.emit() :: {:ok :: label, state :: State, }
spec Signal.get_connections() :: {:ok :: label, state :: State, Array}
spec Signal.get_name() :: {:ok :: label, state :: State, StringName}
spec Signal.get_object() :: {:ok :: label, state :: State, Object}
spec Signal.get_object_id() :: {:ok :: label, state :: State, int}
spec Signal.is_connected(callable :: Callable, ) :: {:ok :: label, state :: State, bool}
spec Signal.is_null() :: {:ok :: label, state :: State, bool}
spec Skeleton2D.execute_modifications(delta :: float, execution_mode :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton2D.get_bone(idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton2D.get_bone_count() :: {:ok :: label, state :: State, }
spec Skeleton2D.get_bone_local_pose_override(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton2D.get_modification_stack() :: {:ok :: label, state :: State, }
spec Skeleton2D.get_skeleton() :: {:ok :: label, state :: State, }
spec Skeleton2D.set_bone_local_pose_override(bone_idx :: int, override_pose :: Transform2D, strength :: float, persistent :: bool, ) :: {:ok :: label, state :: State, }
spec Skeleton2D.set_modification_stack(modification_stack :: SkeletonModificationStack2D, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.add_bone(name :: String, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.clear_bones() :: {:ok :: label, state :: State, }
spec Skeleton3D.clear_bones_global_pose_override() :: {:ok :: label, state :: State, }
spec Skeleton3D.create_skin_from_rest_transforms() :: {:ok :: label, state :: State, }
spec Skeleton3D.find_bone(name :: String, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.force_update_all_bone_transforms() :: {:ok :: label, state :: State, }
spec Skeleton3D.force_update_bone_child_transform(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_animate_physical_bones() :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_children(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_count() :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_global_pose(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_global_pose_no_override(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_global_pose_override(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_global_rest(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_name(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_parent(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_pose(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_pose_position(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_pose_rotation(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_pose_scale(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_bone_rest(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.get_motion_scale() :: {:ok :: label, state :: State, }
spec Skeleton3D.get_parentless_bones() :: {:ok :: label, state :: State, }
spec Skeleton3D.get_version() :: {:ok :: label, state :: State, }
spec Skeleton3D.is_bone_enabled(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.is_show_rest_only() :: {:ok :: label, state :: State, }
spec Skeleton3D.localize_rests() :: {:ok :: label, state :: State, }
spec Skeleton3D.physical_bones_add_collision_exception(exception :: RID, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.physical_bones_remove_collision_exception(exception :: RID, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.physical_bones_start_simulation(bones :: typedarray::StringName, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.physical_bones_stop_simulation() :: {:ok :: label, state :: State, }
spec Skeleton3D.register_skin(skin :: Skin, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.reset_bone_pose(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.reset_bone_poses() :: {:ok :: label, state :: State, }
spec Skeleton3D.set_animate_physical_bones(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_enabled(bone_idx :: int, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_global_pose_override(bone_idx :: int, pose :: Transform3D, amount :: float, persistent :: bool, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_name(bone_idx :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_parent(bone_idx :: int, parent_idx :: int, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_pose_position(bone_idx :: int, position :: Vector3, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_pose_rotation(bone_idx :: int, rotation :: Quaternion, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_pose_scale(bone_idx :: int, scale :: Vector3, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_bone_rest(bone_idx :: int, rest :: Transform3D, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_motion_scale(motion_scale :: float, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.set_show_rest_only(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Skeleton3D.unparent_bone_and_rest(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_interpolation() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_magnet_position() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_max_iterations() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_min_distance() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_parent_skeleton() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_root_bone() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_target_node() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_target_transform() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.get_tip_bone() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.is_override_tip_basis() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.is_running() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.is_using_magnet() :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_interpolation(interpolation :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_magnet_position(local_position :: Vector3, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_max_iterations(iterations :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_min_distance(min_distance :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_override_tip_basis(override :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_root_bone(root_bone :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_target_node(node :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_target_transform(target :: Transform3D, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_tip_bone(tip_bone :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.set_use_magnet(use :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.start(one_time :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonIK3D.stop() :: {:ok :: label, state :: State, }
spec SkeletonModification2D._draw_editor_gizmo() :: {:ok :: label, state :: State, }
spec SkeletonModification2D._execute(delta :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2D._setup_modification(modification_stack :: SkeletonModificationStack2D, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2D.clamp_angle(angle :: float, min :: float, max :: float, invert :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2D.get_editor_draw_gizmo() :: {:ok :: label, state :: State, }
spec SkeletonModification2D.get_enabled() :: {:ok :: label, state :: State, }
spec SkeletonModification2D.get_execution_mode() :: {:ok :: label, state :: State, }
spec SkeletonModification2D.get_is_setup() :: {:ok :: label, state :: State, }
spec SkeletonModification2D.get_modification_stack() :: {:ok :: label, state :: State, }
spec SkeletonModification2D.set_editor_draw_gizmo(draw_gizmo :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2D.set_execution_mode(execution_mode :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2D.set_is_setup(is_setup :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_data_chain_length() :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_bone2d_node(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_bone_index(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_constraint_angle_invert(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_constraint_angle_max(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_constraint_angle_min(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_enable_constraint(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_ccdik_joint_rotate_from_joint(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_target_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.get_tip_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_data_chain_length(length :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_bone2d_node(joint_idx :: int, bone2d_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_bone_index(joint_idx :: int, bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_constraint_angle_invert(joint_idx :: int, invert :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_constraint_angle_max(joint_idx :: int, angle_max :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_constraint_angle_min(joint_idx :: int, angle_min :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_enable_constraint(joint_idx :: int, enable_constraint :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_ccdik_joint_rotate_from_joint(joint_idx :: int, rotate_from_joint :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_target_node(target_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DCCDIK.set_tip_node(tip_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.get_fabrik_data_chain_length() :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.get_fabrik_joint_bone2d_node(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.get_fabrik_joint_bone_index(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.get_fabrik_joint_magnet_position(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.get_fabrik_joint_use_target_rotation(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.get_target_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.set_fabrik_data_chain_length(length :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.set_fabrik_joint_bone2d_node(joint_idx :: int, bone2d_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.set_fabrik_joint_bone_index(joint_idx :: int, bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.set_fabrik_joint_magnet_position(joint_idx :: int, magnet_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.set_fabrik_joint_use_target_rotation(joint_idx :: int, use_target_rotation :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DFABRIK.set_target_node(target_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_collision_mask() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_damping() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_gravity() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_data_chain_length() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_bone2d_node(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_bone_index(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_damping(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_gravity(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_mass(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_override(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_stiffness(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_jiggle_joint_use_gravity(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_mass() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_stiffness() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_target_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_use_colliders() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.get_use_gravity() :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_damping(damping :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_gravity(gravity :: Vector2, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_data_chain_length(length :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_bone2d_node(joint_idx :: int, bone2d_node :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_bone_index(joint_idx :: int, bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_damping(joint_idx :: int, damping :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_gravity(joint_idx :: int, gravity :: Vector2, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_mass(joint_idx :: int, mass :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_override(joint_idx :: int, override :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_stiffness(joint_idx :: int, stiffness :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_jiggle_joint_use_gravity(joint_idx :: int, use_gravity :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_stiffness(stiffness :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_target_node(target_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_use_colliders(use_colliders :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DJiggle.set_use_gravity(use_gravity :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_additional_rotation() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_bone2d_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_bone_index() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_constraint_angle_invert() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_constraint_angle_max() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_constraint_angle_min() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_enable_constraint() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.get_target_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_additional_rotation(rotation :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_bone2d_node(bone2d_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_bone_index(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_constraint_angle_invert(invert :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_constraint_angle_max(angle_max :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_constraint_angle_min(angle_min :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_enable_constraint(enable_constraint :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DLookAt.set_target_node(target_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.fetch_physical_bones() :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.get_physical_bone_chain_length() :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.get_physical_bone_node(joint_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.set_physical_bone_chain_length(length :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.set_physical_bone_node(joint_idx :: int, physicalbone2d_node :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.start_simulation(bones :: typedarray::StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DPhysicalBones.stop_simulation(bones :: typedarray::StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DStackHolder.get_held_modification_stack() :: {:ok :: label, state :: State, }
spec SkeletonModification2DStackHolder.set_held_modification_stack(held_modification_stack :: SkeletonModificationStack2D, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_flip_bend_direction() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_joint_one_bone2d_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_joint_one_bone_idx() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_joint_two_bone2d_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_joint_two_bone_idx() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_target_maximum_distance() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_target_minimum_distance() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.get_target_node() :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_flip_bend_direction(flip_direction :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_joint_one_bone2d_node(bone2d_node :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_joint_one_bone_idx(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_joint_two_bone2d_node(bone2d_node :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_joint_two_bone_idx(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_target_maximum_distance(maximum_distance :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_target_minimum_distance(minimum_distance :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModification2DTwoBoneIK.set_target_node(target_nodepath :: NodePath, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.add_modification(modification :: SkeletonModification2D, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.delete_modification(mod_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.enable_all_modifications(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.execute(delta :: float, execution_mode :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.get_enabled() :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.get_is_setup() :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.get_modification(mod_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.get_modification_count() :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.get_skeleton() :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.get_strength() :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.set_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.set_modification(mod_idx :: int, modification :: SkeletonModification2D, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.set_modification_count(count :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.set_strength(strength :: float, ) :: {:ok :: label, state :: State, }
spec SkeletonModificationStack2D.setup() :: {:ok :: label, state :: State, }
spec SkeletonProfile.find_bone(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_bone_name(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_bone_parent(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_bone_size() :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_bone_tail(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_group(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_group_name(group_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_group_size() :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_handle_offset(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_reference_pose(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_root_bone() :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_scale_base_bone() :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_tail_direction(bone_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.get_texture(group_idx :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_bone_name(bone_idx :: int, bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_bone_parent(bone_idx :: int, bone_parent :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_bone_size(size :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_bone_tail(bone_idx :: int, bone_tail :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_group(bone_idx :: int, group :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_group_name(group_idx :: int, group_name :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_group_size(size :: int, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_handle_offset(bone_idx :: int, handle_offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_reference_pose(bone_idx :: int, bone_name :: Transform3D, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_root_bone(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_scale_base_bone(bone_name :: StringName, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_tail_direction(bone_idx :: int, tail_direction :: enum::SkeletonProfile.TailDirection, ) :: {:ok :: label, state :: State, }
spec SkeletonProfile.set_texture(group_idx :: int, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Skin.add_bind(bone :: int, pose :: Transform3D, ) :: {:ok :: label, state :: State, }
spec Skin.add_named_bind(name :: String, pose :: Transform3D, ) :: {:ok :: label, state :: State, }
spec Skin.clear_binds() :: {:ok :: label, state :: State, }
spec Skin.get_bind_bone(bind_index :: int, ) :: {:ok :: label, state :: State, }
spec Skin.get_bind_count() :: {:ok :: label, state :: State, }
spec Skin.get_bind_name(bind_index :: int, ) :: {:ok :: label, state :: State, }
spec Skin.get_bind_pose(bind_index :: int, ) :: {:ok :: label, state :: State, }
spec Skin.set_bind_bone(bind_index :: int, bone :: int, ) :: {:ok :: label, state :: State, }
spec Skin.set_bind_count(bind_count :: int, ) :: {:ok :: label, state :: State, }
spec Skin.set_bind_name(bind_index :: int, name :: StringName, ) :: {:ok :: label, state :: State, }
spec Skin.set_bind_pose(bind_index :: int, pose :: Transform3D, ) :: {:ok :: label, state :: State, }
spec SkinReference.get_skeleton() :: {:ok :: label, state :: State, }
spec SkinReference.get_skin() :: {:ok :: label, state :: State, }
spec Sky.get_material() :: {:ok :: label, state :: State, }
spec Sky.get_process_mode() :: {:ok :: label, state :: State, }
spec Sky.get_radiance_size() :: {:ok :: label, state :: State, }
spec Sky.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec Sky.set_process_mode(mode :: enum::Sky.ProcessMode, ) :: {:ok :: label, state :: State, }
spec Sky.set_radiance_size(size :: enum::Sky.RadianceSize, ) :: {:ok :: label, state :: State, }
spec Slider.get_ticks() :: {:ok :: label, state :: State, }
spec Slider.get_ticks_on_borders() :: {:ok :: label, state :: State, }
spec Slider.is_editable() :: {:ok :: label, state :: State, }
spec Slider.is_scrollable() :: {:ok :: label, state :: State, }
spec Slider.set_editable(editable :: bool, ) :: {:ok :: label, state :: State, }
spec Slider.set_scrollable(scrollable :: bool, ) :: {:ok :: label, state :: State, }
spec Slider.set_ticks(count :: int, ) :: {:ok :: label, state :: State, }
spec Slider.set_ticks_on_borders(ticks_on_border :: bool, ) :: {:ok :: label, state :: State, }
spec SliderJoint3D.get_param(param :: enum::SliderJoint3D.Param, ) :: {:ok :: label, state :: State, }
spec SliderJoint3D.set_param(param :: enum::SliderJoint3D.Param, value :: float, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.add_collision_exception_with(body :: Node, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.get_collision_exceptions() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_collision_layer() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_collision_layer_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_collision_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.get_damping_coefficient() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_disable_mode() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_drag_coefficient() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_linear_stiffness() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_parent_collision_ignore() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_physics_rid() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_point_transform(point_index :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.get_pressure_coefficient() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_simulation_precision() :: {:ok :: label, state :: State, }
spec SoftBody3D.get_total_mass() :: {:ok :: label, state :: State, }
spec SoftBody3D.is_point_pinned(point_index :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.is_ray_pickable() :: {:ok :: label, state :: State, }
spec SoftBody3D.remove_collision_exception_with(body :: Node, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_collision_layer(collision_layer :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_collision_layer_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_collision_mask(collision_mask :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_collision_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_damping_coefficient(damping_coefficient :: float, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_disable_mode(mode :: enum::SoftBody3D.DisableMode, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_drag_coefficient(drag_coefficient :: float, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_linear_stiffness(linear_stiffness :: float, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_parent_collision_ignore(parent_collision_ignore :: NodePath, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_point_pinned(point_index :: int, pinned :: bool, attachment_path :: NodePath, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_pressure_coefficient(pressure_coefficient :: float, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_ray_pickable(ray_pickable :: bool, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_simulation_precision(simulation_precision :: int, ) :: {:ok :: label, state :: State, }
spec SoftBody3D.set_total_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec Speech.add_player_audio(player_id :: int, audio_stream_player :: Node, ) :: {:ok :: label, state :: State, }
spec Speech.attempt_to_feed_stream(skip_count :: int, decoder :: SpeechDecoder, audio_stream_player :: Node, jitter_buffer :: Array, playback_stats :: PlaybackStats, player_dict :: Dictionary, ) :: {:ok :: label, state :: State, }
spec Speech.calc_playback_ring_buffer_length(generator :: AudioStreamGenerator, ) :: {:ok :: label, state :: State, }
spec Speech.clear_all_player_audio() :: {:ok :: label, state :: State, }
spec Speech.clear_skipped_audio_packets() :: {:ok :: label, state :: State, }
spec Speech.copy_and_clear_buffers() :: {:ok :: label, state :: State, }
spec Speech.decompress_buffer(decoder :: SpeechDecoder, read_array :: PackedByteArray, read_size :: int, write_array :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Speech.end_recording() :: {:ok :: label, state :: State, }
spec Speech.get_blank_packet() :: {:ok :: label, state :: State, }
spec Speech.get_buffer_delay_threshold() :: {:ok :: label, state :: State, }
spec Speech.get_debug() :: {:ok :: label, state :: State, }
spec Speech.get_jitter_buffer_slowdown() :: {:ok :: label, state :: State, }
spec Speech.get_jitter_buffer_speedup() :: {:ok :: label, state :: State, }
spec Speech.get_max_jitter_buffer_size() :: {:ok :: label, state :: State, }
spec Speech.get_packets_received_this_frame() :: {:ok :: label, state :: State, }
spec Speech.get_playback_ring_buffer_length() :: {:ok :: label, state :: State, }
spec Speech.get_playback_stats(speech_stat :: Dictionary, ) :: {:ok :: label, state :: State, }
spec Speech.get_player_audio() :: {:ok :: label, state :: State, }
spec Speech.get_skipped_audio_packets() :: {:ok :: label, state :: State, }
spec Speech.get_speech_decoder() :: {:ok :: label, state :: State, }
spec Speech.get_stats() :: {:ok :: label, state :: State, }
spec Speech.get_stream_speedup_pitch() :: {:ok :: label, state :: State, }
spec Speech.get_stream_standard_pitch() :: {:ok :: label, state :: State, }
spec Speech.get_uncompressed_audio() :: {:ok :: label, state :: State, }
spec Speech.get_use_sample_stretching() :: {:ok :: label, state :: State, }
spec Speech.on_received_audio_packet(peer_id :: int, sequence_id :: int, packet :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec Speech.remove_player_audio(player_id :: int, ) :: {:ok :: label, state :: State, }
spec Speech.set_audio_input_stream_player(player :: Node, ) :: {:ok :: label, state :: State, }
spec Speech.set_blank_packet(blank_packet :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Speech.set_buffer_delay_threshold(buffer_delay_threshold :: float, ) :: {:ok :: label, state :: State, }
spec Speech.set_debug(debug :: bool, ) :: {:ok :: label, state :: State, }
spec Speech.set_error_cancellation_bus(_unnamed_arg0 :: String, ) :: {:ok :: label, state :: State, }
spec Speech.set_jitter_buffer_slowdown(jitter_buffer_slowdown :: int, ) :: {:ok :: label, state :: State, }
spec Speech.set_jitter_buffer_speedup(jitter_buffer_speedup :: int, ) :: {:ok :: label, state :: State, }
spec Speech.set_max_jitter_buffer_size(max_jitter_buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec Speech.set_packets_received_this_frame(packets_received_this_frame :: int, ) :: {:ok :: label, state :: State, }
spec Speech.set_playback_ring_buffer_length(playback_ring_buffer_length :: int, ) :: {:ok :: label, state :: State, }
spec Speech.set_player_audio(player_audio :: Dictionary, ) :: {:ok :: label, state :: State, }
spec Speech.set_stream_speedup_pitch(stream_speedup_pitch :: float, ) :: {:ok :: label, state :: State, }
spec Speech.set_stream_standard_pitch(stream_standard_pitch :: float, ) :: {:ok :: label, state :: State, }
spec Speech.set_streaming_bus(bus :: String, ) :: {:ok :: label, state :: State, }
spec Speech.set_uncompressed_audio(uncompressed_audio :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Speech.set_use_sample_stretching(use_sample_stretching :: bool, ) :: {:ok :: label, state :: State, }
spec Speech.start_recording() :: {:ok :: label, state :: State, }
spec SpeechProcessor.compress_buffer(_unnamed_arg0 :: PackedByteArray, _unnamed_arg1 :: Dictionary, ) :: {:ok :: label, state :: State, }
spec SpeechProcessor.decompress_buffer(_unnamed_arg0 :: SpeechDecoder, _unnamed_arg1 :: PackedByteArray, _unnamed_arg2 :: int, _unnamed_arg3 :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec SpeechProcessor.set_audio_input_stream_player(_unnamed_arg0 :: Node, ) :: {:ok :: label, state :: State, }
spec SpeechProcessor.set_error_cancellation_bus(_unnamed_arg0 :: String, ) :: {:ok :: label, state :: State, }
spec SpeechProcessor.set_streaming_bus(_unnamed_arg0 :: String, ) :: {:ok :: label, state :: State, }
spec SpeechProcessor.start() :: {:ok :: label, state :: State, }
spec SpeechProcessor.stop() :: {:ok :: label, state :: State, }
spec SphereMesh.get_height() :: {:ok :: label, state :: State, }
spec SphereMesh.get_is_hemisphere() :: {:ok :: label, state :: State, }
spec SphereMesh.get_radial_segments() :: {:ok :: label, state :: State, }
spec SphereMesh.get_radius() :: {:ok :: label, state :: State, }
spec SphereMesh.get_rings() :: {:ok :: label, state :: State, }
spec SphereMesh.set_height(height :: float, ) :: {:ok :: label, state :: State, }
spec SphereMesh.set_is_hemisphere(is_hemisphere :: bool, ) :: {:ok :: label, state :: State, }
spec SphereMesh.set_radial_segments(radial_segments :: int, ) :: {:ok :: label, state :: State, }
spec SphereMesh.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec SphereMesh.set_rings(rings :: int, ) :: {:ok :: label, state :: State, }
spec SphereOccluder3D.get_radius() :: {:ok :: label, state :: State, }
spec SphereOccluder3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec SphereShape3D.get_radius() :: {:ok :: label, state :: State, }
spec SphereShape3D.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec SpinBox.apply() :: {:ok :: label, state :: State, }
spec SpinBox.get_custom_arrow_step() :: {:ok :: label, state :: State, }
spec SpinBox.get_horizontal_alignment() :: {:ok :: label, state :: State, }
spec SpinBox.get_line_edit() :: {:ok :: label, state :: State, }
spec SpinBox.get_prefix() :: {:ok :: label, state :: State, }
spec SpinBox.get_suffix() :: {:ok :: label, state :: State, }
spec SpinBox.get_update_on_text_changed() :: {:ok :: label, state :: State, }
spec SpinBox.is_editable() :: {:ok :: label, state :: State, }
spec SpinBox.is_select_all_on_focus() :: {:ok :: label, state :: State, }
spec SpinBox.set_custom_arrow_step(arrow_step :: float, ) :: {:ok :: label, state :: State, }
spec SpinBox.set_editable(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SpinBox.set_horizontal_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec SpinBox.set_prefix(prefix :: String, ) :: {:ok :: label, state :: State, }
spec SpinBox.set_select_all_on_focus(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SpinBox.set_suffix(suffix :: String, ) :: {:ok :: label, state :: State, }
spec SpinBox.set_update_on_text_changed(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SplitContainer.clamp_split_offset() :: {:ok :: label, state :: State, }
spec SplitContainer.get_dragger_visibility() :: {:ok :: label, state :: State, }
spec SplitContainer.get_split_offset() :: {:ok :: label, state :: State, }
spec SplitContainer.is_collapsed() :: {:ok :: label, state :: State, }
spec SplitContainer.is_vertical() :: {:ok :: label, state :: State, }
spec SplitContainer.set_collapsed(collapsed :: bool, ) :: {:ok :: label, state :: State, }
spec SplitContainer.set_dragger_visibility(mode :: enum::SplitContainer.DraggerVisibility, ) :: {:ok :: label, state :: State, }
spec SplitContainer.set_split_offset(offset :: int, ) :: {:ok :: label, state :: State, }
spec SplitContainer.set_vertical(vertical :: bool, ) :: {:ok :: label, state :: State, }
spec SpringArm3D.add_excluded_object(RID :: RID, ) :: {:ok :: label, state :: State, }
spec SpringArm3D.clear_excluded_objects() :: {:ok :: label, state :: State, }
spec SpringArm3D.get_collision_mask() :: {:ok :: label, state :: State, }
spec SpringArm3D.get_hit_length() :: {:ok :: label, state :: State, }
spec SpringArm3D.get_length() :: {:ok :: label, state :: State, }
spec SpringArm3D.get_margin() :: {:ok :: label, state :: State, }
spec SpringArm3D.get_shape() :: {:ok :: label, state :: State, }
spec SpringArm3D.remove_excluded_object(RID :: RID, ) :: {:ok :: label, state :: State, }
spec SpringArm3D.set_collision_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec SpringArm3D.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec SpringArm3D.set_margin(margin :: float, ) :: {:ok :: label, state :: State, }
spec SpringArm3D.set_shape(shape :: Shape3D, ) :: {:ok :: label, state :: State, }
spec Sprite2D.get_frame() :: {:ok :: label, state :: State, }
spec Sprite2D.get_frame_coords() :: {:ok :: label, state :: State, }
spec Sprite2D.get_hframes() :: {:ok :: label, state :: State, }
spec Sprite2D.get_offset() :: {:ok :: label, state :: State, }
spec Sprite2D.get_rect() :: {:ok :: label, state :: State, }
spec Sprite2D.get_region_rect() :: {:ok :: label, state :: State, }
spec Sprite2D.get_texture() :: {:ok :: label, state :: State, }
spec Sprite2D.get_vframes() :: {:ok :: label, state :: State, }
spec Sprite2D.is_centered() :: {:ok :: label, state :: State, }
spec Sprite2D.is_flipped_h() :: {:ok :: label, state :: State, }
spec Sprite2D.is_flipped_v() :: {:ok :: label, state :: State, }
spec Sprite2D.is_pixel_opaque(pos :: Vector2, ) :: {:ok :: label, state :: State, }
spec Sprite2D.is_region_enabled() :: {:ok :: label, state :: State, }
spec Sprite2D.is_region_filter_clip_enabled() :: {:ok :: label, state :: State, }
spec Sprite2D.set_centered(centered :: bool, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_flip_h(flip_h :: bool, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_flip_v(flip_v :: bool, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_frame(frame :: int, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_frame_coords(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_hframes(hframes :: int, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_region_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_region_filter_clip_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_region_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Sprite2D.set_vframes(vframes :: int, ) :: {:ok :: label, state :: State, }
spec Sprite3D.get_frame() :: {:ok :: label, state :: State, }
spec Sprite3D.get_frame_coords() :: {:ok :: label, state :: State, }
spec Sprite3D.get_hframes() :: {:ok :: label, state :: State, }
spec Sprite3D.get_region_rect() :: {:ok :: label, state :: State, }
spec Sprite3D.get_texture() :: {:ok :: label, state :: State, }
spec Sprite3D.get_vframes() :: {:ok :: label, state :: State, }
spec Sprite3D.is_region_enabled() :: {:ok :: label, state :: State, }
spec Sprite3D.set_frame(frame :: int, ) :: {:ok :: label, state :: State, }
spec Sprite3D.set_frame_coords(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Sprite3D.set_hframes(hframes :: int, ) :: {:ok :: label, state :: State, }
spec Sprite3D.set_region_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Sprite3D.set_region_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec Sprite3D.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Sprite3D.set_vframes(vframes :: int, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.generate_triangle_mesh() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_alpha_antialiasing() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_alpha_antialiasing_edge() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_alpha_cut_mode() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_alpha_hash_scale() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_alpha_scissor_threshold() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_axis() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_billboard_mode() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_draw_flag(flag :: enum::SpriteBase3D.DrawFlags, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_item_rect() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_modulate() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_offset() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_pixel_size() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_render_priority() :: {:ok :: label, state :: State, }
spec SpriteBase3D.get_texture_filter() :: {:ok :: label, state :: State, }
spec SpriteBase3D.is_centered() :: {:ok :: label, state :: State, }
spec SpriteBase3D.is_flipped_h() :: {:ok :: label, state :: State, }
spec SpriteBase3D.is_flipped_v() :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_alpha_antialiasing(alpha_aa :: enum::BaseMaterial3D.AlphaAntiAliasing, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_alpha_antialiasing_edge(edge :: float, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_alpha_cut_mode(mode :: enum::SpriteBase3D.AlphaCutMode, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_alpha_hash_scale(threshold :: float, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_alpha_scissor_threshold(threshold :: float, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_axis(axis :: enum::Vector3.Axis, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_billboard_mode(mode :: enum::BaseMaterial3D.BillboardMode, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_centered(centered :: bool, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_draw_flag(flag :: enum::SpriteBase3D.DrawFlags, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_flip_h(flip_h :: bool, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_flip_v(flip_v :: bool, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_modulate(modulate :: Color, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_pixel_size(pixel_size :: float, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_render_priority(priority :: int, ) :: {:ok :: label, state :: State, }
spec SpriteBase3D.set_texture_filter(mode :: enum::BaseMaterial3D.TextureFilter, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.add_animation(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.add_frame(anim :: StringName, texture :: Texture2D, duration :: float, at_position :: int, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.clear(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.clear_all() :: {:ok :: label, state :: State, }
spec SpriteFrames.get_animation_loop(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.get_animation_names() :: {:ok :: label, state :: State, }
spec SpriteFrames.get_animation_speed(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.get_frame_count(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.get_frame_duration(anim :: StringName, idx :: int, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.get_frame_texture(anim :: StringName, idx :: int, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.has_animation(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.remove_animation(anim :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.remove_frame(anim :: StringName, idx :: int, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.rename_animation(anim :: StringName, newname :: StringName, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.set_animation_loop(anim :: StringName, loop :: bool, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.set_animation_speed(anim :: StringName, fps :: float, ) :: {:ok :: label, state :: State, }
spec SpriteFrames.set_frame(anim :: StringName, idx :: int, texture :: Texture2D, duration :: float, ) :: {:ok :: label, state :: State, }
spec StaticBody2D.get_constant_angular_velocity() :: {:ok :: label, state :: State, }
spec StaticBody2D.get_constant_linear_velocity() :: {:ok :: label, state :: State, }
spec StaticBody2D.get_physics_material_override() :: {:ok :: label, state :: State, }
spec StaticBody2D.set_constant_angular_velocity(vel :: float, ) :: {:ok :: label, state :: State, }
spec StaticBody2D.set_constant_linear_velocity(vel :: Vector2, ) :: {:ok :: label, state :: State, }
spec StaticBody2D.set_physics_material_override(physics_material_override :: PhysicsMaterial, ) :: {:ok :: label, state :: State, }
spec StaticBody3D.get_constant_angular_velocity() :: {:ok :: label, state :: State, }
spec StaticBody3D.get_constant_linear_velocity() :: {:ok :: label, state :: State, }
spec StaticBody3D.get_physics_material_override() :: {:ok :: label, state :: State, }
spec StaticBody3D.set_constant_angular_velocity(vel :: Vector3, ) :: {:ok :: label, state :: State, }
spec StaticBody3D.set_constant_linear_velocity(vel :: Vector3, ) :: {:ok :: label, state :: State, }
spec StaticBody3D.set_physics_material_override(physics_material_override :: PhysicsMaterial, ) :: {:ok :: label, state :: State, }
spec StreamPeer.get_16() :: {:ok :: label, state :: State, }
spec StreamPeer.get_32() :: {:ok :: label, state :: State, }
spec StreamPeer.get_64() :: {:ok :: label, state :: State, }
spec StreamPeer.get_8() :: {:ok :: label, state :: State, }
spec StreamPeer.get_available_bytes() :: {:ok :: label, state :: State, }
spec StreamPeer.get_data(bytes :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.get_double() :: {:ok :: label, state :: State, }
spec StreamPeer.get_float() :: {:ok :: label, state :: State, }
spec StreamPeer.get_partial_data(bytes :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.get_string(bytes :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.get_u16() :: {:ok :: label, state :: State, }
spec StreamPeer.get_u32() :: {:ok :: label, state :: State, }
spec StreamPeer.get_u64() :: {:ok :: label, state :: State, }
spec StreamPeer.get_u8() :: {:ok :: label, state :: State, }
spec StreamPeer.get_utf8_string(bytes :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.get_var(allow_objects :: bool, ) :: {:ok :: label, state :: State, }
spec StreamPeer.is_big_endian_enabled() :: {:ok :: label, state :: State, }
spec StreamPeer.put_16(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_32(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_64(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_8(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_data(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_double(value :: float, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_float(value :: float, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_partial_data(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_string(value :: String, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_u16(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_u32(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_u64(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_u8(value :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_utf8_string(value :: String, ) :: {:ok :: label, state :: State, }
spec StreamPeer.put_var(value :: Variant, full_objects :: bool, ) :: {:ok :: label, state :: State, }
spec StreamPeer.set_big_endian(enable :: bool, ) :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.clear() :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.duplicate() :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.get_data_array() :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.get_position() :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.get_size() :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.resize(size :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.seek(position :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeerBuffer.set_data_array(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec StreamPeerExtension._get_available_bytes() :: {:ok :: label, state :: State, }
spec StreamPeerExtension._get_data(r_buffer :: uint8_t*, r_bytes :: int, r_received :: int32_t*, ) :: {:ok :: label, state :: State, }
spec StreamPeerExtension._get_partial_data(r_buffer :: uint8_t*, r_bytes :: int, r_received :: int32_t*, ) :: {:ok :: label, state :: State, }
spec StreamPeerExtension._put_data(p_data :: const uint8_t*, p_bytes :: int, r_sent :: int32_t*, ) :: {:ok :: label, state :: State, }
spec StreamPeerExtension._put_partial_data(p_data :: const uint8_t*, p_bytes :: int, r_sent :: int32_t*, ) :: {:ok :: label, state :: State, }
spec StreamPeerGZIP.clear() :: {:ok :: label, state :: State, }
spec StreamPeerGZIP.finish() :: {:ok :: label, state :: State, }
spec StreamPeerGZIP.start_compression(use_deflate :: bool, buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeerGZIP.start_decompression(use_deflate :: bool, buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeerTCP.bind(port :: int, host :: String, ) :: {:ok :: label, state :: State, }
spec StreamPeerTCP.connect_to_host(host :: String, port :: int, ) :: {:ok :: label, state :: State, }
spec StreamPeerTCP.disconnect_from_host() :: {:ok :: label, state :: State, }
spec StreamPeerTCP.get_connected_host() :: {:ok :: label, state :: State, }
spec StreamPeerTCP.get_connected_port() :: {:ok :: label, state :: State, }
spec StreamPeerTCP.get_local_port() :: {:ok :: label, state :: State, }
spec StreamPeerTCP.get_status() :: {:ok :: label, state :: State, }
spec StreamPeerTCP.poll() :: {:ok :: label, state :: State, }
spec StreamPeerTCP.set_no_delay(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec StreamPeerTLS.accept_stream(stream :: StreamPeer, server_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec StreamPeerTLS.connect_to_stream(stream :: StreamPeer, common_name :: String, client_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec StreamPeerTLS.disconnect_from_stream() :: {:ok :: label, state :: State, }
spec StreamPeerTLS.get_status() :: {:ok :: label, state :: State, }
spec StreamPeerTLS.get_stream() :: {:ok :: label, state :: State, }
spec StreamPeerTLS.poll() :: {:ok :: label, state :: State, }
spec String.begins_with(text :: String, ) :: {:ok :: label, state :: State, bool}
spec String.bigrams() :: {:ok :: label, state :: State, PackedStringArray}
spec String.bin_to_int() :: {:ok :: label, state :: State, int}
spec String.c_escape() :: {:ok :: label, state :: State, String}
spec String.c_unescape() :: {:ok :: label, state :: State, String}
spec String.capitalize() :: {:ok :: label, state :: State, String}
spec String.casecmp_to(to :: String, ) :: {:ok :: label, state :: State, int}
spec String.chr(char :: int, ) :: {:ok :: label, state :: State, String}
spec String.contains(what :: String, ) :: {:ok :: label, state :: State, bool}
spec String.count(what :: String, from :: int, to :: int, ) :: {:ok :: label, state :: State, int}
spec String.countn(what :: String, from :: int, to :: int, ) :: {:ok :: label, state :: State, int}
spec String.dedent() :: {:ok :: label, state :: State, String}
spec String.ends_with(text :: String, ) :: {:ok :: label, state :: State, bool}
spec String.find(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec String.findn(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec String.format(values :: Variant, placeholder :: String, ) :: {:ok :: label, state :: State, String}
spec String.get_base_dir() :: {:ok :: label, state :: State, String}
spec String.get_basename() :: {:ok :: label, state :: State, String}
spec String.get_extension() :: {:ok :: label, state :: State, String}
spec String.get_file() :: {:ok :: label, state :: State, String}
spec String.get_slice(delimiter :: String, slice :: int, ) :: {:ok :: label, state :: State, String}
spec String.get_slice_count(delimiter :: String, ) :: {:ok :: label, state :: State, int}
spec String.get_slicec(delimiter :: int, slice :: int, ) :: {:ok :: label, state :: State, String}
spec String.hash() :: {:ok :: label, state :: State, int}
spec String.hex_to_int() :: {:ok :: label, state :: State, int}
spec String.humanize_size(size :: int, ) :: {:ok :: label, state :: State, String}
spec String.indent(prefix :: String, ) :: {:ok :: label, state :: State, String}
spec String.insert(position :: int, what :: String, ) :: {:ok :: label, state :: State, String}
spec String.is_absolute_path() :: {:ok :: label, state :: State, bool}
spec String.is_empty() :: {:ok :: label, state :: State, bool}
spec String.is_relative_path() :: {:ok :: label, state :: State, bool}
spec String.is_subsequence_of(text :: String, ) :: {:ok :: label, state :: State, bool}
spec String.is_subsequence_ofn(text :: String, ) :: {:ok :: label, state :: State, bool}
spec String.is_valid_filename() :: {:ok :: label, state :: State, bool}
spec String.is_valid_float() :: {:ok :: label, state :: State, bool}
spec String.is_valid_hex_number(with_prefix :: bool, ) :: {:ok :: label, state :: State, bool}
spec String.is_valid_html_color() :: {:ok :: label, state :: State, bool}
spec String.is_valid_identifier() :: {:ok :: label, state :: State, bool}
spec String.is_valid_int() :: {:ok :: label, state :: State, bool}
spec String.is_valid_ip_address() :: {:ok :: label, state :: State, bool}
spec String.join(parts :: PackedStringArray, ) :: {:ok :: label, state :: State, String}
spec String.json_escape() :: {:ok :: label, state :: State, String}
spec String.left(length :: int, ) :: {:ok :: label, state :: State, String}
spec String.length() :: {:ok :: label, state :: State, int}
spec String.lpad(min_length :: int, character :: String, ) :: {:ok :: label, state :: State, String}
spec String.lstrip(chars :: String, ) :: {:ok :: label, state :: State, String}
spec String.match(expr :: String, ) :: {:ok :: label, state :: State, bool}
spec String.matchn(expr :: String, ) :: {:ok :: label, state :: State, bool}
spec String.md5_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.md5_text() :: {:ok :: label, state :: State, String}
spec String.naturalnocasecmp_to(to :: String, ) :: {:ok :: label, state :: State, int}
spec String.nocasecmp_to(to :: String, ) :: {:ok :: label, state :: State, int}
spec String.num(number :: float, decimals :: int, ) :: {:ok :: label, state :: State, String}
spec String.num_int64(number :: int, base :: int, capitalize_hex :: bool, ) :: {:ok :: label, state :: State, String}
spec String.num_scientific(number :: float, ) :: {:ok :: label, state :: State, String}
spec String.num_uint64(number :: int, base :: int, capitalize_hex :: bool, ) :: {:ok :: label, state :: State, String}
spec String.pad_decimals(digits :: int, ) :: {:ok :: label, state :: State, String}
spec String.pad_zeros(digits :: int, ) :: {:ok :: label, state :: State, String}
spec String.path_join(file :: String, ) :: {:ok :: label, state :: State, String}
spec String.repeat(count :: int, ) :: {:ok :: label, state :: State, String}
spec String.replace(what :: String, forwhat :: String, ) :: {:ok :: label, state :: State, String}
spec String.replacen(what :: String, forwhat :: String, ) :: {:ok :: label, state :: State, String}
spec String.rfind(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec String.rfindn(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec String.right(length :: int, ) :: {:ok :: label, state :: State, String}
spec String.rpad(min_length :: int, character :: String, ) :: {:ok :: label, state :: State, String}
spec String.rsplit(delimiter :: String, allow_empty :: bool, maxsplit :: int, ) :: {:ok :: label, state :: State, PackedStringArray}
spec String.rstrip(chars :: String, ) :: {:ok :: label, state :: State, String}
spec String.sha1_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.sha1_text() :: {:ok :: label, state :: State, String}
spec String.sha256_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.sha256_text() :: {:ok :: label, state :: State, String}
spec String.similarity(text :: String, ) :: {:ok :: label, state :: State, float}
spec String.simplify_path() :: {:ok :: label, state :: State, String}
spec String.split(delimiter :: String, allow_empty :: bool, maxsplit :: int, ) :: {:ok :: label, state :: State, PackedStringArray}
spec String.split_floats(delimiter :: String, allow_empty :: bool, ) :: {:ok :: label, state :: State, PackedFloat64Array}
spec String.strip_edges(left :: bool, right :: bool, ) :: {:ok :: label, state :: State, String}
spec String.strip_escapes() :: {:ok :: label, state :: State, String}
spec String.substr(from :: int, len :: int, ) :: {:ok :: label, state :: State, String}
spec String.to_ascii_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.to_camel_case() :: {:ok :: label, state :: State, String}
spec String.to_float() :: {:ok :: label, state :: State, float}
spec String.to_int() :: {:ok :: label, state :: State, int}
spec String.to_lower() :: {:ok :: label, state :: State, String}
spec String.to_pascal_case() :: {:ok :: label, state :: State, String}
spec String.to_snake_case() :: {:ok :: label, state :: State, String}
spec String.to_upper() :: {:ok :: label, state :: State, String}
spec String.to_utf16_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.to_utf32_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.to_utf8_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec String.trim_prefix(prefix :: String, ) :: {:ok :: label, state :: State, String}
spec String.trim_suffix(suffix :: String, ) :: {:ok :: label, state :: State, String}
spec String.unicode_at(at :: int, ) :: {:ok :: label, state :: State, int}
spec String.uri_decode() :: {:ok :: label, state :: State, String}
spec String.uri_encode() :: {:ok :: label, state :: State, String}
spec String.validate_filename() :: {:ok :: label, state :: State, String}
spec String.validate_node_name() :: {:ok :: label, state :: State, String}
spec String.xml_escape(escape_quotes :: bool, ) :: {:ok :: label, state :: State, String}
spec String.xml_unescape() :: {:ok :: label, state :: State, String}
spec StringName.begins_with(text :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.bigrams() :: {:ok :: label, state :: State, PackedStringArray}
spec StringName.bin_to_int() :: {:ok :: label, state :: State, int}
spec StringName.c_escape() :: {:ok :: label, state :: State, String}
spec StringName.c_unescape() :: {:ok :: label, state :: State, String}
spec StringName.capitalize() :: {:ok :: label, state :: State, String}
spec StringName.casecmp_to(to :: String, ) :: {:ok :: label, state :: State, int}
spec StringName.contains(what :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.count(what :: String, from :: int, to :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.countn(what :: String, from :: int, to :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.dedent() :: {:ok :: label, state :: State, String}
spec StringName.ends_with(text :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.find(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.findn(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.format(values :: Variant, placeholder :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.get_base_dir() :: {:ok :: label, state :: State, String}
spec StringName.get_basename() :: {:ok :: label, state :: State, String}
spec StringName.get_extension() :: {:ok :: label, state :: State, String}
spec StringName.get_file() :: {:ok :: label, state :: State, String}
spec StringName.get_slice(delimiter :: String, slice :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.get_slice_count(delimiter :: String, ) :: {:ok :: label, state :: State, int}
spec StringName.get_slicec(delimiter :: int, slice :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.hash() :: {:ok :: label, state :: State, int}
spec StringName.hex_to_int() :: {:ok :: label, state :: State, int}
spec StringName.indent(prefix :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.insert(position :: int, what :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.is_absolute_path() :: {:ok :: label, state :: State, bool}
spec StringName.is_empty() :: {:ok :: label, state :: State, bool}
spec StringName.is_relative_path() :: {:ok :: label, state :: State, bool}
spec StringName.is_subsequence_of(text :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.is_subsequence_ofn(text :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_filename() :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_float() :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_hex_number(with_prefix :: bool, ) :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_html_color() :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_identifier() :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_int() :: {:ok :: label, state :: State, bool}
spec StringName.is_valid_ip_address() :: {:ok :: label, state :: State, bool}
spec StringName.join(parts :: PackedStringArray, ) :: {:ok :: label, state :: State, String}
spec StringName.json_escape() :: {:ok :: label, state :: State, String}
spec StringName.left(length :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.length() :: {:ok :: label, state :: State, int}
spec StringName.lpad(min_length :: int, character :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.lstrip(chars :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.match(expr :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.matchn(expr :: String, ) :: {:ok :: label, state :: State, bool}
spec StringName.md5_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.md5_text() :: {:ok :: label, state :: State, String}
spec StringName.naturalnocasecmp_to(to :: String, ) :: {:ok :: label, state :: State, int}
spec StringName.nocasecmp_to(to :: String, ) :: {:ok :: label, state :: State, int}
spec StringName.pad_decimals(digits :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.pad_zeros(digits :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.path_join(file :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.repeat(count :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.replace(what :: String, forwhat :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.replacen(what :: String, forwhat :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.rfind(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.rfindn(what :: String, from :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.right(length :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.rpad(min_length :: int, character :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.rsplit(delimiter :: String, allow_empty :: bool, maxsplit :: int, ) :: {:ok :: label, state :: State, PackedStringArray}
spec StringName.rstrip(chars :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.sha1_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.sha1_text() :: {:ok :: label, state :: State, String}
spec StringName.sha256_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.sha256_text() :: {:ok :: label, state :: State, String}
spec StringName.similarity(text :: String, ) :: {:ok :: label, state :: State, float}
spec StringName.simplify_path() :: {:ok :: label, state :: State, String}
spec StringName.split(delimiter :: String, allow_empty :: bool, maxsplit :: int, ) :: {:ok :: label, state :: State, PackedStringArray}
spec StringName.split_floats(delimiter :: String, allow_empty :: bool, ) :: {:ok :: label, state :: State, PackedFloat64Array}
spec StringName.strip_edges(left :: bool, right :: bool, ) :: {:ok :: label, state :: State, String}
spec StringName.strip_escapes() :: {:ok :: label, state :: State, String}
spec StringName.substr(from :: int, len :: int, ) :: {:ok :: label, state :: State, String}
spec StringName.to_ascii_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.to_camel_case() :: {:ok :: label, state :: State, String}
spec StringName.to_float() :: {:ok :: label, state :: State, float}
spec StringName.to_int() :: {:ok :: label, state :: State, int}
spec StringName.to_lower() :: {:ok :: label, state :: State, String}
spec StringName.to_pascal_case() :: {:ok :: label, state :: State, String}
spec StringName.to_snake_case() :: {:ok :: label, state :: State, String}
spec StringName.to_upper() :: {:ok :: label, state :: State, String}
spec StringName.to_utf16_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.to_utf32_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.to_utf8_buffer() :: {:ok :: label, state :: State, PackedByteArray}
spec StringName.trim_prefix(prefix :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.trim_suffix(suffix :: String, ) :: {:ok :: label, state :: State, String}
spec StringName.unicode_at(at :: int, ) :: {:ok :: label, state :: State, int}
spec StringName.uri_decode() :: {:ok :: label, state :: State, String}
spec StringName.uri_encode() :: {:ok :: label, state :: State, String}
spec StringName.validate_filename() :: {:ok :: label, state :: State, String}
spec StringName.validate_node_name() :: {:ok :: label, state :: State, String}
spec StringName.xml_escape(escape_quotes :: bool, ) :: {:ok :: label, state :: State, String}
spec StringName.xml_unescape() :: {:ok :: label, state :: State, String}
spec StyleBox._draw(to_canvas_item :: RID, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec StyleBox._get_draw_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec StyleBox._get_minimum_size() :: {:ok :: label, state :: State, }
spec StyleBox._test_mask(point :: Vector2, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec StyleBox.draw(canvas_item :: RID, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec StyleBox.get_content_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec StyleBox.get_current_item_drawn() :: {:ok :: label, state :: State, }
spec StyleBox.get_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec StyleBox.get_minimum_size() :: {:ok :: label, state :: State, }
spec StyleBox.get_offset() :: {:ok :: label, state :: State, }
spec StyleBox.set_content_margin(margin :: enum::Side, offset :: float, ) :: {:ok :: label, state :: State, }
spec StyleBox.set_content_margin_all(offset :: float, ) :: {:ok :: label, state :: State, }
spec StyleBox.test_mask(point :: Vector2, rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_aa_size() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_bg_color() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_border_blend() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_border_color() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_border_width(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_border_width_min() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_corner_detail() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_corner_radius(corner :: enum::Corner, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_expand_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_shadow_color() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_shadow_offset() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_shadow_size() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.get_skew() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.is_anti_aliased() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.is_draw_center_enabled() :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_aa_size(size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_anti_aliased(anti_aliased :: bool, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_bg_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_border_blend(blend :: bool, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_border_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_border_width(margin :: enum::Side, width :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_border_width_all(width :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_corner_detail(detail :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_corner_radius(corner :: enum::Corner, radius :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_corner_radius_all(radius :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_draw_center(draw_center :: bool, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_expand_margin(margin :: enum::Side, size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_expand_margin_all(size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_shadow_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_shadow_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_shadow_size(size :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxFlat.set_skew(skew :: Vector2, ) :: {:ok :: label, state :: State, }
spec StyleBoxLine.get_color() :: {:ok :: label, state :: State, }
spec StyleBoxLine.get_grow_begin() :: {:ok :: label, state :: State, }
spec StyleBoxLine.get_grow_end() :: {:ok :: label, state :: State, }
spec StyleBoxLine.get_thickness() :: {:ok :: label, state :: State, }
spec StyleBoxLine.is_vertical() :: {:ok :: label, state :: State, }
spec StyleBoxLine.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec StyleBoxLine.set_grow_begin(offset :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxLine.set_grow_end(offset :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxLine.set_thickness(thickness :: int, ) :: {:ok :: label, state :: State, }
spec StyleBoxLine.set_vertical(vertical :: bool, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_expand_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_h_axis_stretch_mode() :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_modulate() :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_region_rect() :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_texture() :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_texture_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.get_v_axis_stretch_mode() :: {:ok :: label, state :: State, }
spec StyleBoxTexture.is_draw_center_enabled() :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_draw_center(enable :: bool, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_expand_margin(margin :: enum::Side, size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_expand_margin_all(size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_h_axis_stretch_mode(mode :: enum::StyleBoxTexture.AxisStretchMode, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_modulate(color :: Color, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_region_rect(region :: Rect2, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_texture_margin(margin :: enum::Side, size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_texture_margin_all(size :: float, ) :: {:ok :: label, state :: State, }
spec StyleBoxTexture.set_v_axis_stretch_mode(mode :: enum::StyleBoxTexture.AxisStretchMode, ) :: {:ok :: label, state :: State, }
spec SubViewport.get_clear_mode() :: {:ok :: label, state :: State, }
spec SubViewport.get_size() :: {:ok :: label, state :: State, }
spec SubViewport.get_size_2d_override() :: {:ok :: label, state :: State, }
spec SubViewport.get_update_mode() :: {:ok :: label, state :: State, }
spec SubViewport.is_size_2d_override_stretch_enabled() :: {:ok :: label, state :: State, }
spec SubViewport.set_clear_mode(mode :: enum::SubViewport.ClearMode, ) :: {:ok :: label, state :: State, }
spec SubViewport.set_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec SubViewport.set_size_2d_override(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec SubViewport.set_size_2d_override_stretch(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SubViewport.set_update_mode(mode :: enum::SubViewport.UpdateMode, ) :: {:ok :: label, state :: State, }
spec SubViewportContainer.get_stretch_shrink() :: {:ok :: label, state :: State, }
spec SubViewportContainer.is_stretch_enabled() :: {:ok :: label, state :: State, }
spec SubViewportContainer.set_stretch(enable :: bool, ) :: {:ok :: label, state :: State, }
spec SubViewportContainer.set_stretch_shrink(amount :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.add_index(index :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.add_triangle_fan(vertices :: PackedVector3Array, uvs :: PackedVector2Array, colors :: PackedColorArray, uv2s :: PackedVector2Array, normals :: PackedVector3Array, tangents :: Array, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.add_vertex(vertex :: Vector3, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.append_from(existing :: Mesh, surface :: int, transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.begin(primitive :: enum::Mesh.PrimitiveType, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.clear() :: {:ok :: label, state :: State, }
spec SurfaceTool.commit(existing :: ArrayMesh, flags :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.commit_to_arrays() :: {:ok :: label, state :: State, }
spec SurfaceTool.create_from(existing :: Mesh, surface :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.create_from_blend_shape(existing :: Mesh, surface :: int, blend_shape :: String, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.deindex() :: {:ok :: label, state :: State, }
spec SurfaceTool.generate_lod(nd_threshold :: float, target_index_count :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.generate_normals(flip :: bool, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.generate_tangents() :: {:ok :: label, state :: State, }
spec SurfaceTool.get_aabb() :: {:ok :: label, state :: State, }
spec SurfaceTool.get_custom_format(channel_index :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.get_primitive_type() :: {:ok :: label, state :: State, }
spec SurfaceTool.get_skin_weight_count() :: {:ok :: label, state :: State, }
spec SurfaceTool.index() :: {:ok :: label, state :: State, }
spec SurfaceTool.optimize_indices_for_cache() :: {:ok :: label, state :: State, }
spec SurfaceTool.set_bones(bones :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_color(color :: Color, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_custom(channel_index :: int, custom_color :: Color, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_custom_format(channel_index :: int, format :: enum::SurfaceTool.CustomFormat, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_normal(normal :: Vector3, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_skin_weight_count(count :: enum::SurfaceTool.SkinWeightCount, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_smooth_group(index :: int, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_tangent(tangent :: Plane, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_uv(uv :: Vector2, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_uv2(uv2 :: Vector2, ) :: {:ok :: label, state :: State, }
spec SurfaceTool.set_weights(weights :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec SyntaxHighlighter._clear_highlighting_cache() :: {:ok :: label, state :: State, }
spec SyntaxHighlighter._get_line_syntax_highlighting(line :: int, ) :: {:ok :: label, state :: State, }
spec SyntaxHighlighter._update_cache() :: {:ok :: label, state :: State, }
spec SyntaxHighlighter.clear_highlighting_cache() :: {:ok :: label, state :: State, }
spec SyntaxHighlighter.get_line_syntax_highlighting(line :: int, ) :: {:ok :: label, state :: State, }
spec SyntaxHighlighter.get_text_edit() :: {:ok :: label, state :: State, }
spec SyntaxHighlighter.update_cache() :: {:ok :: label, state :: State, }
spec SystemFont.get_antialiasing() :: {:ok :: label, state :: State, }
spec SystemFont.get_font_italic() :: {:ok :: label, state :: State, }
spec SystemFont.get_font_names() :: {:ok :: label, state :: State, }
spec SystemFont.get_generate_mipmaps() :: {:ok :: label, state :: State, }
spec SystemFont.get_hinting() :: {:ok :: label, state :: State, }
spec SystemFont.get_msdf_pixel_range() :: {:ok :: label, state :: State, }
spec SystemFont.get_msdf_size() :: {:ok :: label, state :: State, }
spec SystemFont.get_oversampling() :: {:ok :: label, state :: State, }
spec SystemFont.get_subpixel_positioning() :: {:ok :: label, state :: State, }
spec SystemFont.is_allow_system_fallback() :: {:ok :: label, state :: State, }
spec SystemFont.is_force_autohinter() :: {:ok :: label, state :: State, }
spec SystemFont.is_multichannel_signed_distance_field() :: {:ok :: label, state :: State, }
spec SystemFont.set_allow_system_fallback(allow_system_fallback :: bool, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_antialiasing(antialiasing :: enum::TextServer.FontAntialiasing, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_font_italic(italic :: bool, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_font_names(names :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_font_stretch(stretch :: int, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_font_weight(weight :: int, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_force_autohinter(force_autohinter :: bool, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_generate_mipmaps(generate_mipmaps :: bool, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_hinting(hinting :: enum::TextServer.Hinting, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_msdf_pixel_range(msdf_pixel_range :: int, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_msdf_size(msdf_size :: int, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_multichannel_signed_distance_field(msdf :: bool, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_oversampling(oversampling :: float, ) :: {:ok :: label, state :: State, }
spec SystemFont.set_subpixel_positioning(subpixel_positioning :: enum::TextServer.SubpixelPositioning, ) :: {:ok :: label, state :: State, }
spec TCPServer.get_local_port() :: {:ok :: label, state :: State, }
spec TCPServer.is_connection_available() :: {:ok :: label, state :: State, }
spec TCPServer.is_listening() :: {:ok :: label, state :: State, }
spec TCPServer.listen(port :: int, bind_address :: String, ) :: {:ok :: label, state :: State, }
spec TCPServer.stop() :: {:ok :: label, state :: State, }
spec TCPServer.take_connection() :: {:ok :: label, state :: State, }
spec TLSOptions.client(trusted_chain :: X509Certificate, common_name_override :: String, ) :: {:ok :: label, state :: State, }
spec TLSOptions.client_unsafe(trusted_chain :: X509Certificate, ) :: {:ok :: label, state :: State, }
spec TLSOptions.server(key :: CryptoKey, certificate :: X509Certificate, ) :: {:ok :: label, state :: State, }
spec TabBar.add_tab(title :: String, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TabBar.clear_tabs() :: {:ok :: label, state :: State, }
spec TabBar.ensure_tab_visible(idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_clip_tabs() :: {:ok :: label, state :: State, }
spec TabBar.get_current_tab() :: {:ok :: label, state :: State, }
spec TabBar.get_drag_to_rearrange_enabled() :: {:ok :: label, state :: State, }
spec TabBar.get_max_tab_width() :: {:ok :: label, state :: State, }
spec TabBar.get_offset_buttons_visible() :: {:ok :: label, state :: State, }
spec TabBar.get_previous_tab() :: {:ok :: label, state :: State, }
spec TabBar.get_scroll_to_selected() :: {:ok :: label, state :: State, }
spec TabBar.get_scrolling_enabled() :: {:ok :: label, state :: State, }
spec TabBar.get_select_with_rmb() :: {:ok :: label, state :: State, }
spec TabBar.get_tab_alignment() :: {:ok :: label, state :: State, }
spec TabBar.get_tab_button_icon(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tab_close_display_policy() :: {:ok :: label, state :: State, }
spec TabBar.get_tab_count() :: {:ok :: label, state :: State, }
spec TabBar.get_tab_icon(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tab_idx_at_point(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tab_language(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tab_offset() :: {:ok :: label, state :: State, }
spec TabBar.get_tab_rect(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tab_text_direction(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tab_title(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.get_tabs_rearrange_group() :: {:ok :: label, state :: State, }
spec TabBar.is_tab_disabled(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.is_tab_hidden(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.move_tab(from :: int, to :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.remove_tab(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.set_clip_tabs(clip_tabs :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_current_tab(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.set_drag_to_rearrange_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_max_tab_width(width :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.set_scroll_to_selected(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_scrolling_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_select_with_rmb(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_alignment(alignment :: enum::TabBar.AlignmentMode, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_button_icon(tab_idx :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_close_display_policy(policy :: enum::TabBar.CloseButtonDisplayPolicy, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_count(count :: int, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_disabled(tab_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_hidden(tab_idx :: int, hidden :: bool, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_icon(tab_idx :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_language(tab_idx :: int, language :: String, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_text_direction(tab_idx :: int, direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tab_title(tab_idx :: int, title :: String, ) :: {:ok :: label, state :: State, }
spec TabBar.set_tabs_rearrange_group(group_id :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.are_tabs_visible() :: {:ok :: label, state :: State, }
spec TabContainer.get_clip_tabs() :: {:ok :: label, state :: State, }
spec TabContainer.get_current_tab() :: {:ok :: label, state :: State, }
spec TabContainer.get_current_tab_control() :: {:ok :: label, state :: State, }
spec TabContainer.get_drag_to_rearrange_enabled() :: {:ok :: label, state :: State, }
spec TabContainer.get_popup() :: {:ok :: label, state :: State, }
spec TabContainer.get_previous_tab() :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_alignment() :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_button_icon(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_control(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_count() :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_icon(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_idx_at_point(point :: Vector2, ) :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_idx_from_control(control :: Control, ) :: {:ok :: label, state :: State, }
spec TabContainer.get_tab_title(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.get_tabs_rearrange_group() :: {:ok :: label, state :: State, }
spec TabContainer.get_use_hidden_tabs_for_min_size() :: {:ok :: label, state :: State, }
spec TabContainer.is_all_tabs_in_front() :: {:ok :: label, state :: State, }
spec TabContainer.is_tab_disabled(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.is_tab_hidden(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_all_tabs_in_front(is_front :: bool, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_clip_tabs(clip_tabs :: bool, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_current_tab(tab_idx :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_drag_to_rearrange_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_popup(popup :: Node, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tab_alignment(alignment :: enum::TabBar.AlignmentMode, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tab_button_icon(tab_idx :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tab_disabled(tab_idx :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tab_hidden(tab_idx :: int, hidden :: bool, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tab_icon(tab_idx :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tab_title(tab_idx :: int, title :: String, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tabs_rearrange_group(group_id :: int, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_tabs_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec TabContainer.set_use_hidden_tabs_for_min_size(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit._backspace(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit._copy(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit._cut(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit._handle_unicode_input(unicode_char :: int, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit._paste(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit._paste_primary_clipboard(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.add_caret(line :: int, col :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.add_caret_at_carets(below :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.add_gutter(at :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.add_selection_for_next_occurrence() :: {:ok :: label, state :: State, }
spec TextEdit.adjust_carets_after_edit(caret :: int, from_line :: int, from_col :: int, to_line :: int, to_col :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.adjust_viewport_to_caret(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.backspace(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.begin_complex_operation() :: {:ok :: label, state :: State, }
spec TextEdit.center_viewport_to_caret(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.clear() :: {:ok :: label, state :: State, }
spec TextEdit.clear_undo_history() :: {:ok :: label, state :: State, }
spec TextEdit.copy(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.cut(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.delete_selection(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.deselect(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.end_action() :: {:ok :: label, state :: State, }
spec TextEdit.end_complex_operation() :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_blink_interval() :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_column(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_count() :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_draw_pos(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_index_edit_order() :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_line(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_type() :: {:ok :: label, state :: State, }
spec TextEdit.get_caret_wrap_index(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_draw_control_chars() :: {:ok :: label, state :: State, }
spec TextEdit.get_first_non_whitespace_column(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_first_visible_line() :: {:ok :: label, state :: State, }
spec TextEdit.get_gutter_count() :: {:ok :: label, state :: State, }
spec TextEdit.get_gutter_name(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_gutter_type(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_gutter_width(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_h_scroll() :: {:ok :: label, state :: State, }
spec TextEdit.get_h_scroll_bar() :: {:ok :: label, state :: State, }
spec TextEdit.get_indent_level(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_language() :: {:ok :: label, state :: State, }
spec TextEdit.get_last_full_visible_line() :: {:ok :: label, state :: State, }
spec TextEdit.get_last_full_visible_line_wrap_index() :: {:ok :: label, state :: State, }
spec TextEdit.get_last_unhidden_line() :: {:ok :: label, state :: State, }
spec TextEdit.get_line(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_background_color(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_column_at_pos(position :: Vector2i, allow_out_of_bounds :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_count() :: {:ok :: label, state :: State, }
spec TextEdit.get_line_gutter_icon(line :: int, gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_gutter_item_color(line :: int, gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_gutter_metadata(line :: int, gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_gutter_text(line :: int, gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_height() :: {:ok :: label, state :: State, }
spec TextEdit.get_line_width(line :: int, wrap_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_wrap_count(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_wrap_index_at_column(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_wrapped_text(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_line_wrapping_mode() :: {:ok :: label, state :: State, }
spec TextEdit.get_local_mouse_pos() :: {:ok :: label, state :: State, }
spec TextEdit.get_menu() :: {:ok :: label, state :: State, }
spec TextEdit.get_minimap_line_at_pos(position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_minimap_visible_lines() :: {:ok :: label, state :: State, }
spec TextEdit.get_minimap_width() :: {:ok :: label, state :: State, }
spec TextEdit.get_next_visible_line_index_offset_from(line :: int, wrap_index :: int, visible_amount :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_next_visible_line_offset_from(line :: int, visible_amount :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_placeholder() :: {:ok :: label, state :: State, }
spec TextEdit.get_pos_at_line_column(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_rect_at_line_column(line :: int, column :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_saved_version() :: {:ok :: label, state :: State, }
spec TextEdit.get_scroll_pos_for_line(line :: int, wrap_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selected_text(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_column(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_from_column(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_from_line(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_line(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_mode() :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_to_column(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_selection_to_line(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec TextEdit.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec TextEdit.get_syntax_highlighter() :: {:ok :: label, state :: State, }
spec TextEdit.get_tab_size() :: {:ok :: label, state :: State, }
spec TextEdit.get_text() :: {:ok :: label, state :: State, }
spec TextEdit.get_text_direction() :: {:ok :: label, state :: State, }
spec TextEdit.get_total_gutter_width() :: {:ok :: label, state :: State, }
spec TextEdit.get_total_visible_line_count() :: {:ok :: label, state :: State, }
spec TextEdit.get_v_scroll() :: {:ok :: label, state :: State, }
spec TextEdit.get_v_scroll_bar() :: {:ok :: label, state :: State, }
spec TextEdit.get_v_scroll_speed() :: {:ok :: label, state :: State, }
spec TextEdit.get_version() :: {:ok :: label, state :: State, }
spec TextEdit.get_visible_line_count() :: {:ok :: label, state :: State, }
spec TextEdit.get_visible_line_count_in_range(from_line :: int, to_line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_word_at_pos(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextEdit.get_word_under_caret(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.has_ime_text() :: {:ok :: label, state :: State, }
spec TextEdit.has_redo() :: {:ok :: label, state :: State, }
spec TextEdit.has_selection(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.has_undo() :: {:ok :: label, state :: State, }
spec TextEdit.insert_line_at(line :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.insert_text_at_caret(text :: String, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_caret_blink_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_caret_mid_grapheme_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_caret_visible(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_context_menu_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_deselect_on_focus_loss_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_drag_and_drop_selection_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_dragging_cursor() :: {:ok :: label, state :: State, }
spec TextEdit.is_drawing_minimap() :: {:ok :: label, state :: State, }
spec TextEdit.is_drawing_spaces() :: {:ok :: label, state :: State, }
spec TextEdit.is_drawing_tabs() :: {:ok :: label, state :: State, }
spec TextEdit.is_editable() :: {:ok :: label, state :: State, }
spec TextEdit.is_fit_content_height_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_gutter_clickable(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_gutter_drawn(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_gutter_overwritable(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_highlight_all_occurrences_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_highlight_current_line_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_line_gutter_clickable(line :: int, gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_line_wrapped(line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_menu_visible() :: {:ok :: label, state :: State, }
spec TextEdit.is_middle_mouse_paste_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_mouse_over_selection(edges :: bool, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.is_move_caret_on_right_click_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_multiple_carets_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_overtype_mode_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_scroll_past_end_of_file_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_selecting_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_shortcut_keys_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_smooth_scroll_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.is_virtual_keyboard_enabled() :: {:ok :: label, state :: State, }
spec TextEdit.menu_option(option :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.merge_gutters(from_line :: int, to_line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.merge_overlapping_carets() :: {:ok :: label, state :: State, }
spec TextEdit.paste(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.paste_primary_clipboard(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.redo() :: {:ok :: label, state :: State, }
spec TextEdit.remove_caret(caret :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.remove_gutter(gutter :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.remove_secondary_carets() :: {:ok :: label, state :: State, }
spec TextEdit.remove_text(from_line :: int, from_column :: int, to_line :: int, to_column :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.search(text :: String, flags :: int, from_line :: int, from_colum :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.select(from_line :: int, from_column :: int, to_line :: int, to_column :: int, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.select_all() :: {:ok :: label, state :: State, }
spec TextEdit.select_word_under_caret(caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_caret_blink_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_caret_blink_interval(interval :: float, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_caret_column(column :: int, adjust_viewport :: bool, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_caret_line(line :: int, adjust_viewport :: bool, can_be_hidden :: bool, wrap_index :: int, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_caret_mid_grapheme_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_caret_type(type :: enum::TextEdit.CaretType, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_context_menu_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_deselect_on_focus_loss_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_drag_and_drop_selection_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_draw_control_chars(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_draw_minimap(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_draw_spaces(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_draw_tabs(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_editable(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_fit_content_height_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_clickable(gutter :: int, clickable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_custom_draw(column :: int, draw_callback :: Callable, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_draw(gutter :: int, draw :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_name(gutter :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_overwritable(gutter :: int, overwritable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_type(gutter :: int, type :: enum::TextEdit.GutterType, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_gutter_width(gutter :: int, width :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_h_scroll(value :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_highlight_all_occurrences(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_highlight_current_line(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line(line :: int, new_text :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_as_center_visible(line :: int, wrap_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_as_first_visible(line :: int, wrap_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_as_last_visible(line :: int, wrap_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_background_color(line :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_gutter_clickable(line :: int, gutter :: int, clickable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_gutter_icon(line :: int, gutter :: int, icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_gutter_item_color(line :: int, gutter :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_gutter_metadata(line :: int, gutter :: int, metadata :: Variant, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_gutter_text(line :: int, gutter :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_line_wrapping_mode(mode :: enum::TextEdit.LineWrappingMode, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_middle_mouse_paste_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_minimap_width(width :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_move_caret_on_right_click_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_multiple_carets_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_overtype_mode_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_placeholder(text :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_scroll_past_end_of_file_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_search_flags(flags :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_search_text(search_text :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_selecting_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_selection_mode(mode :: enum::TextEdit.SelectionMode, line :: int, column :: int, caret_index :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_shortcut_keys_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_smooth_scroll_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_syntax_highlighter(syntax_highlighter :: SyntaxHighlighter, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_tab_size(size :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_text_direction(direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_tooltip_request_func(callback :: Callable, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_v_scroll(value :: float, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_v_scroll_speed(speed :: float, ) :: {:ok :: label, state :: State, }
spec TextEdit.set_virtual_keyboard_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextEdit.start_action(action :: enum::TextEdit.EditAction, ) :: {:ok :: label, state :: State, }
spec TextEdit.swap_lines(from_line :: int, to_line :: int, ) :: {:ok :: label, state :: State, }
spec TextEdit.tag_saved_version() :: {:ok :: label, state :: State, }
spec TextEdit.undo() :: {:ok :: label, state :: State, }
spec TextLine.add_object(key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, length :: int, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextLine.add_string(text :: String, font :: Font, font_size :: int, language :: String, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec TextLine.clear() :: {:ok :: label, state :: State, }
spec TextLine.draw(canvas :: RID, pos :: Vector2, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextLine.draw_outline(canvas :: RID, pos :: Vector2, outline_size :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextLine.get_direction() :: {:ok :: label, state :: State, }
spec TextLine.get_flags() :: {:ok :: label, state :: State, }
spec TextLine.get_horizontal_alignment() :: {:ok :: label, state :: State, }
spec TextLine.get_line_ascent() :: {:ok :: label, state :: State, }
spec TextLine.get_line_descent() :: {:ok :: label, state :: State, }
spec TextLine.get_line_underline_position() :: {:ok :: label, state :: State, }
spec TextLine.get_line_underline_thickness() :: {:ok :: label, state :: State, }
spec TextLine.get_line_width() :: {:ok :: label, state :: State, }
spec TextLine.get_object_rect(key :: Variant, ) :: {:ok :: label, state :: State, }
spec TextLine.get_objects() :: {:ok :: label, state :: State, }
spec TextLine.get_orientation() :: {:ok :: label, state :: State, }
spec TextLine.get_preserve_control() :: {:ok :: label, state :: State, }
spec TextLine.get_preserve_invalid() :: {:ok :: label, state :: State, }
spec TextLine.get_rid() :: {:ok :: label, state :: State, }
spec TextLine.get_size() :: {:ok :: label, state :: State, }
spec TextLine.get_text_overrun_behavior() :: {:ok :: label, state :: State, }
spec TextLine.get_width() :: {:ok :: label, state :: State, }
spec TextLine.hit_test(coords :: float, ) :: {:ok :: label, state :: State, }
spec TextLine.resize_object(key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextLine.set_bidi_override(override :: Array, ) :: {:ok :: label, state :: State, }
spec TextLine.set_direction(direction :: enum::TextServer.Direction, ) :: {:ok :: label, state :: State, }
spec TextLine.set_flags(flags :: bitfield::TextServer.JustificationFlag, ) :: {:ok :: label, state :: State, }
spec TextLine.set_horizontal_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec TextLine.set_orientation(orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec TextLine.set_preserve_control(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextLine.set_preserve_invalid(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextLine.set_text_overrun_behavior(overrun_behavior :: enum::TextServer.OverrunBehavior, ) :: {:ok :: label, state :: State, }
spec TextLine.set_width(width :: float, ) :: {:ok :: label, state :: State, }
spec TextLine.tab_align(tab_stops :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec TextMesh.get_autowrap_mode() :: {:ok :: label, state :: State, }
spec TextMesh.get_curve_step() :: {:ok :: label, state :: State, }
spec TextMesh.get_depth() :: {:ok :: label, state :: State, }
spec TextMesh.get_font() :: {:ok :: label, state :: State, }
spec TextMesh.get_font_size() :: {:ok :: label, state :: State, }
spec TextMesh.get_horizontal_alignment() :: {:ok :: label, state :: State, }
spec TextMesh.get_language() :: {:ok :: label, state :: State, }
spec TextMesh.get_line_spacing() :: {:ok :: label, state :: State, }
spec TextMesh.get_offset() :: {:ok :: label, state :: State, }
spec TextMesh.get_pixel_size() :: {:ok :: label, state :: State, }
spec TextMesh.get_structured_text_bidi_override() :: {:ok :: label, state :: State, }
spec TextMesh.get_structured_text_bidi_override_options() :: {:ok :: label, state :: State, }
spec TextMesh.get_text() :: {:ok :: label, state :: State, }
spec TextMesh.get_text_direction() :: {:ok :: label, state :: State, }
spec TextMesh.get_vertical_alignment() :: {:ok :: label, state :: State, }
spec TextMesh.get_width() :: {:ok :: label, state :: State, }
spec TextMesh.is_uppercase() :: {:ok :: label, state :: State, }
spec TextMesh.set_autowrap_mode(autowrap_mode :: enum::TextServer.AutowrapMode, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_curve_step(curve_step :: float, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_depth(depth :: float, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_font(font :: Font, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_font_size(font_size :: int, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_horizontal_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_language(language :: String, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_line_spacing(line_spacing :: float, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_pixel_size(pixel_size :: float, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_structured_text_bidi_override(parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_structured_text_bidi_override_options(args :: Array, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_text(text :: String, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_text_direction(direction :: enum::TextServer.Direction, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_uppercase(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_vertical_alignment(alignment :: enum::VerticalAlignment, ) :: {:ok :: label, state :: State, }
spec TextMesh.set_width(width :: float, ) :: {:ok :: label, state :: State, }
spec TextParagraph.add_object(key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, length :: int, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextParagraph.add_string(text :: String, font :: Font, font_size :: int, language :: String, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec TextParagraph.clear() :: {:ok :: label, state :: State, }
spec TextParagraph.clear_dropcap() :: {:ok :: label, state :: State, }
spec TextParagraph.draw(canvas :: RID, pos :: Vector2, color :: Color, dc_color :: Color, ) :: {:ok :: label, state :: State, }
spec TextParagraph.draw_dropcap(canvas :: RID, pos :: Vector2, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextParagraph.draw_dropcap_outline(canvas :: RID, pos :: Vector2, outline_size :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextParagraph.draw_line(canvas :: RID, pos :: Vector2, line :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextParagraph.draw_line_outline(canvas :: RID, pos :: Vector2, line :: int, outline_size :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextParagraph.draw_outline(canvas :: RID, pos :: Vector2, outline_size :: int, color :: Color, dc_color :: Color, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_alignment() :: {:ok :: label, state :: State, }
spec TextParagraph.get_break_flags() :: {:ok :: label, state :: State, }
spec TextParagraph.get_custom_punctuation() :: {:ok :: label, state :: State, }
spec TextParagraph.get_direction() :: {:ok :: label, state :: State, }
spec TextParagraph.get_dropcap_lines() :: {:ok :: label, state :: State, }
spec TextParagraph.get_dropcap_rid() :: {:ok :: label, state :: State, }
spec TextParagraph.get_dropcap_size() :: {:ok :: label, state :: State, }
spec TextParagraph.get_justification_flags() :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_ascent(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_count() :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_descent(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_object_rect(line :: int, key :: Variant, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_objects(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_range(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_rid(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_size(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_underline_position(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_underline_thickness(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_line_width(line :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.get_max_lines_visible() :: {:ok :: label, state :: State, }
spec TextParagraph.get_non_wrapped_size() :: {:ok :: label, state :: State, }
spec TextParagraph.get_orientation() :: {:ok :: label, state :: State, }
spec TextParagraph.get_preserve_control() :: {:ok :: label, state :: State, }
spec TextParagraph.get_preserve_invalid() :: {:ok :: label, state :: State, }
spec TextParagraph.get_rid() :: {:ok :: label, state :: State, }
spec TextParagraph.get_size() :: {:ok :: label, state :: State, }
spec TextParagraph.get_text_overrun_behavior() :: {:ok :: label, state :: State, }
spec TextParagraph.get_width() :: {:ok :: label, state :: State, }
spec TextParagraph.hit_test(coords :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextParagraph.resize_object(key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_alignment(alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_bidi_override(override :: Array, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_break_flags(flags :: bitfield::TextServer.LineBreakFlag, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_custom_punctuation(custom_punctuation :: String, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_direction(direction :: enum::TextServer.Direction, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_dropcap(text :: String, font :: Font, font_size :: int, dropcap_margins :: Rect2, language :: String, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_justification_flags(flags :: bitfield::TextServer.JustificationFlag, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_max_lines_visible(max_lines_visible :: int, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_orientation(orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_preserve_control(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_preserve_invalid(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_text_overrun_behavior(overrun_behavior :: enum::TextServer.OverrunBehavior, ) :: {:ok :: label, state :: State, }
spec TextParagraph.set_width(width :: float, ) :: {:ok :: label, state :: State, }
spec TextParagraph.tab_align(tab_stops :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec TextServer.create_font() :: {:ok :: label, state :: State, }
spec TextServer.create_shaped_text(direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec TextServer.draw_hex_code_box(canvas :: RID, size :: int, pos :: Vector2, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServer.font_clear_glyphs(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_clear_kerning_map(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_clear_size_cache(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_clear_textures(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_draw_glyph(font_rid :: RID, canvas :: RID, size :: int, pos :: Vector2, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServer.font_draw_glyph_outline(font_rid :: RID, canvas :: RID, size :: int, outline_size :: int, pos :: Vector2, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_antialiasing(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_ascent(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_descent(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_embolden(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_face_count(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_face_index(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_fixed_size(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_generate_mipmaps(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_global_oversampling() :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_advance(font_rid :: RID, size :: int, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_contours(font :: RID, size :: int, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_index(font_rid :: RID, size :: int, char :: int, variation_selector :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_list(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_offset(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_size(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_texture_idx(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_texture_rid(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_texture_size(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_glyph_uv_rect(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_hinting(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_kerning(font_rid :: RID, size :: int, glyph_pair :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_kerning_list(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_language_support_override(font_rid :: RID, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_language_support_overrides(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_msdf_pixel_range(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_msdf_size(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_name(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_opentype_feature_overrides(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_oversampling(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_scale(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_script_support_override(font_rid :: RID, script :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_script_support_overrides(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_size_cache_list(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_stretch(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_style(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_style_name(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_subpixel_positioning(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_supported_chars(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_texture_count(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_texture_image(font_rid :: RID, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_texture_offsets(font_rid :: RID, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_transform(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_underline_position(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_underline_thickness(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_variation_coordinates(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_get_weight(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_has_char(font_rid :: RID, char :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_is_allow_system_fallback(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_is_force_autohinter(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_is_language_supported(font_rid :: RID, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_is_multichannel_signed_distance_field(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_is_script_supported(font_rid :: RID, script :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_remove_glyph(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_remove_kerning(font_rid :: RID, size :: int, glyph_pair :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_remove_language_support_override(font_rid :: RID, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_remove_script_support_override(font_rid :: RID, script :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_remove_size_cache(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServer.font_remove_texture(font_rid :: RID, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_render_glyph(font_rid :: RID, size :: Vector2i, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_render_range(font_rid :: RID, size :: Vector2i, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_allow_system_fallback(font_rid :: RID, allow_system_fallback :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_antialiasing(font_rid :: RID, antialiasing :: enum::TextServer.FontAntialiasing, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_ascent(font_rid :: RID, size :: int, ascent :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_data(font_rid :: RID, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_descent(font_rid :: RID, size :: int, descent :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_embolden(font_rid :: RID, strength :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_face_index(font_rid :: RID, face_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_fixed_size(font_rid :: RID, fixed_size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_force_autohinter(font_rid :: RID, force_autohinter :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_generate_mipmaps(font_rid :: RID, generate_mipmaps :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_global_oversampling(oversampling :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_glyph_advance(font_rid :: RID, size :: int, glyph :: int, advance :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_glyph_offset(font_rid :: RID, size :: Vector2i, glyph :: int, offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_glyph_size(font_rid :: RID, size :: Vector2i, glyph :: int, gl_size :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_glyph_texture_idx(font_rid :: RID, size :: Vector2i, glyph :: int, texture_idx :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_glyph_uv_rect(font_rid :: RID, size :: Vector2i, glyph :: int, uv_rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_hinting(font_rid :: RID, hinting :: enum::TextServer.Hinting, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_kerning(font_rid :: RID, size :: int, glyph_pair :: Vector2i, kerning :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_language_support_override(font_rid :: RID, language :: String, supported :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_msdf_pixel_range(font_rid :: RID, msdf_pixel_range :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_msdf_size(font_rid :: RID, msdf_size :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_multichannel_signed_distance_field(font_rid :: RID, msdf :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_name(font_rid :: RID, name :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_opentype_feature_overrides(font_rid :: RID, overrides :: Dictionary, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_oversampling(font_rid :: RID, oversampling :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_scale(font_rid :: RID, size :: int, scale :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_script_support_override(font_rid :: RID, script :: String, supported :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_stretch(font_rid :: RID, weight :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_style(font_rid :: RID, style :: bitfield::TextServer.FontStyle, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_style_name(font_rid :: RID, name :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_subpixel_positioning(font_rid :: RID, subpixel_positioning :: enum::TextServer.SubpixelPositioning, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_texture_image(font_rid :: RID, size :: Vector2i, texture_index :: int, image :: Image, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_texture_offsets(font_rid :: RID, size :: Vector2i, texture_index :: int, offset :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_transform(font_rid :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_underline_position(font_rid :: RID, size :: int, underline_position :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_underline_thickness(font_rid :: RID, size :: int, underline_thickness :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_variation_coordinates(font_rid :: RID, variation_coordinates :: Dictionary, ) :: {:ok :: label, state :: State, }
spec TextServer.font_set_weight(font_rid :: RID, weight :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.font_supported_feature_list(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.font_supported_variation_list(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.format_number(number :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.get_features() :: {:ok :: label, state :: State, }
spec TextServer.get_hex_code_box_size(size :: int, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.get_name() :: {:ok :: label, state :: State, }
spec TextServer.get_support_data_filename() :: {:ok :: label, state :: State, }
spec TextServer.get_support_data_info() :: {:ok :: label, state :: State, }
spec TextServer.has(rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.has_feature(feature :: enum::TextServer.Feature, ) :: {:ok :: label, state :: State, }
spec TextServer.is_confusable(string :: String, dict :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec TextServer.is_locale_right_to_left(locale :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.is_valid_identifier(string :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.load_support_data(filename :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.name_to_tag(name :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.parse_number(number :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.parse_structured_text(parser_type :: enum::TextServer.StructuredTextParser, args :: Array, text :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.percent_sign(language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.save_support_data(filename :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_get_span_count(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_get_span_meta(shaped :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_set_span_update_font(shaped :: RID, index :: int, fonts :: typedarray::RID, size :: int, opentype_features :: Dictionary, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_add_object(shaped :: RID, key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, length :: int, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_add_string(shaped :: RID, text :: String, fonts :: typedarray::RID, size :: int, opentype_features :: Dictionary, language :: String, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_clear(rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_draw(shaped :: RID, canvas :: RID, pos :: Vector2, clip_l :: float, clip_r :: float, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_draw_outline(shaped :: RID, canvas :: RID, pos :: Vector2, clip_l :: float, clip_r :: float, outline_size :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_fit_to_width(shaped :: RID, width :: float, jst_flags :: bitfield::TextServer.JustificationFlag, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_ascent(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_carets(shaped :: RID, position :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_custom_punctuation(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_descent(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_direction(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_dominant_direction_in_range(shaped :: RID, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_ellipsis_glyph_count(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_ellipsis_glyphs(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_ellipsis_pos(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_glyph_count(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_glyphs(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_grapheme_bounds(shaped :: RID, pos :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_inferred_direction(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_line_breaks(shaped :: RID, width :: float, start :: int, break_flags :: bitfield::TextServer.LineBreakFlag, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_line_breaks_adv(shaped :: RID, width :: PackedFloat32Array, start :: int, once :: bool, break_flags :: bitfield::TextServer.LineBreakFlag, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_object_rect(shaped :: RID, key :: Variant, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_objects(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_orientation(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_parent(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_preserve_control(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_preserve_invalid(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_range(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_selection(shaped :: RID, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_size(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_spacing(shaped :: RID, spacing :: enum::TextServer.SpacingType, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_trim_pos(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_underline_position(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_underline_thickness(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_width(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_get_word_breaks(shaped :: RID, grapheme_flags :: bitfield::TextServer.GraphemeFlag, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_hit_test_grapheme(shaped :: RID, coords :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_hit_test_position(shaped :: RID, coords :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_is_ready(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_next_grapheme_pos(shaped :: RID, pos :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_overrun_trim_to_width(shaped :: RID, width :: float, overrun_trim_flags :: bitfield::TextServer.TextOverrunFlag, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_prev_grapheme_pos(shaped :: RID, pos :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_resize_object(shaped :: RID, key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_bidi_override(shaped :: RID, override :: Array, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_custom_punctuation(shaped :: RID, punct :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_direction(shaped :: RID, direction :: enum::TextServer.Direction, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_orientation(shaped :: RID, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_preserve_control(shaped :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_preserve_invalid(shaped :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_set_spacing(shaped :: RID, spacing :: enum::TextServer.SpacingType, value :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_shape(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_sort_logical(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_substr(shaped :: RID, start :: int, length :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.shaped_text_tab_align(shaped :: RID, tab_stops :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec TextServer.spoof_check(string :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.string_get_word_breaks(string :: String, language :: String, chars_per_line :: int, ) :: {:ok :: label, state :: State, }
spec TextServer.string_to_lower(string :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.string_to_upper(string :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.strip_diacritics(string :: String, ) :: {:ok :: label, state :: State, }
spec TextServer.tag_to_name(tag :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._cleanup() :: {:ok :: label, state :: State, }
spec TextServerExtension._create_font() :: {:ok :: label, state :: State, }
spec TextServerExtension._create_shaped_text(direction :: enum::TextServer.Direction, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._draw_hex_code_box(canvas :: RID, size :: int, pos :: Vector2, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_clear_glyphs(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_clear_kerning_map(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_clear_size_cache(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_clear_textures(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_draw_glyph(font_rid :: RID, canvas :: RID, size :: int, pos :: Vector2, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_draw_glyph_outline(font_rid :: RID, canvas :: RID, size :: int, outline_size :: int, pos :: Vector2, index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_antialiasing(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_ascent(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_descent(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_embolden(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_face_count(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_face_index(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_fixed_size(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_generate_mipmaps(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_global_oversampling() :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_advance(font_rid :: RID, size :: int, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_contours(font_rid :: RID, size :: int, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_index(font_rid :: RID, size :: int, char :: int, variation_selector :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_list(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_offset(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_size(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_texture_idx(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_texture_rid(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_texture_size(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_glyph_uv_rect(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_hinting(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_kerning(font_rid :: RID, size :: int, glyph_pair :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_kerning_list(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_language_support_override(font_rid :: RID, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_language_support_overrides(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_msdf_pixel_range(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_msdf_size(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_name(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_opentype_feature_overrides(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_oversampling(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_scale(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_script_support_override(font_rid :: RID, script :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_script_support_overrides(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_size_cache_list(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_stretch(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_style(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_style_name(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_subpixel_positioning(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_supported_chars(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_texture_count(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_texture_image(font_rid :: RID, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_texture_offsets(font_rid :: RID, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_transform(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_underline_position(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_underline_thickness(font_rid :: RID, size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_variation_coordinates(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_get_weight(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_has_char(font_rid :: RID, char :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_is_allow_system_fallback(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_is_force_autohinter(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_is_language_supported(font_rid :: RID, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_is_multichannel_signed_distance_field(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_is_script_supported(font_rid :: RID, script :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_remove_glyph(font_rid :: RID, size :: Vector2i, glyph :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_remove_kerning(font_rid :: RID, size :: int, glyph_pair :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_remove_language_support_override(font_rid :: RID, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_remove_script_support_override(font_rid :: RID, script :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_remove_size_cache(font_rid :: RID, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_remove_texture(font_rid :: RID, size :: Vector2i, texture_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_render_glyph(font_rid :: RID, size :: Vector2i, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_render_range(font_rid :: RID, size :: Vector2i, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_allow_system_fallback(font_rid :: RID, allow_system_fallback :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_antialiasing(font_rid :: RID, antialiasing :: enum::TextServer.FontAntialiasing, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_ascent(font_rid :: RID, size :: int, ascent :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_data(font_rid :: RID, data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_data_ptr(font_rid :: RID, data_ptr :: const uint8_t*, data_size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_descent(font_rid :: RID, size :: int, descent :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_embolden(font_rid :: RID, strength :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_face_index(font_rid :: RID, face_index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_fixed_size(font_rid :: RID, fixed_size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_force_autohinter(font_rid :: RID, force_autohinter :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_generate_mipmaps(font_rid :: RID, generate_mipmaps :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_global_oversampling(oversampling :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_glyph_advance(font_rid :: RID, size :: int, glyph :: int, advance :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_glyph_offset(font_rid :: RID, size :: Vector2i, glyph :: int, offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_glyph_size(font_rid :: RID, size :: Vector2i, glyph :: int, gl_size :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_glyph_texture_idx(font_rid :: RID, size :: Vector2i, glyph :: int, texture_idx :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_glyph_uv_rect(font_rid :: RID, size :: Vector2i, glyph :: int, uv_rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_hinting(font_rid :: RID, hinting :: enum::TextServer.Hinting, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_kerning(font_rid :: RID, size :: int, glyph_pair :: Vector2i, kerning :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_language_support_override(font_rid :: RID, language :: String, supported :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_msdf_pixel_range(font_rid :: RID, msdf_pixel_range :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_msdf_size(font_rid :: RID, msdf_size :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_multichannel_signed_distance_field(font_rid :: RID, msdf :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_name(font_rid :: RID, name :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_opentype_feature_overrides(font_rid :: RID, overrides :: Dictionary, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_oversampling(font_rid :: RID, oversampling :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_scale(font_rid :: RID, size :: int, scale :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_script_support_override(font_rid :: RID, script :: String, supported :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_stretch(font_rid :: RID, stretch :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_style(font_rid :: RID, style :: bitfield::TextServer.FontStyle, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_style_name(font_rid :: RID, name_style :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_subpixel_positioning(font_rid :: RID, subpixel_positioning :: enum::TextServer.SubpixelPositioning, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_texture_image(font_rid :: RID, size :: Vector2i, texture_index :: int, image :: Image, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_texture_offsets(font_rid :: RID, size :: Vector2i, texture_index :: int, offset :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_transform(font_rid :: RID, transform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_underline_position(font_rid :: RID, size :: int, underline_position :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_underline_thickness(font_rid :: RID, size :: int, underline_thickness :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_variation_coordinates(font_rid :: RID, variation_coordinates :: Dictionary, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_set_weight(font_rid :: RID, weight :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_supported_feature_list(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._font_supported_variation_list(font_rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._format_number(string :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._free_rid(rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._get_features() :: {:ok :: label, state :: State, }
spec TextServerExtension._get_hex_code_box_size(size :: int, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._get_name() :: {:ok :: label, state :: State, }
spec TextServerExtension._get_support_data_filename() :: {:ok :: label, state :: State, }
spec TextServerExtension._get_support_data_info() :: {:ok :: label, state :: State, }
spec TextServerExtension._has(rid :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._has_feature(feature :: enum::TextServer.Feature, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._is_confusable(string :: String, dict :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._is_locale_right_to_left(locale :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._is_valid_identifier(string :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._load_support_data(filename :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._name_to_tag(name :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._parse_number(string :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._parse_structured_text(parser_type :: enum::TextServer.StructuredTextParser, args :: Array, text :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._percent_sign(language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._save_support_data(filename :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_get_span_count(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_get_span_meta(shaped :: RID, index :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_set_span_update_font(shaped :: RID, index :: int, fonts :: typedarray::RID, size :: int, opentype_features :: Dictionary, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_add_object(shaped :: RID, key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, length :: int, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_add_string(shaped :: RID, text :: String, fonts :: typedarray::RID, size :: int, opentype_features :: Dictionary, language :: String, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_clear(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_draw(shaped :: RID, canvas :: RID, pos :: Vector2, clip_l :: float, clip_r :: float, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_draw_outline(shaped :: RID, canvas :: RID, pos :: Vector2, clip_l :: float, clip_r :: float, outline_size :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_fit_to_width(shaped :: RID, width :: float, jst_flags :: bitfield::TextServer.JustificationFlag, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_ascent(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_carets(shaped :: RID, position :: int, caret :: CaretInfo*, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_custom_punctuation(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_descent(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_direction(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_dominant_direction_in_range(shaped :: RID, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_ellipsis_glyph_count(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_ellipsis_glyphs(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_ellipsis_pos(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_glyph_count(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_glyphs(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_grapheme_bounds(shaped :: RID, pos :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_inferred_direction(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_line_breaks(shaped :: RID, width :: float, start :: int, break_flags :: bitfield::TextServer.LineBreakFlag, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_line_breaks_adv(shaped :: RID, width :: PackedFloat32Array, start :: int, once :: bool, break_flags :: bitfield::TextServer.LineBreakFlag, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_object_rect(shaped :: RID, key :: Variant, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_objects(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_orientation(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_parent(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_preserve_control(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_preserve_invalid(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_range(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_selection(shaped :: RID, start :: int, end :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_size(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_spacing(shaped :: RID, spacing :: enum::TextServer.SpacingType, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_trim_pos(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_underline_position(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_underline_thickness(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_width(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_get_word_breaks(shaped :: RID, grapheme_flags :: bitfield::TextServer.GraphemeFlag, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_hit_test_grapheme(shaped :: RID, coord :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_hit_test_position(shaped :: RID, coord :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_is_ready(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_next_grapheme_pos(shaped :: RID, pos :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_overrun_trim_to_width(shaped :: RID, width :: float, trim_flags :: bitfield::TextServer.TextOverrunFlag, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_prev_grapheme_pos(shaped :: RID, pos :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_resize_object(shaped :: RID, key :: Variant, size :: Vector2, inline_align :: enum::InlineAlignment, baseline :: float, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_bidi_override(shaped :: RID, override :: Array, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_custom_punctuation(shaped :: RID, punct :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_direction(shaped :: RID, direction :: enum::TextServer.Direction, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_orientation(shaped :: RID, orientation :: enum::TextServer.Orientation, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_preserve_control(shaped :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_preserve_invalid(shaped :: RID, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_set_spacing(shaped :: RID, spacing :: enum::TextServer.SpacingType, value :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_shape(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_sort_logical(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_substr(shaped :: RID, start :: int, length :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_tab_align(shaped :: RID, tab_stops :: PackedFloat32Array, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_update_breaks(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._shaped_text_update_justification_ops(shaped :: RID, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._spoof_check(string :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._string_get_word_breaks(string :: String, language :: String, chars_per_line :: int, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._string_to_lower(string :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._string_to_upper(string :: String, language :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._strip_diacritics(string :: String, ) :: {:ok :: label, state :: State, }
spec TextServerExtension._tag_to_name(tag :: int, ) :: {:ok :: label, state :: State, }
spec TextServerManager.add_interface(interface :: TextServer, ) :: {:ok :: label, state :: State, }
spec TextServerManager.find_interface(name :: String, ) :: {:ok :: label, state :: State, }
spec TextServerManager.get_interface(idx :: int, ) :: {:ok :: label, state :: State, }
spec TextServerManager.get_interface_count() :: {:ok :: label, state :: State, }
spec TextServerManager.get_interfaces() :: {:ok :: label, state :: State, }
spec TextServerManager.get_primary_interface() :: {:ok :: label, state :: State, }
spec TextServerManager.remove_interface(interface :: TextServer, ) :: {:ok :: label, state :: State, }
spec TextServerManager.set_primary_interface(index :: TextServer, ) :: {:ok :: label, state :: State, }
spec Texture2D._draw(to_canvas_item :: RID, pos :: Vector2, modulate :: Color, transpose :: bool, ) :: {:ok :: label, state :: State, }
spec Texture2D._draw_rect(to_canvas_item :: RID, rect :: Rect2, tile :: bool, modulate :: Color, transpose :: bool, ) :: {:ok :: label, state :: State, }
spec Texture2D._draw_rect_region(to_canvas_item :: RID, rect :: Rect2, src_rect :: Rect2, modulate :: Color, transpose :: bool, clip_uv :: bool, ) :: {:ok :: label, state :: State, }
spec Texture2D._get_height() :: {:ok :: label, state :: State, }
spec Texture2D._get_width() :: {:ok :: label, state :: State, }
spec Texture2D._has_alpha() :: {:ok :: label, state :: State, }
spec Texture2D._is_pixel_opaque(x :: int, y :: int, ) :: {:ok :: label, state :: State, }
spec Texture2D.create_placeholder() :: {:ok :: label, state :: State, }
spec Texture2D.draw(canvas_item :: RID, position :: Vector2, modulate :: Color, transpose :: bool, ) :: {:ok :: label, state :: State, }
spec Texture2D.draw_rect(canvas_item :: RID, rect :: Rect2, tile :: bool, modulate :: Color, transpose :: bool, ) :: {:ok :: label, state :: State, }
spec Texture2D.draw_rect_region(canvas_item :: RID, rect :: Rect2, src_rect :: Rect2, modulate :: Color, transpose :: bool, clip_uv :: bool, ) :: {:ok :: label, state :: State, }
spec Texture2D.get_height() :: {:ok :: label, state :: State, }
spec Texture2D.get_image() :: {:ok :: label, state :: State, }
spec Texture2D.get_size() :: {:ok :: label, state :: State, }
spec Texture2D.get_width() :: {:ok :: label, state :: State, }
spec Texture2D.has_alpha() :: {:ok :: label, state :: State, }
spec Texture2DArray.create_placeholder() :: {:ok :: label, state :: State, }
spec Texture3D._get_data() :: {:ok :: label, state :: State, }
spec Texture3D._get_depth() :: {:ok :: label, state :: State, }
spec Texture3D._get_format() :: {:ok :: label, state :: State, }
spec Texture3D._get_height() :: {:ok :: label, state :: State, }
spec Texture3D._get_width() :: {:ok :: label, state :: State, }
spec Texture3D._has_mipmaps() :: {:ok :: label, state :: State, }
spec Texture3D.create_placeholder() :: {:ok :: label, state :: State, }
spec Texture3D.get_data() :: {:ok :: label, state :: State, }
spec Texture3D.get_depth() :: {:ok :: label, state :: State, }
spec Texture3D.get_format() :: {:ok :: label, state :: State, }
spec Texture3D.get_height() :: {:ok :: label, state :: State, }
spec Texture3D.get_width() :: {:ok :: label, state :: State, }
spec Texture3D.has_mipmaps() :: {:ok :: label, state :: State, }
spec TextureButton.get_click_mask() :: {:ok :: label, state :: State, }
spec TextureButton.get_ignore_texture_size() :: {:ok :: label, state :: State, }
spec TextureButton.get_stretch_mode() :: {:ok :: label, state :: State, }
spec TextureButton.get_texture_disabled() :: {:ok :: label, state :: State, }
spec TextureButton.get_texture_focused() :: {:ok :: label, state :: State, }
spec TextureButton.get_texture_hover() :: {:ok :: label, state :: State, }
spec TextureButton.get_texture_normal() :: {:ok :: label, state :: State, }
spec TextureButton.get_texture_pressed() :: {:ok :: label, state :: State, }
spec TextureButton.is_flipped_h() :: {:ok :: label, state :: State, }
spec TextureButton.is_flipped_v() :: {:ok :: label, state :: State, }
spec TextureButton.set_click_mask(mask :: BitMap, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_flip_h(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_flip_v(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_ignore_texture_size(ignore :: bool, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_stretch_mode(mode :: enum::TextureButton.StretchMode, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_texture_disabled(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_texture_focused(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_texture_hover(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_texture_normal(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureButton.set_texture_pressed(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureLayered._get_format() :: {:ok :: label, state :: State, }
spec TextureLayered._get_height() :: {:ok :: label, state :: State, }
spec TextureLayered._get_layer_data(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TextureLayered._get_layered_type() :: {:ok :: label, state :: State, }
spec TextureLayered._get_layers() :: {:ok :: label, state :: State, }
spec TextureLayered._get_width() :: {:ok :: label, state :: State, }
spec TextureLayered._has_mipmaps() :: {:ok :: label, state :: State, }
spec TextureLayered.get_format() :: {:ok :: label, state :: State, }
spec TextureLayered.get_height() :: {:ok :: label, state :: State, }
spec TextureLayered.get_layer_data(layer :: int, ) :: {:ok :: label, state :: State, }
spec TextureLayered.get_layered_type() :: {:ok :: label, state :: State, }
spec TextureLayered.get_layers() :: {:ok :: label, state :: State, }
spec TextureLayered.get_width() :: {:ok :: label, state :: State, }
spec TextureLayered.has_mipmaps() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_fill_degrees() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_fill_mode() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_nine_patch_stretch() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_over_texture() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_progress_texture() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_radial_center_offset() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_radial_initial_angle() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_stretch_margin(margin :: enum::Side, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_texture_progress_offset() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_tint_over() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_tint_progress() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_tint_under() :: {:ok :: label, state :: State, }
spec TextureProgressBar.get_under_texture() :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_fill_degrees(mode :: float, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_fill_mode(mode :: int, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_nine_patch_stretch(stretch :: bool, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_over_texture(tex :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_progress_texture(tex :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_radial_center_offset(mode :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_radial_initial_angle(mode :: float, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_stretch_margin(margin :: enum::Side, value :: int, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_texture_progress_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_tint_over(tint :: Color, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_tint_progress(tint :: Color, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_tint_under(tint :: Color, ) :: {:ok :: label, state :: State, }
spec TextureProgressBar.set_under_texture(tex :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TextureRect.get_expand_mode() :: {:ok :: label, state :: State, }
spec TextureRect.get_stretch_mode() :: {:ok :: label, state :: State, }
spec TextureRect.get_texture() :: {:ok :: label, state :: State, }
spec TextureRect.is_flipped_h() :: {:ok :: label, state :: State, }
spec TextureRect.is_flipped_v() :: {:ok :: label, state :: State, }
spec TextureRect.set_expand_mode(expand_mode :: enum::TextureRect.ExpandMode, ) :: {:ok :: label, state :: State, }
spec TextureRect.set_flip_h(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextureRect.set_flip_v(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TextureRect.set_stretch_mode(stretch_mode :: enum::TextureRect.StretchMode, ) :: {:ok :: label, state :: State, }
spec TextureRect.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Theme.add_type(theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear() :: {:ok :: label, state :: State, }
spec Theme.clear_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_theme_item(data_type :: enum::Theme.DataType, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.clear_type_variation(theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_color_list(theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_color_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_constant_list(theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_constant_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_default_base_scale() :: {:ok :: label, state :: State, }
spec Theme.get_default_font() :: {:ok :: label, state :: State, }
spec Theme.get_default_font_size() :: {:ok :: label, state :: State, }
spec Theme.get_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_font_list(theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_font_size_list(theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_font_size_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_font_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_icon_list(theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_icon_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_stylebox_list(theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_stylebox_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_theme_item(data_type :: enum::Theme.DataType, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_theme_item_list(data_type :: enum::Theme.DataType, theme_type :: String, ) :: {:ok :: label, state :: State, }
spec Theme.get_theme_item_type_list(data_type :: enum::Theme.DataType, ) :: {:ok :: label, state :: State, }
spec Theme.get_type_list() :: {:ok :: label, state :: State, }
spec Theme.get_type_variation_base(theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.get_type_variation_list(base_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_default_base_scale() :: {:ok :: label, state :: State, }
spec Theme.has_default_font() :: {:ok :: label, state :: State, }
spec Theme.has_default_font_size() :: {:ok :: label, state :: State, }
spec Theme.has_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.has_theme_item(data_type :: enum::Theme.DataType, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.is_type_variation(theme_type :: StringName, base_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.merge_with(other :: Theme, ) :: {:ok :: label, state :: State, }
spec Theme.remove_type(theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_color(old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_constant(old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_font(old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_font_size(old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_icon(old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_stylebox(old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.rename_theme_item(data_type :: enum::Theme.DataType, old_name :: StringName, name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Theme.set_color(name :: StringName, theme_type :: StringName, color :: Color, ) :: {:ok :: label, state :: State, }
spec Theme.set_constant(name :: StringName, theme_type :: StringName, constant :: int, ) :: {:ok :: label, state :: State, }
spec Theme.set_default_base_scale(base_scale :: float, ) :: {:ok :: label, state :: State, }
spec Theme.set_default_font(font :: Font, ) :: {:ok :: label, state :: State, }
spec Theme.set_default_font_size(font_size :: int, ) :: {:ok :: label, state :: State, }
spec Theme.set_font(name :: StringName, theme_type :: StringName, font :: Font, ) :: {:ok :: label, state :: State, }
spec Theme.set_font_size(name :: StringName, theme_type :: StringName, font_size :: int, ) :: {:ok :: label, state :: State, }
spec Theme.set_icon(name :: StringName, theme_type :: StringName, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Theme.set_stylebox(name :: StringName, theme_type :: StringName, texture :: StyleBox, ) :: {:ok :: label, state :: State, }
spec Theme.set_theme_item(data_type :: enum::Theme.DataType, name :: StringName, theme_type :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec Theme.set_type_variation(theme_type :: StringName, base_type :: StringName, ) :: {:ok :: label, state :: State, }
spec ThemeDB.get_default_theme() :: {:ok :: label, state :: State, }
spec ThemeDB.get_fallback_base_scale() :: {:ok :: label, state :: State, }
spec ThemeDB.get_fallback_font() :: {:ok :: label, state :: State, }
spec ThemeDB.get_fallback_font_size() :: {:ok :: label, state :: State, }
spec ThemeDB.get_fallback_icon() :: {:ok :: label, state :: State, }
spec ThemeDB.get_fallback_stylebox() :: {:ok :: label, state :: State, }
spec ThemeDB.get_project_theme() :: {:ok :: label, state :: State, }
spec ThemeDB.set_fallback_base_scale(base_scale :: float, ) :: {:ok :: label, state :: State, }
spec ThemeDB.set_fallback_font(font :: Font, ) :: {:ok :: label, state :: State, }
spec ThemeDB.set_fallback_font_size(font_size :: int, ) :: {:ok :: label, state :: State, }
spec ThemeDB.set_fallback_icon(icon :: Texture2D, ) :: {:ok :: label, state :: State, }
spec ThemeDB.set_fallback_stylebox(stylebox :: StyleBox, ) :: {:ok :: label, state :: State, }
spec Thread.get_id() :: {:ok :: label, state :: State, }
spec Thread.is_alive() :: {:ok :: label, state :: State, }
spec Thread.is_started() :: {:ok :: label, state :: State, }
spec Thread.start(callable :: Callable, priority :: enum::Thread.Priority, ) :: {:ok :: label, state :: State, }
spec Thread.wait_to_finish() :: {:ok :: label, state :: State, }
spec TileData.add_collision_polygon(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_collision_polygon_one_way_margin(layer_id :: int, polygon_index :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_collision_polygon_points(layer_id :: int, polygon_index :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_collision_polygons_count(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_constant_angular_velocity(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_constant_linear_velocity(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_custom_data(layer_name :: String, ) :: {:ok :: label, state :: State, }
spec TileData.get_custom_data_by_layer_id(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_flip_h() :: {:ok :: label, state :: State, }
spec TileData.get_flip_v() :: {:ok :: label, state :: State, }
spec TileData.get_material() :: {:ok :: label, state :: State, }
spec TileData.get_modulate() :: {:ok :: label, state :: State, }
spec TileData.get_navigation_polygon(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_occluder(layer_id :: int, ) :: {:ok :: label, state :: State, }
spec TileData.get_probability() :: {:ok :: label, state :: State, }
spec TileData.get_terrain() :: {:ok :: label, state :: State, }
spec TileData.get_terrain_peering_bit(peering_bit :: enum::TileSet.CellNeighbor, ) :: {:ok :: label, state :: State, }
spec TileData.get_terrain_set() :: {:ok :: label, state :: State, }
spec TileData.get_texture_origin() :: {:ok :: label, state :: State, }
spec TileData.get_transpose() :: {:ok :: label, state :: State, }
spec TileData.get_y_sort_origin() :: {:ok :: label, state :: State, }
spec TileData.get_z_index() :: {:ok :: label, state :: State, }
spec TileData.is_collision_polygon_one_way(layer_id :: int, polygon_index :: int, ) :: {:ok :: label, state :: State, }
spec TileData.remove_collision_polygon(layer_id :: int, polygon_index :: int, ) :: {:ok :: label, state :: State, }
spec TileData.set_collision_polygon_one_way(layer_id :: int, polygon_index :: int, one_way :: bool, ) :: {:ok :: label, state :: State, }
spec TileData.set_collision_polygon_one_way_margin(layer_id :: int, polygon_index :: int, one_way_margin :: float, ) :: {:ok :: label, state :: State, }
spec TileData.set_collision_polygon_points(layer_id :: int, polygon_index :: int, polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec TileData.set_collision_polygons_count(layer_id :: int, polygons_count :: int, ) :: {:ok :: label, state :: State, }
spec TileData.set_constant_angular_velocity(layer_id :: int, velocity :: float, ) :: {:ok :: label, state :: State, }
spec TileData.set_constant_linear_velocity(layer_id :: int, velocity :: Vector2, ) :: {:ok :: label, state :: State, }
spec TileData.set_custom_data(layer_name :: String, value :: Variant, ) :: {:ok :: label, state :: State, }
spec TileData.set_custom_data_by_layer_id(layer_id :: int, value :: Variant, ) :: {:ok :: label, state :: State, }
spec TileData.set_flip_h(flip_h :: bool, ) :: {:ok :: label, state :: State, }
spec TileData.set_flip_v(flip_v :: bool, ) :: {:ok :: label, state :: State, }
spec TileData.set_material(material :: Material, ) :: {:ok :: label, state :: State, }
spec TileData.set_modulate(modulate :: Color, ) :: {:ok :: label, state :: State, }
spec TileData.set_navigation_polygon(layer_id :: int, navigation_polygon :: NavigationPolygon, ) :: {:ok :: label, state :: State, }
spec TileData.set_occluder(layer_id :: int, occluder_polygon :: OccluderPolygon2D, ) :: {:ok :: label, state :: State, }
spec TileData.set_probability(probability :: float, ) :: {:ok :: label, state :: State, }
spec TileData.set_terrain(terrain :: int, ) :: {:ok :: label, state :: State, }
spec TileData.set_terrain_peering_bit(peering_bit :: enum::TileSet.CellNeighbor, terrain :: int, ) :: {:ok :: label, state :: State, }
spec TileData.set_terrain_set(terrain_set :: int, ) :: {:ok :: label, state :: State, }
spec TileData.set_texture_origin(texture_origin :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileData.set_transpose(transpose :: bool, ) :: {:ok :: label, state :: State, }
spec TileData.set_y_sort_origin(y_sort_origin :: int, ) :: {:ok :: label, state :: State, }
spec TileData.set_z_index(z_index :: int, ) :: {:ok :: label, state :: State, }
spec TileMap._tile_data_runtime_update(layer :: int, coords :: Vector2i, tile_data :: TileData, ) :: {:ok :: label, state :: State, }
spec TileMap._use_tile_data_runtime_update(layer :: int, coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMap.add_layer(to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.clear() :: {:ok :: label, state :: State, }
spec TileMap.clear_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.erase_cell(layer :: int, coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMap.fix_invalid_tiles() :: {:ok :: label, state :: State, }
spec TileMap.force_update(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_cell_alternative_tile(layer :: int, coords :: Vector2i, use_proxies :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.get_cell_atlas_coords(layer :: int, coords :: Vector2i, use_proxies :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.get_cell_source_id(layer :: int, coords :: Vector2i, use_proxies :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.get_cell_tile_data(layer :: int, coords :: Vector2i, use_proxies :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.get_collision_visibility_mode() :: {:ok :: label, state :: State, }
spec TileMap.get_coords_for_body_rid(body :: RID, ) :: {:ok :: label, state :: State, }
spec TileMap.get_layer_modulate(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_layer_name(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_layer_y_sort_origin(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_layer_z_index(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_layers_count() :: {:ok :: label, state :: State, }
spec TileMap.get_navigation_map(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_navigation_visibility_mode() :: {:ok :: label, state :: State, }
spec TileMap.get_neighbor_cell(coords :: Vector2i, neighbor :: enum::TileSet.CellNeighbor, ) :: {:ok :: label, state :: State, }
spec TileMap.get_pattern(layer :: int, coords_array :: typedarray::Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMap.get_quadrant_size() :: {:ok :: label, state :: State, }
spec TileMap.get_surrounding_cells(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMap.get_tileset() :: {:ok :: label, state :: State, }
spec TileMap.get_used_cells(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_used_cells_by_id(layer :: int, source_id :: int, atlas_coords :: Vector2i, alternative_tile :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.get_used_rect() :: {:ok :: label, state :: State, }
spec TileMap.is_collision_animatable() :: {:ok :: label, state :: State, }
spec TileMap.is_layer_enabled(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.is_layer_y_sort_enabled(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.local_to_map(local_position :: Vector2, ) :: {:ok :: label, state :: State, }
spec TileMap.map_pattern(position_in_tilemap :: Vector2i, coords_in_pattern :: Vector2i, pattern :: TileMapPattern, ) :: {:ok :: label, state :: State, }
spec TileMap.map_to_local(map_position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMap.move_layer(layer :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.remove_layer(layer :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.set_cell(layer :: int, coords :: Vector2i, source_id :: int, atlas_coords :: Vector2i, alternative_tile :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.set_cells_terrain_connect(layer :: int, cells :: typedarray::Vector2i, terrain_set :: int, terrain :: int, ignore_empty_terrains :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.set_cells_terrain_path(layer :: int, path :: typedarray::Vector2i, terrain_set :: int, terrain :: int, ignore_empty_terrains :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.set_collision_animatable(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.set_collision_visibility_mode(collision_visibility_mode :: enum::TileMap.VisibilityMode, ) :: {:ok :: label, state :: State, }
spec TileMap.set_layer_enabled(layer :: int, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.set_layer_modulate(layer :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec TileMap.set_layer_name(layer :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec TileMap.set_layer_y_sort_enabled(layer :: int, y_sort_enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TileMap.set_layer_y_sort_origin(layer :: int, y_sort_origin :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.set_layer_z_index(layer :: int, z_index :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.set_navigation_map(layer :: int, map :: RID, ) :: {:ok :: label, state :: State, }
spec TileMap.set_navigation_visibility_mode(navigation_visibility_mode :: enum::TileMap.VisibilityMode, ) :: {:ok :: label, state :: State, }
spec TileMap.set_pattern(layer :: int, position :: Vector2i, pattern :: TileMapPattern, ) :: {:ok :: label, state :: State, }
spec TileMap.set_quadrant_size(size :: int, ) :: {:ok :: label, state :: State, }
spec TileMap.set_tileset(tileset :: TileSet, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.get_cell_alternative_tile(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.get_cell_atlas_coords(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.get_cell_source_id(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.get_size() :: {:ok :: label, state :: State, }
spec TileMapPattern.get_used_cells() :: {:ok :: label, state :: State, }
spec TileMapPattern.has_cell(coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.is_empty() :: {:ok :: label, state :: State, }
spec TileMapPattern.remove_cell(coords :: Vector2i, update_size :: bool, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.set_cell(coords :: Vector2i, source_id :: int, atlas_coords :: Vector2i, alternative_tile :: int, ) :: {:ok :: label, state :: State, }
spec TileMapPattern.set_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSet.add_custom_data_layer(to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_navigation_layer(to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_occlusion_layer(to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_pattern(pattern :: TileMapPattern, index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_physics_layer(to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_source(source :: TileSetSource, atlas_source_id_override :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_terrain(terrain_set :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.add_terrain_set(to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.cleanup_invalid_tile_proxies() :: {:ok :: label, state :: State, }
spec TileSet.clear_tile_proxies() :: {:ok :: label, state :: State, }
spec TileSet.get_alternative_level_tile_proxy(source_from :: int, coords_from :: Vector2i, alternative_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_coords_level_tile_proxy(source_from :: int, coords_from :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSet.get_custom_data_layer_by_name(layer_name :: String, ) :: {:ok :: label, state :: State, }
spec TileSet.get_custom_data_layer_name(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_custom_data_layer_type(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_custom_data_layers_count() :: {:ok :: label, state :: State, }
spec TileSet.get_navigation_layer_layer_value(layer_index :: int, layer_number :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_navigation_layer_layers(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_navigation_layers_count() :: {:ok :: label, state :: State, }
spec TileSet.get_next_source_id() :: {:ok :: label, state :: State, }
spec TileSet.get_occlusion_layer_light_mask(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_occlusion_layer_sdf_collision(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_occlusion_layers_count() :: {:ok :: label, state :: State, }
spec TileSet.get_pattern(index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_patterns_count() :: {:ok :: label, state :: State, }
spec TileSet.get_physics_layer_collision_layer(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_physics_layer_collision_mask(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_physics_layer_physics_material(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_physics_layers_count() :: {:ok :: label, state :: State, }
spec TileSet.get_source(source_id :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_source_count() :: {:ok :: label, state :: State, }
spec TileSet.get_source_id(index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_source_level_tile_proxy(source_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_terrain_color(terrain_set :: int, terrain_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_terrain_name(terrain_set :: int, terrain_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_terrain_set_mode(terrain_set :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_terrain_sets_count() :: {:ok :: label, state :: State, }
spec TileSet.get_terrains_count(terrain_set :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.get_tile_layout() :: {:ok :: label, state :: State, }
spec TileSet.get_tile_offset_axis() :: {:ok :: label, state :: State, }
spec TileSet.get_tile_shape() :: {:ok :: label, state :: State, }
spec TileSet.get_tile_size() :: {:ok :: label, state :: State, }
spec TileSet.has_alternative_level_tile_proxy(source_from :: int, coords_from :: Vector2i, alternative_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.has_coords_level_tile_proxy(source_from :: int, coords_from :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSet.has_source(source_id :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.has_source_level_tile_proxy(source_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.is_uv_clipping() :: {:ok :: label, state :: State, }
spec TileSet.map_tile_proxy(source_from :: int, coords_from :: Vector2i, alternative_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.move_custom_data_layer(layer_index :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.move_navigation_layer(layer_index :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.move_occlusion_layer(layer_index :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.move_physics_layer(layer_index :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.move_terrain(terrain_set :: int, terrain_index :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.move_terrain_set(terrain_set :: int, to_position :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_alternative_level_tile_proxy(source_from :: int, coords_from :: Vector2i, alternative_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_coords_level_tile_proxy(source_from :: int, coords_from :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_custom_data_layer(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_navigation_layer(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_occlusion_layer(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_pattern(index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_physics_layer(layer_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_source(source_id :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_source_level_tile_proxy(source_from :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_terrain(terrain_set :: int, terrain_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.remove_terrain_set(terrain_set :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_alternative_level_tile_proxy(source_from :: int, coords_from :: Vector2i, alternative_from :: int, source_to :: int, coords_to :: Vector2i, alternative_to :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_coords_level_tile_proxy(p_source_from :: int, coords_from :: Vector2i, source_to :: int, coords_to :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSet.set_custom_data_layer_name(layer_index :: int, layer_name :: String, ) :: {:ok :: label, state :: State, }
spec TileSet.set_custom_data_layer_type(layer_index :: int, layer_type :: enum::Variant.Type, ) :: {:ok :: label, state :: State, }
spec TileSet.set_navigation_layer_layer_value(layer_index :: int, layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec TileSet.set_navigation_layer_layers(layer_index :: int, layers :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_occlusion_layer_light_mask(layer_index :: int, light_mask :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_occlusion_layer_sdf_collision(layer_index :: int, sdf_collision :: bool, ) :: {:ok :: label, state :: State, }
spec TileSet.set_physics_layer_collision_layer(layer_index :: int, layer :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_physics_layer_collision_mask(layer_index :: int, mask :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_physics_layer_physics_material(layer_index :: int, physics_material :: PhysicsMaterial, ) :: {:ok :: label, state :: State, }
spec TileSet.set_source_id(source_id :: int, new_source_id :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_source_level_tile_proxy(source_from :: int, source_to :: int, ) :: {:ok :: label, state :: State, }
spec TileSet.set_terrain_color(terrain_set :: int, terrain_index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TileSet.set_terrain_name(terrain_set :: int, terrain_index :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec TileSet.set_terrain_set_mode(terrain_set :: int, mode :: enum::TileSet.TerrainMode, ) :: {:ok :: label, state :: State, }
spec TileSet.set_tile_layout(layout :: enum::TileSet.TileLayout, ) :: {:ok :: label, state :: State, }
spec TileSet.set_tile_offset_axis(alignment :: enum::TileSet.TileOffsetAxis, ) :: {:ok :: label, state :: State, }
spec TileSet.set_tile_shape(shape :: enum::TileSet.TileShape, ) :: {:ok :: label, state :: State, }
spec TileSet.set_tile_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSet.set_uv_clipping(uv_clipping :: bool, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.create_alternative_tile(atlas_coords :: Vector2i, alternative_id_override :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.create_tile(atlas_coords :: Vector2i, size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_atlas_grid_size() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_margins() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_next_alternative_tile_id(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_runtime_texture() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_runtime_tile_texture_region(atlas_coords :: Vector2i, frame :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_separation() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_texture() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_texture_region_size() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_animation_columns(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_animation_frame_duration(atlas_coords :: Vector2i, frame_index :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_animation_frames_count(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_animation_separation(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_animation_speed(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_animation_total_duration(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_at_coords(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_data(atlas_coords :: Vector2i, alternative_tile :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_size_in_atlas(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tile_texture_region(atlas_coords :: Vector2i, frame :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_tiles_to_be_removed_on_change(texture :: Texture2D, margins :: Vector2i, separation :: Vector2i, texture_region_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.get_use_texture_padding() :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.has_room_for_tile(atlas_coords :: Vector2i, size :: Vector2i, animation_columns :: int, animation_separation :: Vector2i, frames_count :: int, ignored_tile :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.move_tile_in_atlas(atlas_coords :: Vector2i, new_atlas_coords :: Vector2i, new_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.remove_alternative_tile(atlas_coords :: Vector2i, alternative_tile :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.remove_tile(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_alternative_tile_id(atlas_coords :: Vector2i, alternative_tile :: int, new_id :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_margins(margins :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_separation(separation :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_texture_region_size(texture_region_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_tile_animation_columns(atlas_coords :: Vector2i, frame_columns :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_tile_animation_frame_duration(atlas_coords :: Vector2i, frame_index :: int, duration :: float, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_tile_animation_frames_count(atlas_coords :: Vector2i, frames_count :: int, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_tile_animation_separation(atlas_coords :: Vector2i, separation :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_tile_animation_speed(atlas_coords :: Vector2i, speed :: float, ) :: {:ok :: label, state :: State, }
spec TileSetAtlasSource.set_use_texture_padding(use_texture_padding :: bool, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.create_scene_tile(packed_scene :: PackedScene, id_override :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.get_next_scene_tile_id() :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.get_scene_tile_display_placeholder(id :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.get_scene_tile_id(index :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.get_scene_tile_scene(id :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.get_scene_tiles_count() :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.has_scene_tile_id(id :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.remove_scene_tile(id :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.set_scene_tile_display_placeholder(id :: int, display_placeholder :: bool, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.set_scene_tile_id(id :: int, new_id :: int, ) :: {:ok :: label, state :: State, }
spec TileSetScenesCollectionSource.set_scene_tile_scene(id :: int, packed_scene :: PackedScene, ) :: {:ok :: label, state :: State, }
spec TileSetSource.get_alternative_tile_id(atlas_coords :: Vector2i, index :: int, ) :: {:ok :: label, state :: State, }
spec TileSetSource.get_alternative_tiles_count(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec TileSetSource.get_tile_id(index :: int, ) :: {:ok :: label, state :: State, }
spec TileSetSource.get_tiles_count() :: {:ok :: label, state :: State, }
spec TileSetSource.has_alternative_tile(atlas_coords :: Vector2i, alternative_tile :: int, ) :: {:ok :: label, state :: State, }
spec TileSetSource.has_tile(atlas_coords :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Time.get_date_dict_from_system(utc :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_date_dict_from_unix_time(unix_time_val :: int, ) :: {:ok :: label, state :: State, }
spec Time.get_date_string_from_system(utc :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_date_string_from_unix_time(unix_time_val :: int, ) :: {:ok :: label, state :: State, }
spec Time.get_datetime_dict_from_datetime_string(datetime :: String, weekday :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_datetime_dict_from_system(utc :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_datetime_dict_from_unix_time(unix_time_val :: int, ) :: {:ok :: label, state :: State, }
spec Time.get_datetime_string_from_datetime_dict(datetime :: Dictionary, use_space :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_datetime_string_from_system(utc :: bool, use_space :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_datetime_string_from_unix_time(unix_time_val :: int, use_space :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_offset_string_from_offset_minutes(offset_minutes :: int, ) :: {:ok :: label, state :: State, }
spec Time.get_ticks_msec() :: {:ok :: label, state :: State, }
spec Time.get_ticks_usec() :: {:ok :: label, state :: State, }
spec Time.get_time_dict_from_system(utc :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_time_dict_from_unix_time(unix_time_val :: int, ) :: {:ok :: label, state :: State, }
spec Time.get_time_string_from_system(utc :: bool, ) :: {:ok :: label, state :: State, }
spec Time.get_time_string_from_unix_time(unix_time_val :: int, ) :: {:ok :: label, state :: State, }
spec Time.get_time_zone_from_system() :: {:ok :: label, state :: State, }
spec Time.get_unix_time_from_datetime_dict(datetime :: Dictionary, ) :: {:ok :: label, state :: State, }
spec Time.get_unix_time_from_datetime_string(datetime :: String, ) :: {:ok :: label, state :: State, }
spec Time.get_unix_time_from_system() :: {:ok :: label, state :: State, }
spec Timer.get_time_left() :: {:ok :: label, state :: State, }
spec Timer.get_timer_process_callback() :: {:ok :: label, state :: State, }
spec Timer.get_wait_time() :: {:ok :: label, state :: State, }
spec Timer.has_autostart() :: {:ok :: label, state :: State, }
spec Timer.is_one_shot() :: {:ok :: label, state :: State, }
spec Timer.is_paused() :: {:ok :: label, state :: State, }
spec Timer.is_stopped() :: {:ok :: label, state :: State, }
spec Timer.set_autostart(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Timer.set_one_shot(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Timer.set_paused(paused :: bool, ) :: {:ok :: label, state :: State, }
spec Timer.set_timer_process_callback(callback :: enum::Timer.TimerProcessCallback, ) :: {:ok :: label, state :: State, }
spec Timer.set_wait_time(time_sec :: float, ) :: {:ok :: label, state :: State, }
spec Timer.start(time_sec :: float, ) :: {:ok :: label, state :: State, }
spec Timer.stop() :: {:ok :: label, state :: State, }
spec TorusMesh.get_inner_radius() :: {:ok :: label, state :: State, }
spec TorusMesh.get_outer_radius() :: {:ok :: label, state :: State, }
spec TorusMesh.get_ring_segments() :: {:ok :: label, state :: State, }
spec TorusMesh.get_rings() :: {:ok :: label, state :: State, }
spec TorusMesh.set_inner_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec TorusMesh.set_outer_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec TorusMesh.set_ring_segments(rings :: int, ) :: {:ok :: label, state :: State, }
spec TorusMesh.set_rings(rings :: int, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.get_action() :: {:ok :: label, state :: State, }
spec TouchScreenButton.get_bitmask() :: {:ok :: label, state :: State, }
spec TouchScreenButton.get_shape() :: {:ok :: label, state :: State, }
spec TouchScreenButton.get_texture_normal() :: {:ok :: label, state :: State, }
spec TouchScreenButton.get_texture_pressed() :: {:ok :: label, state :: State, }
spec TouchScreenButton.get_visibility_mode() :: {:ok :: label, state :: State, }
spec TouchScreenButton.is_passby_press_enabled() :: {:ok :: label, state :: State, }
spec TouchScreenButton.is_pressed() :: {:ok :: label, state :: State, }
spec TouchScreenButton.is_shape_centered() :: {:ok :: label, state :: State, }
spec TouchScreenButton.is_shape_visible() :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_action(action :: String, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_bitmask(bitmask :: BitMap, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_passby_press(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_shape(shape :: Shape2D, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_shape_centered(bool :: bool, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_shape_visible(bool :: bool, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_texture_normal(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_texture_pressed(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TouchScreenButton.set_visibility_mode(mode :: enum::TouchScreenButton.VisibilityMode, ) :: {:ok :: label, state :: State, }
spec Transform2D.affine_inverse() :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.basis_xform(v :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Transform2D.basis_xform_inv(v :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Transform2D.get_origin() :: {:ok :: label, state :: State, Vector2}
spec Transform2D.get_rotation() :: {:ok :: label, state :: State, float}
spec Transform2D.get_scale() :: {:ok :: label, state :: State, Vector2}
spec Transform2D.get_skew() :: {:ok :: label, state :: State, float}
spec Transform2D.interpolate_with(xform :: Transform2D, weight :: float, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.inverse() :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.is_equal_approx(xform :: Transform2D, ) :: {:ok :: label, state :: State, bool}
spec Transform2D.is_finite() :: {:ok :: label, state :: State, bool}
spec Transform2D.looking_at(target :: Vector2, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.orthonormalized() :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.rotated(angle :: float, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.rotated_local(angle :: float, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.scaled(scale :: Vector2, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.scaled_local(scale :: Vector2, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.translated(offset :: Vector2, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform2D.translated_local(offset :: Vector2, ) :: {:ok :: label, state :: State, Transform2D}
spec Transform3D.affine_inverse() :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.interpolate_with(xform :: Transform3D, weight :: float, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.inverse() :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.is_equal_approx(xform :: Transform3D, ) :: {:ok :: label, state :: State, bool}
spec Transform3D.is_finite() :: {:ok :: label, state :: State, bool}
spec Transform3D.looking_at(target :: Vector3, up :: Vector3, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.orthonormalized() :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.rotated(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.rotated_local(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.scaled(scale :: Vector3, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.scaled_local(scale :: Vector3, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.translated(offset :: Vector3, ) :: {:ok :: label, state :: State, Transform3D}
spec Transform3D.translated_local(offset :: Vector3, ) :: {:ok :: label, state :: State, Transform3D}
spec Translation._get_message(src_message :: StringName, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation._get_plural_message(src_message :: StringName, src_plural_message :: StringName, n :: int, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation.add_message(src_message :: StringName, xlated_message :: StringName, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation.add_plural_message(src_message :: StringName, xlated_messages :: PackedStringArray, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation.erase_message(src_message :: StringName, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation.get_locale() :: {:ok :: label, state :: State, }
spec Translation.get_message(src_message :: StringName, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation.get_message_count() :: {:ok :: label, state :: State, }
spec Translation.get_message_list() :: {:ok :: label, state :: State, }
spec Translation.get_plural_message(src_message :: StringName, src_plural_message :: StringName, n :: int, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Translation.get_translated_message_list() :: {:ok :: label, state :: State, }
spec Translation.set_locale(locale :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.add_translation(translation :: Translation, ) :: {:ok :: label, state :: State, }
spec TranslationServer.clear() :: {:ok :: label, state :: State, }
spec TranslationServer.compare_locales(locale_a :: String, locale_b :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.get_all_countries() :: {:ok :: label, state :: State, }
spec TranslationServer.get_all_languages() :: {:ok :: label, state :: State, }
spec TranslationServer.get_all_scripts() :: {:ok :: label, state :: State, }
spec TranslationServer.get_country_name(country :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.get_language_name(language :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.get_loaded_locales() :: {:ok :: label, state :: State, }
spec TranslationServer.get_locale() :: {:ok :: label, state :: State, }
spec TranslationServer.get_locale_name(locale :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.get_script_name(script :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.get_tool_locale() :: {:ok :: label, state :: State, }
spec TranslationServer.get_translation_object(locale :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.is_pseudolocalization_enabled() :: {:ok :: label, state :: State, }
spec TranslationServer.pseudolocalize(message :: StringName, ) :: {:ok :: label, state :: State, }
spec TranslationServer.reload_pseudolocalization() :: {:ok :: label, state :: State, }
spec TranslationServer.remove_translation(translation :: Translation, ) :: {:ok :: label, state :: State, }
spec TranslationServer.set_locale(locale :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.set_pseudolocalization_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TranslationServer.standardize_locale(locale :: String, ) :: {:ok :: label, state :: State, }
spec TranslationServer.translate(message :: StringName, context :: StringName, ) :: {:ok :: label, state :: State, }
spec TranslationServer.translate_plural(message :: StringName, plural_message :: StringName, n :: int, context :: StringName, ) :: {:ok :: label, state :: State, }
spec Tree.are_column_titles_visible() :: {:ok :: label, state :: State, }
spec Tree.clear() :: {:ok :: label, state :: State, }
spec Tree.create_item(parent :: TreeItem, index :: int, ) :: {:ok :: label, state :: State, }
spec Tree.deselect_all() :: {:ok :: label, state :: State, }
spec Tree.edit_selected() :: {:ok :: label, state :: State, }
spec Tree.ensure_cursor_is_visible() :: {:ok :: label, state :: State, }
spec Tree.get_allow_reselect() :: {:ok :: label, state :: State, }
spec Tree.get_allow_rmb_select() :: {:ok :: label, state :: State, }
spec Tree.get_button_id_at_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Tree.get_column_at_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Tree.get_column_expand_ratio(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.get_column_title(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.get_column_title_direction(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.get_column_title_language(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.get_column_width(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.get_columns() :: {:ok :: label, state :: State, }
spec Tree.get_custom_popup_rect() :: {:ok :: label, state :: State, }
spec Tree.get_drop_mode_flags() :: {:ok :: label, state :: State, }
spec Tree.get_drop_section_at_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Tree.get_edited() :: {:ok :: label, state :: State, }
spec Tree.get_edited_column() :: {:ok :: label, state :: State, }
spec Tree.get_item_area_rect(item :: TreeItem, column :: int, button_index :: int, ) :: {:ok :: label, state :: State, }
spec Tree.get_item_at_position(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec Tree.get_next_selected(from :: TreeItem, ) :: {:ok :: label, state :: State, }
spec Tree.get_pressed_button() :: {:ok :: label, state :: State, }
spec Tree.get_root() :: {:ok :: label, state :: State, }
spec Tree.get_scroll() :: {:ok :: label, state :: State, }
spec Tree.get_select_mode() :: {:ok :: label, state :: State, }
spec Tree.get_selected() :: {:ok :: label, state :: State, }
spec Tree.get_selected_column() :: {:ok :: label, state :: State, }
spec Tree.is_column_clipping_content(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.is_column_expanding(column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.is_folding_hidden() :: {:ok :: label, state :: State, }
spec Tree.is_h_scroll_enabled() :: {:ok :: label, state :: State, }
spec Tree.is_recursive_folding_enabled() :: {:ok :: label, state :: State, }
spec Tree.is_root_hidden() :: {:ok :: label, state :: State, }
spec Tree.is_v_scroll_enabled() :: {:ok :: label, state :: State, }
spec Tree.scroll_to_item(item :: TreeItem, center_on_item :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_allow_reselect(allow :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_allow_rmb_select(allow :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_clip_content(column :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_custom_minimum_width(column :: int, min_width :: int, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_expand(column :: int, expand :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_expand_ratio(column :: int, ratio :: int, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_title(column :: int, title :: String, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_title_direction(column :: int, direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_title_language(column :: int, language :: String, ) :: {:ok :: label, state :: State, }
spec Tree.set_column_titles_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_columns(amount :: int, ) :: {:ok :: label, state :: State, }
spec Tree.set_drop_mode_flags(flags :: int, ) :: {:ok :: label, state :: State, }
spec Tree.set_enable_recursive_folding(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_h_scroll_enabled(h_scroll :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_hide_folding(hide :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_hide_root(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Tree.set_select_mode(mode :: enum::Tree.SelectMode, ) :: {:ok :: label, state :: State, }
spec Tree.set_selected(item :: TreeItem, column :: int, ) :: {:ok :: label, state :: State, }
spec Tree.set_v_scroll_enabled(h_scroll :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.add_button(column :: int, button :: Texture2D, id :: int, disabled :: bool, tooltip_text :: String, ) :: {:ok :: label, state :: State, }
spec TreeItem.call_recursive(method :: StringName, ) :: {:ok :: label, state :: State, }
spec TreeItem.clear_custom_bg_color(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.clear_custom_color(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.create_child(index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.deselect(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.erase_button(column :: int, button_index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_button(column :: int, button_index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_button_by_id(column :: int, id :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_button_count(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_button_id(column :: int, button_index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_button_tooltip_text(column :: int, button_index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_cell_mode(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_child(index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_child_count() :: {:ok :: label, state :: State, }
spec TreeItem.get_children() :: {:ok :: label, state :: State, }
spec TreeItem.get_custom_bg_color(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_custom_color(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_custom_font(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_custom_font_size(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_custom_minimum_height() :: {:ok :: label, state :: State, }
spec TreeItem.get_expand_right(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_first_child() :: {:ok :: label, state :: State, }
spec TreeItem.get_icon(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_icon_max_width(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_icon_modulate(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_icon_region(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_index() :: {:ok :: label, state :: State, }
spec TreeItem.get_language(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_metadata(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_next() :: {:ok :: label, state :: State, }
spec TreeItem.get_next_visible(wrap :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_parent() :: {:ok :: label, state :: State, }
spec TreeItem.get_prev() :: {:ok :: label, state :: State, }
spec TreeItem.get_prev_visible(wrap :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_range(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_range_config(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_structured_text_bidi_override(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_structured_text_bidi_override_options(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_suffix(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_text(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_text_alignment(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_text_direction(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_tooltip_text(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.get_tree() :: {:ok :: label, state :: State, }
spec TreeItem.is_any_collapsed(only_visible :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_button_disabled(column :: int, button_index :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_checked(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_collapsed() :: {:ok :: label, state :: State, }
spec TreeItem.is_custom_set_as_button(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_editable(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_folding_disabled() :: {:ok :: label, state :: State, }
spec TreeItem.is_indeterminate(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_selectable(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_selected(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.is_visible() :: {:ok :: label, state :: State, }
spec TreeItem.move_after(item :: TreeItem, ) :: {:ok :: label, state :: State, }
spec TreeItem.move_before(item :: TreeItem, ) :: {:ok :: label, state :: State, }
spec TreeItem.propagate_check(column :: int, emit_signal :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.remove_child(child :: TreeItem, ) :: {:ok :: label, state :: State, }
spec TreeItem.select(column :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_button(column :: int, button_index :: int, button :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_button_color(column :: int, button_index :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_button_disabled(column :: int, button_index :: int, disabled :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_cell_mode(column :: int, mode :: enum::TreeItem.TreeCellMode, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_checked(column :: int, checked :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_collapsed(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_collapsed_recursive(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_as_button(column :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_bg_color(column :: int, color :: Color, just_outline :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_color(column :: int, color :: Color, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_draw(column :: int, object :: Object, callback :: StringName, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_font(column :: int, font :: Font, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_font_size(column :: int, font_size :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_custom_minimum_height(height :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_disable_folding(disable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_editable(column :: int, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_expand_right(column :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_icon(column :: int, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_icon_max_width(column :: int, width :: int, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_icon_modulate(column :: int, modulate :: Color, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_icon_region(column :: int, region :: Rect2, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_indeterminate(column :: int, indeterminate :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_language(column :: int, language :: String, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_metadata(column :: int, meta :: Variant, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_range(column :: int, value :: float, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_range_config(column :: int, min :: float, max :: float, step :: float, expr :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_selectable(column :: int, selectable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_structured_text_bidi_override(column :: int, parser :: enum::TextServer.StructuredTextParser, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_structured_text_bidi_override_options(column :: int, args :: Array, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_suffix(column :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_text(column :: int, text :: String, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_text_alignment(column :: int, text_alignment :: enum::HorizontalAlignment, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_text_direction(column :: int, direction :: enum::Control.TextDirection, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_tooltip_text(column :: int, tooltip :: String, ) :: {:ok :: label, state :: State, }
spec TreeItem.set_visible(enable :: bool, ) :: {:ok :: label, state :: State, }
spec TreeItem.uncollapse_tree() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.get_curve() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.get_radial_steps() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.get_radius() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.get_section_length() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.get_section_rings() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.get_sections() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.is_cap_bottom() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.is_cap_top() :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_cap_bottom(cap_bottom :: bool, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_cap_top(cap_top :: bool, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_curve(curve :: Curve, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_radial_steps(radial_steps :: int, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_radius(radius :: float, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_section_length(section_length :: float, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_section_rings(section_rings :: int, ) :: {:ok :: label, state :: State, }
spec TubeTrailMesh.set_sections(sections :: int, ) :: {:ok :: label, state :: State, }
spec Tween.bind_node(node :: Node, ) :: {:ok :: label, state :: State, }
spec Tween.chain() :: {:ok :: label, state :: State, }
spec Tween.custom_step(delta :: float, ) :: {:ok :: label, state :: State, }
spec Tween.get_total_elapsed_time() :: {:ok :: label, state :: State, }
spec Tween.interpolate_value(initial_value :: Variant, delta_value :: Variant, elapsed_time :: float, duration :: float, trans_type :: enum::Tween.TransitionType, ease_type :: enum::Tween.EaseType, ) :: {:ok :: label, state :: State, }
spec Tween.is_running() :: {:ok :: label, state :: State, }
spec Tween.is_valid() :: {:ok :: label, state :: State, }
spec Tween.kill() :: {:ok :: label, state :: State, }
spec Tween.parallel() :: {:ok :: label, state :: State, }
spec Tween.pause() :: {:ok :: label, state :: State, }
spec Tween.play() :: {:ok :: label, state :: State, }
spec Tween.set_ease(ease :: enum::Tween.EaseType, ) :: {:ok :: label, state :: State, }
spec Tween.set_loops(loops :: int, ) :: {:ok :: label, state :: State, }
spec Tween.set_parallel(parallel :: bool, ) :: {:ok :: label, state :: State, }
spec Tween.set_pause_mode(mode :: enum::Tween.TweenPauseMode, ) :: {:ok :: label, state :: State, }
spec Tween.set_process_mode(mode :: enum::Tween.TweenProcessMode, ) :: {:ok :: label, state :: State, }
spec Tween.set_speed_scale(speed :: float, ) :: {:ok :: label, state :: State, }
spec Tween.set_trans(trans :: enum::Tween.TransitionType, ) :: {:ok :: label, state :: State, }
spec Tween.stop() :: {:ok :: label, state :: State, }
spec Tween.tween_callback(callback :: Callable, ) :: {:ok :: label, state :: State, }
spec Tween.tween_interval(time :: float, ) :: {:ok :: label, state :: State, }
spec Tween.tween_method(method :: Callable, from :: Variant, to :: Variant, duration :: float, ) :: {:ok :: label, state :: State, }
spec Tween.tween_property(object :: Object, property :: NodePath, final_val :: Variant, duration :: float, ) :: {:ok :: label, state :: State, }
spec UDPServer.get_local_port() :: {:ok :: label, state :: State, }
spec UDPServer.get_max_pending_connections() :: {:ok :: label, state :: State, }
spec UDPServer.is_connection_available() :: {:ok :: label, state :: State, }
spec UDPServer.is_listening() :: {:ok :: label, state :: State, }
spec UDPServer.listen(port :: int, bind_address :: String, ) :: {:ok :: label, state :: State, }
spec UDPServer.poll() :: {:ok :: label, state :: State, }
spec UDPServer.set_max_pending_connections(max_pending_connections :: int, ) :: {:ok :: label, state :: State, }
spec UDPServer.stop() :: {:ok :: label, state :: State, }
spec UDPServer.take_connection() :: {:ok :: label, state :: State, }
spec UPNP.add_device(device :: UPNPDevice, ) :: {:ok :: label, state :: State, }
spec UPNP.add_port_mapping(port :: int, port_internal :: int, desc :: String, proto :: String, duration :: int, ) :: {:ok :: label, state :: State, }
spec UPNP.clear_devices() :: {:ok :: label, state :: State, }
spec UPNP.delete_port_mapping(port :: int, proto :: String, ) :: {:ok :: label, state :: State, }
spec UPNP.discover(timeout :: int, ttl :: int, device_filter :: String, ) :: {:ok :: label, state :: State, }
spec UPNP.get_device(index :: int, ) :: {:ok :: label, state :: State, }
spec UPNP.get_device_count() :: {:ok :: label, state :: State, }
spec UPNP.get_discover_local_port() :: {:ok :: label, state :: State, }
spec UPNP.get_discover_multicast_if() :: {:ok :: label, state :: State, }
spec UPNP.get_gateway() :: {:ok :: label, state :: State, }
spec UPNP.is_discover_ipv6() :: {:ok :: label, state :: State, }
spec UPNP.query_external_address() :: {:ok :: label, state :: State, }
spec UPNP.remove_device(index :: int, ) :: {:ok :: label, state :: State, }
spec UPNP.set_device(index :: int, device :: UPNPDevice, ) :: {:ok :: label, state :: State, }
spec UPNP.set_discover_ipv6(ipv6 :: bool, ) :: {:ok :: label, state :: State, }
spec UPNP.set_discover_local_port(port :: int, ) :: {:ok :: label, state :: State, }
spec UPNP.set_discover_multicast_if(m_if :: String, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.add_port_mapping(port :: int, port_internal :: int, desc :: String, proto :: String, duration :: int, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.delete_port_mapping(port :: int, proto :: String, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.get_description_url() :: {:ok :: label, state :: State, }
spec UPNPDevice.get_igd_control_url() :: {:ok :: label, state :: State, }
spec UPNPDevice.get_igd_our_addr() :: {:ok :: label, state :: State, }
spec UPNPDevice.get_igd_service_type() :: {:ok :: label, state :: State, }
spec UPNPDevice.get_igd_status() :: {:ok :: label, state :: State, }
spec UPNPDevice.get_service_type() :: {:ok :: label, state :: State, }
spec UPNPDevice.is_valid_gateway() :: {:ok :: label, state :: State, }
spec UPNPDevice.query_external_address() :: {:ok :: label, state :: State, }
spec UPNPDevice.set_description_url(url :: String, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.set_igd_control_url(url :: String, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.set_igd_our_addr(addr :: String, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.set_igd_service_type(type :: String, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.set_igd_status(status :: enum::UPNPDevice.IGDStatus, ) :: {:ok :: label, state :: State, }
spec UPNPDevice.set_service_type(type :: String, ) :: {:ok :: label, state :: State, }
spec UndoRedo.add_do_method(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec UndoRedo.add_do_property(object :: Object, property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec UndoRedo.add_do_reference(object :: Object, ) :: {:ok :: label, state :: State, }
spec UndoRedo.add_undo_method(callable :: Callable, ) :: {:ok :: label, state :: State, }
spec UndoRedo.add_undo_property(object :: Object, property :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec UndoRedo.add_undo_reference(object :: Object, ) :: {:ok :: label, state :: State, }
spec UndoRedo.clear_history(increase_version :: bool, ) :: {:ok :: label, state :: State, }
spec UndoRedo.commit_action(execute :: bool, ) :: {:ok :: label, state :: State, }
spec UndoRedo.create_action(name :: String, merge_mode :: enum::UndoRedo.MergeMode, ) :: {:ok :: label, state :: State, }
spec UndoRedo.end_force_keep_in_merge_ends() :: {:ok :: label, state :: State, }
spec UndoRedo.get_action_name(id :: int, ) :: {:ok :: label, state :: State, }
spec UndoRedo.get_current_action() :: {:ok :: label, state :: State, }
spec UndoRedo.get_current_action_name() :: {:ok :: label, state :: State, }
spec UndoRedo.get_history_count() :: {:ok :: label, state :: State, }
spec UndoRedo.get_version() :: {:ok :: label, state :: State, }
spec UndoRedo.has_redo() :: {:ok :: label, state :: State, }
spec UndoRedo.has_undo() :: {:ok :: label, state :: State, }
spec UndoRedo.is_committing_action() :: {:ok :: label, state :: State, }
spec UndoRedo.redo() :: {:ok :: label, state :: State, }
spec UndoRedo.start_force_keep_in_merge_ends() :: {:ok :: label, state :: State, }
spec UndoRedo.undo() :: {:ok :: label, state :: State, }
spec Vector2.abs() :: {:ok :: label, state :: State, Vector2}
spec Vector2.angle() :: {:ok :: label, state :: State, float}
spec Vector2.angle_to(to :: Vector2, ) :: {:ok :: label, state :: State, float}
spec Vector2.angle_to_point(to :: Vector2, ) :: {:ok :: label, state :: State, float}
spec Vector2.aspect() :: {:ok :: label, state :: State, float}
spec Vector2.bezier_derivative(control_1 :: Vector2, control_2 :: Vector2, end :: Vector2, t :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.bezier_interpolate(control_1 :: Vector2, control_2 :: Vector2, end :: Vector2, t :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.bounce(n :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.ceil() :: {:ok :: label, state :: State, Vector2}
spec Vector2.clamp(min :: Vector2, max :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.cross(with :: Vector2, ) :: {:ok :: label, state :: State, float}
spec Vector2.cubic_interpolate(b :: Vector2, pre_a :: Vector2, post_b :: Vector2, weight :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.cubic_interpolate_in_time(b :: Vector2, pre_a :: Vector2, post_b :: Vector2, weight :: float, b_t :: float, pre_a_t :: float, post_b_t :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.direction_to(to :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.distance_squared_to(to :: Vector2, ) :: {:ok :: label, state :: State, float}
spec Vector2.distance_to(to :: Vector2, ) :: {:ok :: label, state :: State, float}
spec Vector2.dot(with :: Vector2, ) :: {:ok :: label, state :: State, float}
spec Vector2.floor() :: {:ok :: label, state :: State, Vector2}
spec Vector2.from_angle(angle :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.is_equal_approx(to :: Vector2, ) :: {:ok :: label, state :: State, bool}
spec Vector2.is_finite() :: {:ok :: label, state :: State, bool}
spec Vector2.is_normalized() :: {:ok :: label, state :: State, bool}
spec Vector2.is_zero_approx() :: {:ok :: label, state :: State, bool}
spec Vector2.length() :: {:ok :: label, state :: State, float}
spec Vector2.length_squared() :: {:ok :: label, state :: State, float}
spec Vector2.lerp(to :: Vector2, weight :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.limit_length(length :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.max_axis_index() :: {:ok :: label, state :: State, int}
spec Vector2.min_axis_index() :: {:ok :: label, state :: State, int}
spec Vector2.move_toward(to :: Vector2, delta :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.normalized() :: {:ok :: label, state :: State, Vector2}
spec Vector2.orthogonal() :: {:ok :: label, state :: State, Vector2}
spec Vector2.posmod(mod :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.posmodv(modv :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.project(b :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.reflect(n :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.rotated(angle :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.round() :: {:ok :: label, state :: State, Vector2}
spec Vector2.sign() :: {:ok :: label, state :: State, Vector2}
spec Vector2.slerp(to :: Vector2, weight :: float, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.slide(n :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2.snapped(step :: Vector2, ) :: {:ok :: label, state :: State, Vector2}
spec Vector2i.abs() :: {:ok :: label, state :: State, Vector2i}
spec Vector2i.aspect() :: {:ok :: label, state :: State, float}
spec Vector2i.clamp(min :: Vector2i, max :: Vector2i, ) :: {:ok :: label, state :: State, Vector2i}
spec Vector2i.length() :: {:ok :: label, state :: State, float}
spec Vector2i.length_squared() :: {:ok :: label, state :: State, int}
spec Vector2i.max_axis_index() :: {:ok :: label, state :: State, int}
spec Vector2i.min_axis_index() :: {:ok :: label, state :: State, int}
spec Vector2i.sign() :: {:ok :: label, state :: State, Vector2i}
spec Vector2i.snapped(step :: Vector2i, ) :: {:ok :: label, state :: State, Vector2i}
spec Vector3.abs() :: {:ok :: label, state :: State, Vector3}
spec Vector3.angle_to(to :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Vector3.bezier_derivative(control_1 :: Vector3, control_2 :: Vector3, end :: Vector3, t :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.bezier_interpolate(control_1 :: Vector3, control_2 :: Vector3, end :: Vector3, t :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.bounce(n :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.ceil() :: {:ok :: label, state :: State, Vector3}
spec Vector3.clamp(min :: Vector3, max :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.cross(with :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.cubic_interpolate(b :: Vector3, pre_a :: Vector3, post_b :: Vector3, weight :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.cubic_interpolate_in_time(b :: Vector3, pre_a :: Vector3, post_b :: Vector3, weight :: float, b_t :: float, pre_a_t :: float, post_b_t :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.direction_to(to :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.distance_squared_to(to :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Vector3.distance_to(to :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Vector3.dot(with :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Vector3.floor() :: {:ok :: label, state :: State, Vector3}
spec Vector3.inverse() :: {:ok :: label, state :: State, Vector3}
spec Vector3.is_equal_approx(to :: Vector3, ) :: {:ok :: label, state :: State, bool}
spec Vector3.is_finite() :: {:ok :: label, state :: State, bool}
spec Vector3.is_normalized() :: {:ok :: label, state :: State, bool}
spec Vector3.is_zero_approx() :: {:ok :: label, state :: State, bool}
spec Vector3.length() :: {:ok :: label, state :: State, float}
spec Vector3.length_squared() :: {:ok :: label, state :: State, float}
spec Vector3.lerp(to :: Vector3, weight :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.limit_length(length :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.max_axis_index() :: {:ok :: label, state :: State, int}
spec Vector3.min_axis_index() :: {:ok :: label, state :: State, int}
spec Vector3.move_toward(to :: Vector3, delta :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.normalized() :: {:ok :: label, state :: State, Vector3}
spec Vector3.octahedron_decode(uv :: Vector2, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.octahedron_encode() :: {:ok :: label, state :: State, Vector2}
spec Vector3.outer(with :: Vector3, ) :: {:ok :: label, state :: State, Basis}
spec Vector3.posmod(mod :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.posmodv(modv :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.project(b :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.reflect(n :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.rotated(axis :: Vector3, angle :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.round() :: {:ok :: label, state :: State, Vector3}
spec Vector3.sign() :: {:ok :: label, state :: State, Vector3}
spec Vector3.signed_angle_to(to :: Vector3, axis :: Vector3, ) :: {:ok :: label, state :: State, float}
spec Vector3.slerp(to :: Vector3, weight :: float, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.slide(n :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3.snapped(step :: Vector3, ) :: {:ok :: label, state :: State, Vector3}
spec Vector3i.abs() :: {:ok :: label, state :: State, Vector3i}
spec Vector3i.clamp(min :: Vector3i, max :: Vector3i, ) :: {:ok :: label, state :: State, Vector3i}
spec Vector3i.length() :: {:ok :: label, state :: State, float}
spec Vector3i.length_squared() :: {:ok :: label, state :: State, int}
spec Vector3i.max_axis_index() :: {:ok :: label, state :: State, int}
spec Vector3i.min_axis_index() :: {:ok :: label, state :: State, int}
spec Vector3i.sign() :: {:ok :: label, state :: State, Vector3i}
spec Vector3i.snapped(step :: Vector3i, ) :: {:ok :: label, state :: State, Vector3i}
spec Vector4.abs() :: {:ok :: label, state :: State, Vector4}
spec Vector4.ceil() :: {:ok :: label, state :: State, Vector4}
spec Vector4.clamp(min :: Vector4, max :: Vector4, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.cubic_interpolate(b :: Vector4, pre_a :: Vector4, post_b :: Vector4, weight :: float, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.cubic_interpolate_in_time(b :: Vector4, pre_a :: Vector4, post_b :: Vector4, weight :: float, b_t :: float, pre_a_t :: float, post_b_t :: float, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.direction_to(to :: Vector4, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.distance_squared_to(to :: Vector4, ) :: {:ok :: label, state :: State, float}
spec Vector4.distance_to(to :: Vector4, ) :: {:ok :: label, state :: State, float}
spec Vector4.dot(with :: Vector4, ) :: {:ok :: label, state :: State, float}
spec Vector4.floor() :: {:ok :: label, state :: State, Vector4}
spec Vector4.inverse() :: {:ok :: label, state :: State, Vector4}
spec Vector4.is_equal_approx(with :: Vector4, ) :: {:ok :: label, state :: State, bool}
spec Vector4.is_finite() :: {:ok :: label, state :: State, bool}
spec Vector4.is_normalized() :: {:ok :: label, state :: State, bool}
spec Vector4.is_zero_approx() :: {:ok :: label, state :: State, bool}
spec Vector4.length() :: {:ok :: label, state :: State, float}
spec Vector4.length_squared() :: {:ok :: label, state :: State, float}
spec Vector4.lerp(to :: Vector4, weight :: float, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.max_axis_index() :: {:ok :: label, state :: State, int}
spec Vector4.min_axis_index() :: {:ok :: label, state :: State, int}
spec Vector4.normalized() :: {:ok :: label, state :: State, Vector4}
spec Vector4.posmod(mod :: float, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.posmodv(modv :: Vector4, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4.round() :: {:ok :: label, state :: State, Vector4}
spec Vector4.sign() :: {:ok :: label, state :: State, Vector4}
spec Vector4.snapped(step :: Vector4, ) :: {:ok :: label, state :: State, Vector4}
spec Vector4i.abs() :: {:ok :: label, state :: State, Vector4i}
spec Vector4i.clamp(min :: Vector4i, max :: Vector4i, ) :: {:ok :: label, state :: State, Vector4i}
spec Vector4i.length() :: {:ok :: label, state :: State, float}
spec Vector4i.length_squared() :: {:ok :: label, state :: State, int}
spec Vector4i.max_axis_index() :: {:ok :: label, state :: State, int}
spec Vector4i.min_axis_index() :: {:ok :: label, state :: State, int}
spec Vector4i.sign() :: {:ok :: label, state :: State, Vector4i}
spec Vector4i.snapped(step :: Vector4i, ) :: {:ok :: label, state :: State, Vector4i}
spec VehicleBody3D.get_brake() :: {:ok :: label, state :: State, }
spec VehicleBody3D.get_engine_force() :: {:ok :: label, state :: State, }
spec VehicleBody3D.get_steering() :: {:ok :: label, state :: State, }
spec VehicleBody3D.set_brake(brake :: float, ) :: {:ok :: label, state :: State, }
spec VehicleBody3D.set_engine_force(engine_force :: float, ) :: {:ok :: label, state :: State, }
spec VehicleBody3D.set_steering(steering :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_brake() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_contact_body() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_damping_compression() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_damping_relaxation() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_engine_force() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_friction_slip() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_radius() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_roll_influence() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_rpm() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_skidinfo() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_steering() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_suspension_max_force() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_suspension_rest_length() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_suspension_stiffness() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.get_suspension_travel() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.is_in_contact() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.is_used_as_steering() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.is_used_as_traction() :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_brake(brake :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_damping_compression(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_damping_relaxation(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_engine_force(engine_force :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_friction_slip(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_radius(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_roll_influence(roll_influence :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_steering(steering :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_suspension_max_force(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_suspension_rest_length(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_suspension_stiffness(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_suspension_travel(length :: float, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_use_as_steering(enable :: bool, ) :: {:ok :: label, state :: State, }
spec VehicleWheel3D.set_use_as_traction(enable :: bool, ) :: {:ok :: label, state :: State, }
spec VideoStream._instantiate_playback() :: {:ok :: label, state :: State, }
spec VideoStream.get_file() :: {:ok :: label, state :: State, }
spec VideoStream.set_file(file :: String, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._get_channels() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._get_length() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._get_mix_rate() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._get_playback_position() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._get_texture() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._is_paused() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._is_playing() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._play() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._seek(time :: float, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._set_audio_track(idx :: int, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._set_paused(paused :: bool, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._stop() :: {:ok :: label, state :: State, }
spec VideoStreamPlayback._update(delta :: float, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayback.mix_audio(num_frames :: int, buffer :: PackedFloat32Array, offset :: int, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_audio_track() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_buffering_msec() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_bus() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_stream() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_stream_name() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_stream_position() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_video_texture() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_volume() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.get_volume_db() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.has_autoplay() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.has_expand() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.is_paused() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.is_playing() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.play() :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_audio_track(track :: int, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_autoplay(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_buffering_msec(msec :: int, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_bus(bus :: StringName, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_expand(enable :: bool, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_paused(paused :: bool, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_stream(stream :: VideoStream, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_stream_position(position :: float, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_volume(volume :: float, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.set_volume_db(db :: float, ) :: {:ok :: label, state :: State, }
spec VideoStreamPlayer.stop() :: {:ok :: label, state :: State, }
spec Viewport.find_world_2d() :: {:ok :: label, state :: State, }
spec Viewport.find_world_3d() :: {:ok :: label, state :: State, }
spec Viewport.get_camera_2d() :: {:ok :: label, state :: State, }
spec Viewport.get_camera_3d() :: {:ok :: label, state :: State, }
spec Viewport.get_canvas_cull_mask() :: {:ok :: label, state :: State, }
spec Viewport.get_canvas_cull_mask_bit(layer :: int, ) :: {:ok :: label, state :: State, }
spec Viewport.get_canvas_transform() :: {:ok :: label, state :: State, }
spec Viewport.get_debug_draw() :: {:ok :: label, state :: State, }
spec Viewport.get_default_canvas_item_texture_filter() :: {:ok :: label, state :: State, }
spec Viewport.get_default_canvas_item_texture_repeat() :: {:ok :: label, state :: State, }
spec Viewport.get_final_transform() :: {:ok :: label, state :: State, }
spec Viewport.get_fsr_sharpness() :: {:ok :: label, state :: State, }
spec Viewport.get_global_canvas_transform() :: {:ok :: label, state :: State, }
spec Viewport.get_mesh_lod_threshold() :: {:ok :: label, state :: State, }
spec Viewport.get_mouse_position() :: {:ok :: label, state :: State, }
spec Viewport.get_msaa_2d() :: {:ok :: label, state :: State, }
spec Viewport.get_msaa_3d() :: {:ok :: label, state :: State, }
spec Viewport.get_physics_object_picking() :: {:ok :: label, state :: State, }
spec Viewport.get_physics_object_picking_sort() :: {:ok :: label, state :: State, }
spec Viewport.get_positional_shadow_atlas_16_bits() :: {:ok :: label, state :: State, }
spec Viewport.get_positional_shadow_atlas_quadrant_subdiv(quadrant :: int, ) :: {:ok :: label, state :: State, }
spec Viewport.get_positional_shadow_atlas_size() :: {:ok :: label, state :: State, }
spec Viewport.get_render_info(type :: enum::Viewport.RenderInfoType, info :: enum::Viewport.RenderInfo, ) :: {:ok :: label, state :: State, }
spec Viewport.get_scaling_3d_mode() :: {:ok :: label, state :: State, }
spec Viewport.get_scaling_3d_scale() :: {:ok :: label, state :: State, }
spec Viewport.get_screen_space_aa() :: {:ok :: label, state :: State, }
spec Viewport.get_screen_transform() :: {:ok :: label, state :: State, }
spec Viewport.get_sdf_oversize() :: {:ok :: label, state :: State, }
spec Viewport.get_sdf_scale() :: {:ok :: label, state :: State, }
spec Viewport.get_texture() :: {:ok :: label, state :: State, }
spec Viewport.get_texture_mipmap_bias() :: {:ok :: label, state :: State, }
spec Viewport.get_viewport_rid() :: {:ok :: label, state :: State, }
spec Viewport.get_visible_rect() :: {:ok :: label, state :: State, }
spec Viewport.get_vrs_mode() :: {:ok :: label, state :: State, }
spec Viewport.get_vrs_texture() :: {:ok :: label, state :: State, }
spec Viewport.get_world_2d() :: {:ok :: label, state :: State, }
spec Viewport.get_world_3d() :: {:ok :: label, state :: State, }
spec Viewport.gui_get_drag_data() :: {:ok :: label, state :: State, }
spec Viewport.gui_get_focus_owner() :: {:ok :: label, state :: State, }
spec Viewport.gui_is_drag_successful() :: {:ok :: label, state :: State, }
spec Viewport.gui_is_dragging() :: {:ok :: label, state :: State, }
spec Viewport.gui_release_focus() :: {:ok :: label, state :: State, }
spec Viewport.has_transparent_background() :: {:ok :: label, state :: State, }
spec Viewport.is_3d_disabled() :: {:ok :: label, state :: State, }
spec Viewport.is_audio_listener_2d() :: {:ok :: label, state :: State, }
spec Viewport.is_audio_listener_3d() :: {:ok :: label, state :: State, }
spec Viewport.is_embedding_subwindows() :: {:ok :: label, state :: State, }
spec Viewport.is_handling_input_locally() :: {:ok :: label, state :: State, }
spec Viewport.is_input_disabled() :: {:ok :: label, state :: State, }
spec Viewport.is_input_handled() :: {:ok :: label, state :: State, }
spec Viewport.is_snap_2d_transforms_to_pixel_enabled() :: {:ok :: label, state :: State, }
spec Viewport.is_snap_2d_vertices_to_pixel_enabled() :: {:ok :: label, state :: State, }
spec Viewport.is_snap_controls_to_pixels_enabled() :: {:ok :: label, state :: State, }
spec Viewport.is_using_debanding() :: {:ok :: label, state :: State, }
spec Viewport.is_using_occlusion_culling() :: {:ok :: label, state :: State, }
spec Viewport.is_using_own_world_3d() :: {:ok :: label, state :: State, }
spec Viewport.is_using_taa() :: {:ok :: label, state :: State, }
spec Viewport.is_using_xr() :: {:ok :: label, state :: State, }
spec Viewport.push_input(event :: InputEvent, in_local_coords :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.push_text_input(text :: String, ) :: {:ok :: label, state :: State, }
spec Viewport.push_unhandled_input(event :: InputEvent, in_local_coords :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_as_audio_listener_2d(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_as_audio_listener_3d(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_canvas_cull_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec Viewport.set_canvas_cull_mask_bit(layer :: int, enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_canvas_transform(xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Viewport.set_debug_draw(debug_draw :: enum::Viewport.DebugDraw, ) :: {:ok :: label, state :: State, }
spec Viewport.set_default_canvas_item_texture_filter(mode :: enum::Viewport.DefaultCanvasItemTextureFilter, ) :: {:ok :: label, state :: State, }
spec Viewport.set_default_canvas_item_texture_repeat(mode :: enum::Viewport.DefaultCanvasItemTextureRepeat, ) :: {:ok :: label, state :: State, }
spec Viewport.set_disable_3d(disable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_disable_input(disable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_embedding_subwindows(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_fsr_sharpness(fsr_sharpness :: float, ) :: {:ok :: label, state :: State, }
spec Viewport.set_global_canvas_transform(xform :: Transform2D, ) :: {:ok :: label, state :: State, }
spec Viewport.set_handle_input_locally(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_input_as_handled() :: {:ok :: label, state :: State, }
spec Viewport.set_mesh_lod_threshold(pixels :: float, ) :: {:ok :: label, state :: State, }
spec Viewport.set_msaa_2d(msaa :: enum::Viewport.MSAA, ) :: {:ok :: label, state :: State, }
spec Viewport.set_msaa_3d(msaa :: enum::Viewport.MSAA, ) :: {:ok :: label, state :: State, }
spec Viewport.set_physics_object_picking(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_physics_object_picking_sort(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_positional_shadow_atlas_16_bits(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_positional_shadow_atlas_quadrant_subdiv(quadrant :: int, subdiv :: enum::Viewport.PositionalShadowAtlasQuadrantSubdiv, ) :: {:ok :: label, state :: State, }
spec Viewport.set_positional_shadow_atlas_size(size :: int, ) :: {:ok :: label, state :: State, }
spec Viewport.set_scaling_3d_mode(scaling_3d_mode :: enum::Viewport.Scaling3DMode, ) :: {:ok :: label, state :: State, }
spec Viewport.set_scaling_3d_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec Viewport.set_screen_space_aa(screen_space_aa :: enum::Viewport.ScreenSpaceAA, ) :: {:ok :: label, state :: State, }
spec Viewport.set_sdf_oversize(oversize :: enum::Viewport.SDFOversize, ) :: {:ok :: label, state :: State, }
spec Viewport.set_sdf_scale(scale :: enum::Viewport.SDFScale, ) :: {:ok :: label, state :: State, }
spec Viewport.set_snap_2d_transforms_to_pixel(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_snap_2d_vertices_to_pixel(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_snap_controls_to_pixels(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_texture_mipmap_bias(texture_mipmap_bias :: float, ) :: {:ok :: label, state :: State, }
spec Viewport.set_transparent_background(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_use_debanding(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_use_occlusion_culling(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_use_own_world_3d(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_use_taa(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_use_xr(use :: bool, ) :: {:ok :: label, state :: State, }
spec Viewport.set_vrs_mode(mode :: enum::Viewport.VRSMode, ) :: {:ok :: label, state :: State, }
spec Viewport.set_vrs_texture(texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Viewport.set_world_2d(world_2d :: World2D, ) :: {:ok :: label, state :: State, }
spec Viewport.set_world_3d(world_3d :: World3D, ) :: {:ok :: label, state :: State, }
spec Viewport.warp_mouse(position :: Vector2, ) :: {:ok :: label, state :: State, }
spec ViewportTexture.get_viewport_path_in_scene() :: {:ok :: label, state :: State, }
spec ViewportTexture.set_viewport_path_in_scene(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler2D.get_enable_mode() :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler2D.get_enable_node_path() :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler2D.set_enable_mode(mode :: enum::VisibleOnScreenEnabler2D.EnableMode, ) :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler2D.set_enable_node_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler3D.get_enable_mode() :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler3D.get_enable_node_path() :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler3D.set_enable_mode(mode :: enum::VisibleOnScreenEnabler3D.EnableMode, ) :: {:ok :: label, state :: State, }
spec VisibleOnScreenEnabler3D.set_enable_node_path(path :: NodePath, ) :: {:ok :: label, state :: State, }
spec VisibleOnScreenNotifier2D.get_rect() :: {:ok :: label, state :: State, }
spec VisibleOnScreenNotifier2D.is_on_screen() :: {:ok :: label, state :: State, }
spec VisibleOnScreenNotifier2D.set_rect(rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec VisibleOnScreenNotifier3D.is_on_screen() :: {:ok :: label, state :: State, }
spec VisibleOnScreenNotifier3D.set_aabb(rect :: AABB, ) :: {:ok :: label, state :: State, }
spec VisualInstance3D._get_aabb() :: {:ok :: label, state :: State, }
spec VisualInstance3D.get_aabb() :: {:ok :: label, state :: State, }
spec VisualInstance3D.get_base() :: {:ok :: label, state :: State, }
spec VisualInstance3D.get_instance() :: {:ok :: label, state :: State, }
spec VisualInstance3D.get_layer_mask() :: {:ok :: label, state :: State, }
spec VisualInstance3D.get_layer_mask_value(layer_number :: int, ) :: {:ok :: label, state :: State, }
spec VisualInstance3D.get_sorting_offset() :: {:ok :: label, state :: State, }
spec VisualInstance3D.is_sorting_use_aabb_center() :: {:ok :: label, state :: State, }
spec VisualInstance3D.set_base(base :: RID, ) :: {:ok :: label, state :: State, }
spec VisualInstance3D.set_layer_mask(mask :: int, ) :: {:ok :: label, state :: State, }
spec VisualInstance3D.set_layer_mask_value(layer_number :: int, value :: bool, ) :: {:ok :: label, state :: State, }
spec VisualInstance3D.set_sorting_offset(offset :: float, ) :: {:ok :: label, state :: State, }
spec VisualInstance3D.set_sorting_use_aabb_center(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShader.add_node(type :: enum::VisualShader.Type, node :: VisualShaderNode, position :: Vector2, id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.add_varying(name :: String, mode :: enum::VisualShader.VaryingMode, type :: enum::VisualShader.VaryingType, ) :: {:ok :: label, state :: State, }
spec VisualShader.can_connect_nodes(type :: enum::VisualShader.Type, from_node :: int, from_port :: int, to_node :: int, to_port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.connect_nodes(type :: enum::VisualShader.Type, from_node :: int, from_port :: int, to_node :: int, to_port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.connect_nodes_forced(type :: enum::VisualShader.Type, from_node :: int, from_port :: int, to_node :: int, to_port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.disconnect_nodes(type :: enum::VisualShader.Type, from_node :: int, from_port :: int, to_node :: int, to_port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.get_graph_offset() :: {:ok :: label, state :: State, }
spec VisualShader.get_node(type :: enum::VisualShader.Type, id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.get_node_connections(type :: enum::VisualShader.Type, ) :: {:ok :: label, state :: State, }
spec VisualShader.get_node_list(type :: enum::VisualShader.Type, ) :: {:ok :: label, state :: State, }
spec VisualShader.get_node_position(type :: enum::VisualShader.Type, id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.get_valid_node_id(type :: enum::VisualShader.Type, ) :: {:ok :: label, state :: State, }
spec VisualShader.has_varying(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShader.is_node_connection(type :: enum::VisualShader.Type, from_node :: int, from_port :: int, to_node :: int, to_port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.remove_node(type :: enum::VisualShader.Type, id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShader.remove_varying(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShader.replace_node(type :: enum::VisualShader.Type, id :: int, new_class :: StringName, ) :: {:ok :: label, state :: State, }
spec VisualShader.set_graph_offset(offset :: Vector2, ) :: {:ok :: label, state :: State, }
spec VisualShader.set_mode(mode :: enum::Shader.Mode, ) :: {:ok :: label, state :: State, }
spec VisualShader.set_node_position(type :: enum::VisualShader.Type, id :: int, position :: Vector2, ) :: {:ok :: label, state :: State, }
spec VisualShaderNode.clear_default_input_values() :: {:ok :: label, state :: State, }
spec VisualShaderNode.get_default_input_values() :: {:ok :: label, state :: State, }
spec VisualShaderNode.get_input_port_default_value(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNode.get_output_port_for_preview() :: {:ok :: label, state :: State, }
spec VisualShaderNode.remove_input_port_default_value(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNode.set_default_input_values(values :: Array, ) :: {:ok :: label, state :: State, }
spec VisualShaderNode.set_input_port_default_value(port :: int, value :: Variant, prev_value :: Variant, ) :: {:ok :: label, state :: State, }
spec VisualShaderNode.set_output_port_for_preview(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeBillboard.get_billboard_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeBillboard.is_keep_scale_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeBillboard.set_billboard_type(billboard_type :: enum::VisualShaderNodeBillboard.BillboardType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeBillboard.set_keep_scale_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeBooleanConstant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeBooleanConstant.set_constant(constant :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeBooleanParameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeBooleanParameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeBooleanParameter.set_default_value(value :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeBooleanParameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeClamp.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeClamp.set_op_type(op_type :: enum::VisualShaderNodeClamp.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorConstant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorConstant.set_constant(constant :: Color, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorFunc.set_function(func :: enum::VisualShaderNodeColorFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorOp.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorOp.set_operator(op :: enum::VisualShaderNodeColorOp.Operator, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorParameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorParameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorParameter.set_default_value(value :: Color, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeColorParameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeComment.get_description() :: {:ok :: label, state :: State, }
spec VisualShaderNodeComment.get_title() :: {:ok :: label, state :: State, }
spec VisualShaderNodeComment.set_description(description :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeComment.set_title(title :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCompare.get_comparison_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCompare.get_condition() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCompare.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCompare.set_comparison_type(type :: enum::VisualShaderNodeCompare.ComparisonType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCompare.set_condition(condition :: enum::VisualShaderNodeCompare.Condition, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCompare.set_function(func :: enum::VisualShaderNodeCompare.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCubemap.get_cube_map() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCubemap.get_source() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCubemap.get_texture_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCubemap.set_cube_map(value :: Cubemap, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCubemap.set_source(value :: enum::VisualShaderNodeCubemap.Source, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCubemap.set_texture_type(value :: enum::VisualShaderNodeCubemap.TextureType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCurveTexture.get_texture() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCurveTexture.set_texture(texture :: CurveTexture, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCurveXYZTexture.get_texture() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCurveXYZTexture.set_texture(texture :: CurveXYZTexture, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_category() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_code(input_vars :: typedarray::String, output_vars :: typedarray::String, mode :: enum::Shader.Mode, type :: enum::VisualShader.Type, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_description() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_func_code(mode :: enum::Shader.Mode, type :: enum::VisualShader.Type, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_global_code(mode :: enum::Shader.Mode, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_input_port_count() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_input_port_name(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_input_port_type(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_name() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_output_port_count() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_output_port_name(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_output_port_type(port :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._get_return_icon_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._is_available(mode :: enum::Shader.Mode, type :: enum::VisualShader.Type, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeCustom._is_highend() :: {:ok :: label, state :: State, }
spec VisualShaderNodeDerivativeFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeDerivativeFunc.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeDerivativeFunc.get_precision() :: {:ok :: label, state :: State, }
spec VisualShaderNodeDerivativeFunc.set_function(func :: enum::VisualShaderNodeDerivativeFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeDerivativeFunc.set_op_type(type :: enum::VisualShaderNodeDerivativeFunc.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeDerivativeFunc.set_precision(precision :: enum::VisualShaderNodeDerivativeFunc.Precision, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeExpression.get_expression() :: {:ok :: label, state :: State, }
spec VisualShaderNodeExpression.set_expression(expression :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatConstant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatConstant.set_constant(constant :: float, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatFunc.set_function(func :: enum::VisualShaderNodeFloatFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatOp.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatOp.set_operator(op :: enum::VisualShaderNodeFloatOp.Operator, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.get_hint() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.get_max() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.get_min() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.get_step() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.set_default_value(value :: float, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.set_hint(hint :: enum::VisualShaderNodeFloatParameter.Hint, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.set_max(value :: float, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.set_min(value :: float, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeFloatParameter.set_step(value :: float, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.add_input_port(id :: int, type :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.add_output_port(id :: int, type :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.clear_input_ports() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.clear_output_ports() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.get_free_input_port_id() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.get_free_output_port_id() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.get_input_port_count() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.get_inputs() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.get_output_port_count() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.get_outputs() :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.has_input_port(id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.has_output_port(id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.is_valid_port_name(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.remove_input_port(id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.remove_output_port(id :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.set_input_port_name(id :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.set_input_port_type(id :: int, type :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.set_inputs(inputs :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.set_output_port_name(id :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.set_output_port_type(id :: int, type :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeGroupBase.set_outputs(outputs :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeInput.get_input_name() :: {:ok :: label, state :: State, }
spec VisualShaderNodeInput.get_input_real_name() :: {:ok :: label, state :: State, }
spec VisualShaderNodeInput.set_input_name(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntConstant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntConstant.set_constant(constant :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntFunc.set_function(func :: enum::VisualShaderNodeIntFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntOp.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntOp.set_operator(op :: enum::VisualShaderNodeIntOp.Operator, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.get_hint() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.get_max() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.get_min() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.get_step() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.set_default_value(value :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.set_hint(hint :: enum::VisualShaderNodeIntParameter.Hint, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.set_max(value :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.set_min(value :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIntParameter.set_step(value :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeIs.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeIs.set_function(func :: enum::VisualShaderNodeIs.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeMix.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeMix.set_op_type(op_type :: enum::VisualShaderNodeMix.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeMultiplyAdd.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeMultiplyAdd.set_op_type(type :: enum::VisualShaderNodeMultiplyAdd.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParameter.get_parameter_name() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParameter.get_qualifier() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParameter.set_parameter_name(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParameter.set_qualifier(qualifier :: enum::VisualShaderNodeParameter.Qualifier, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParameterRef.get_parameter_name() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParameterRef.set_parameter_name(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleAccelerator.get_mode() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleAccelerator.set_mode(mode :: enum::VisualShaderNodeParticleAccelerator.Mode, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleEmit.get_flags() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleEmit.set_flags(flags :: enum::VisualShaderNodeParticleEmit.EmitFlags, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleEmitter.is_mode_2d() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleEmitter.set_mode_2d(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMeshEmitter.get_mesh() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMeshEmitter.get_surface_index() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMeshEmitter.is_use_all_surfaces() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMeshEmitter.set_mesh(mesh :: Mesh, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMeshEmitter.set_surface_index(surface_index :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMeshEmitter.set_use_all_surfaces(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMultiplyByAxisAngle.is_degrees_mode() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleMultiplyByAxisAngle.set_degrees_mode(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleRandomness.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeParticleRandomness.set_op_type(type :: enum::VisualShaderNodeParticleRandomness.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeResizableBase.get_size() :: {:ok :: label, state :: State, }
spec VisualShaderNodeResizableBase.set_size(size :: Vector2, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeSample3D.get_source() :: {:ok :: label, state :: State, }
spec VisualShaderNodeSample3D.set_source(value :: enum::VisualShaderNodeSample3D.Source, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeSmoothStep.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeSmoothStep.set_op_type(op_type :: enum::VisualShaderNodeSmoothStep.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeStep.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeStep.set_op_type(op_type :: enum::VisualShaderNodeStep.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeSwitch.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeSwitch.set_op_type(type :: enum::VisualShaderNodeSwitch.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture.get_source() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture.get_texture() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture.get_texture_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture.set_source(value :: enum::VisualShaderNodeTexture.Source, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture.set_texture(value :: Texture2D, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture.set_texture_type(value :: enum::VisualShaderNodeTexture.TextureType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture2DArray.get_texture_array() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture2DArray.set_texture_array(value :: Texture2DArray, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture3D.get_texture() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTexture3D.set_texture(value :: Texture3D, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.get_color_default() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.get_texture_filter() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.get_texture_repeat() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.get_texture_source() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.get_texture_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.set_color_default(color :: enum::VisualShaderNodeTextureParameter.ColorDefault, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.set_texture_filter(filter :: enum::VisualShaderNodeTextureParameter.TextureFilter, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.set_texture_repeat(repeat :: enum::VisualShaderNodeTextureParameter.TextureRepeat, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.set_texture_source(source :: enum::VisualShaderNodeTextureParameter.TextureSource, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTextureParameter.set_texture_type(type :: enum::VisualShaderNodeTextureParameter.TextureType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformConstant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformConstant.set_constant(constant :: Transform3D, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformFunc.set_function(func :: enum::VisualShaderNodeTransformFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformOp.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformOp.set_operator(op :: enum::VisualShaderNodeTransformOp.Operator, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformParameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformParameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformParameter.set_default_value(value :: Transform3D, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformParameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformVecMult.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeTransformVecMult.set_operator(op :: enum::VisualShaderNodeTransformVecMult.Operator, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntConstant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntConstant.set_constant(constant :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntFunc.set_function(func :: enum::VisualShaderNodeUIntFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntOp.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntOp.set_operator(op :: enum::VisualShaderNodeUIntOp.Operator, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntParameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntParameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntParameter.set_default_value(value :: int, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeUIntParameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeUVFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeUVFunc.set_function(func :: enum::VisualShaderNodeUVFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVarying.get_varying_name() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVarying.get_varying_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVarying.set_varying_name(name :: String, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVarying.set_varying_type(type :: enum::VisualShader.VaryingType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec2Constant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec2Constant.set_constant(constant :: Vector2, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec2Parameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec2Parameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec2Parameter.set_default_value(value :: Vector2, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec2Parameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec3Constant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec3Constant.set_constant(constant :: Vector3, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec3Parameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec3Parameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec3Parameter.set_default_value(value :: Vector3, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec3Parameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec4Constant.get_constant() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec4Constant.set_constant(constant :: Quaternion, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec4Parameter.get_default_value() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec4Parameter.is_default_value_enabled() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec4Parameter.set_default_value(value :: Vector4, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVec4Parameter.set_default_value_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVectorBase.get_op_type() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVectorBase.set_op_type(type :: enum::VisualShaderNodeVectorBase.OpType, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVectorFunc.get_function() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVectorFunc.set_function(func :: enum::VisualShaderNodeVectorFunc.Function, ) :: {:ok :: label, state :: State, }
spec VisualShaderNodeVectorOp.get_operator() :: {:ok :: label, state :: State, }
spec VisualShaderNodeVectorOp.set_operator(op :: enum::VisualShaderNodeVectorOp.Operator, ) :: {:ok :: label, state :: State, }
spec VoxelGI.bake(from_node :: Node, create_visual_debug :: bool, ) :: {:ok :: label, state :: State, }
spec VoxelGI.debug_bake() :: {:ok :: label, state :: State, }
spec VoxelGI.get_camera_attributes() :: {:ok :: label, state :: State, }
spec VoxelGI.get_probe_data() :: {:ok :: label, state :: State, }
spec VoxelGI.get_size() :: {:ok :: label, state :: State, }
spec VoxelGI.get_subdiv() :: {:ok :: label, state :: State, }
spec VoxelGI.set_camera_attributes(camera_attributes :: CameraAttributes, ) :: {:ok :: label, state :: State, }
spec VoxelGI.set_probe_data(data :: VoxelGIData, ) :: {:ok :: label, state :: State, }
spec VoxelGI.set_size(size :: Vector3, ) :: {:ok :: label, state :: State, }
spec VoxelGI.set_subdiv(subdiv :: enum::VoxelGI.Subdiv, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.allocate(to_cell_xform :: Transform3D, aabb :: AABB, octree_size :: Vector3, octree_cells :: PackedByteArray, data_cells :: PackedByteArray, distance_field :: PackedByteArray, level_counts :: PackedInt32Array, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.get_bias() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_bounds() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_data_cells() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_dynamic_range() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_energy() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_level_counts() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_normal_bias() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_octree_cells() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_octree_size() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_propagation() :: {:ok :: label, state :: State, }
spec VoxelGIData.get_to_cell_xform() :: {:ok :: label, state :: State, }
spec VoxelGIData.is_interior() :: {:ok :: label, state :: State, }
spec VoxelGIData.is_using_two_bounces() :: {:ok :: label, state :: State, }
spec VoxelGIData.set_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.set_dynamic_range(dynamic_range :: float, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.set_energy(energy :: float, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.set_interior(interior :: bool, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.set_normal_bias(bias :: float, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.set_propagation(propagation :: float, ) :: {:ok :: label, state :: State, }
spec VoxelGIData.set_use_two_bounces(enable :: bool, ) :: {:ok :: label, state :: State, }
spec WaterArea3D.get_density() :: {:ok :: label, state :: State, }
spec WaterArea3D.get_flow_direction() :: {:ok :: label, state :: State, }
spec WaterArea3D.get_viscosity() :: {:ok :: label, state :: State, }
spec WaterArea3D.get_water_height() :: {:ok :: label, state :: State, }
spec WaterArea3D.set_density(density :: float, ) :: {:ok :: label, state :: State, }
spec WaterArea3D.set_flow_direction(flow_direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec WaterArea3D.set_viscosity(viscosity :: float, ) :: {:ok :: label, state :: State, }
spec WaterArea3D.set_water_height(water_height :: float, ) :: {:ok :: label, state :: State, }
spec WatercraftBallast.get_mass() :: {:ok :: label, state :: State, }
spec WatercraftBallast.get_origin() :: {:ok :: label, state :: State, }
spec WatercraftBallast.set_mass(mass :: float, ) :: {:ok :: label, state :: State, }
spec WatercraftBallast.set_origin(origin :: Vector3, ) :: {:ok :: label, state :: State, }
spec WatercraftPropulsion.get_direction() :: {:ok :: label, state :: State, }
spec WatercraftPropulsion.get_origin() :: {:ok :: label, state :: State, }
spec WatercraftPropulsion.get_value() :: {:ok :: label, state :: State, }
spec WatercraftPropulsion.set_direction(direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec WatercraftPropulsion.set_origin(origin :: Vector3, ) :: {:ok :: label, state :: State, }
spec WatercraftPropulsion.set_value(value :: float, ) :: {:ok :: label, state :: State, }
spec WatercraftRudder.get_depth() :: {:ok :: label, state :: State, }
spec WatercraftRudder.get_direction() :: {:ok :: label, state :: State, }
spec WatercraftRudder.get_length() :: {:ok :: label, state :: State, }
spec WatercraftRudder.get_origin() :: {:ok :: label, state :: State, }
spec WatercraftRudder.set_depth(length :: float, ) :: {:ok :: label, state :: State, }
spec WatercraftRudder.set_direction(direction :: Vector3, ) :: {:ok :: label, state :: State, }
spec WatercraftRudder.set_length(length :: float, ) :: {:ok :: label, state :: State, }
spec WatercraftRudder.set_origin(origin :: Vector3, ) :: {:ok :: label, state :: State, }
spec WeakRef.get_ref() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.close() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_buffered_amount() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_id() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_label() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_max_packet_life_time() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_max_retransmits() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_protocol() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_ready_state() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.get_write_mode() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.is_negotiated() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.is_ordered() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.poll() :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.set_write_mode(write_mode :: enum::WebRTCDataChannel.WriteMode, ) :: {:ok :: label, state :: State, }
spec WebRTCDataChannel.was_string_packet() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._close() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_available_packet_count() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_buffered_amount() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_id() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_label() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_max_packet_life_time() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_max_packet_size() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_max_retransmits() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_packet(r_buffer :: const uint8_t **, r_buffer_size :: int32_t*, ) :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_protocol() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_ready_state() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._get_write_mode() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._is_negotiated() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._is_ordered() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._poll() :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._put_packet(p_buffer :: const uint8_t*, p_buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._set_write_mode(p_write_mode :: enum::WebRTCDataChannel.WriteMode, ) :: {:ok :: label, state :: State, }
spec WebRTCDataChannelExtension._was_string_packet() :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.add_peer(peer :: WebRTCPeerConnection, peer_id :: int, unreliable_lifetime :: int, ) :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.create_client(peer_id :: int, channels_config :: Array, ) :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.create_mesh(peer_id :: int, channels_config :: Array, ) :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.create_server(channels_config :: Array, ) :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.get_peer(peer_id :: int, ) :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.get_peers() :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.has_peer(peer_id :: int, ) :: {:ok :: label, state :: State, }
spec WebRTCMultiplayerPeer.remove_peer(peer_id :: int, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.add_ice_candidate(media :: String, index :: int, name :: String, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.close() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.create_data_channel(label :: String, options :: Dictionary, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.create_offer() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.get_connection_state() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.get_gathering_state() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.get_signaling_state() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.initialize(configuration :: Dictionary, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.poll() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.set_default_extension(extension_class :: StringName, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.set_local_description(type :: String, sdp :: String, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnection.set_remote_description(type :: String, sdp :: String, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._add_ice_candidate(p_sdp_mid_name :: String, p_sdp_mline_index :: int, p_sdp_name :: String, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._close() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._create_data_channel(p_label :: String, p_config :: Dictionary, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._create_offer() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._get_connection_state() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._get_gathering_state() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._get_signaling_state() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._initialize(p_config :: Dictionary, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._poll() :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._set_local_description(p_type :: String, p_sdp :: String, ) :: {:ok :: label, state :: State, }
spec WebRTCPeerConnectionExtension._set_remote_description(p_type :: String, p_sdp :: String, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.create_client(url :: String, tls_client_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.create_server(port :: int, bind_address :: String, tls_server_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_handshake_headers() :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_handshake_timeout() :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_inbound_buffer_size() :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_max_queued_packets() :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_outbound_buffer_size() :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_peer(peer_id :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_peer_address(id :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_peer_port(id :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.get_supported_protocols() :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.set_handshake_headers(protocols :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.set_handshake_timeout(timeout :: float, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.set_inbound_buffer_size(buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.set_max_queued_packets(max_queued_packets :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.set_outbound_buffer_size(buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketMultiplayerPeer.set_supported_protocols(protocols :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.accept_stream(stream :: StreamPeer, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.close(code :: int, reason :: String, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.connect_to_url(url :: String, tls_client_options :: TLSOptions, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_close_code() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_close_reason() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_connected_host() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_connected_port() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_current_outbound_buffered_amount() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_handshake_headers() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_inbound_buffer_size() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_max_queued_packets() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_outbound_buffer_size() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_ready_state() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_requested_url() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_selected_protocol() :: {:ok :: label, state :: State, }
spec WebSocketPeer.get_supported_protocols() :: {:ok :: label, state :: State, }
spec WebSocketPeer.poll() :: {:ok :: label, state :: State, }
spec WebSocketPeer.send(message :: PackedByteArray, write_mode :: enum::WebSocketPeer.WriteMode, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.send_text(message :: String, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.set_handshake_headers(protocols :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.set_inbound_buffer_size(buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.set_max_queued_packets(buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.set_no_delay(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.set_outbound_buffer_size(buffer_size :: int, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.set_supported_protocols(protocols :: PackedStringArray, ) :: {:ok :: label, state :: State, }
spec WebSocketPeer.was_string_packet() :: {:ok :: label, state :: State, }
spec WebXRInterface.get_input_source_target_ray_mode(input_source_id :: int, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.get_input_source_tracker(input_source_id :: int, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.get_optional_features() :: {:ok :: label, state :: State, }
spec WebXRInterface.get_reference_space_type() :: {:ok :: label, state :: State, }
spec WebXRInterface.get_requested_reference_space_types() :: {:ok :: label, state :: State, }
spec WebXRInterface.get_required_features() :: {:ok :: label, state :: State, }
spec WebXRInterface.get_session_mode() :: {:ok :: label, state :: State, }
spec WebXRInterface.get_visibility_state() :: {:ok :: label, state :: State, }
spec WebXRInterface.is_input_source_active(input_source_id :: int, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.is_session_supported(session_mode :: String, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.set_optional_features(optional_features :: String, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.set_requested_reference_space_types(requested_reference_space_types :: String, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.set_required_features(required_features :: String, ) :: {:ok :: label, state :: State, }
spec WebXRInterface.set_session_mode(session_mode :: String, ) :: {:ok :: label, state :: State, }
spec Window.add_theme_color_override(name :: StringName, color :: Color, ) :: {:ok :: label, state :: State, }
spec Window.add_theme_constant_override(name :: StringName, constant :: int, ) :: {:ok :: label, state :: State, }
spec Window.add_theme_font_override(name :: StringName, font :: Font, ) :: {:ok :: label, state :: State, }
spec Window.add_theme_font_size_override(name :: StringName, font_size :: int, ) :: {:ok :: label, state :: State, }
spec Window.add_theme_icon_override(name :: StringName, texture :: Texture2D, ) :: {:ok :: label, state :: State, }
spec Window.add_theme_stylebox_override(name :: StringName, stylebox :: StyleBox, ) :: {:ok :: label, state :: State, }
spec Window.begin_bulk_theme_override() :: {:ok :: label, state :: State, }
spec Window.can_draw() :: {:ok :: label, state :: State, }
spec Window.child_controls_changed() :: {:ok :: label, state :: State, }
spec Window.end_bulk_theme_override() :: {:ok :: label, state :: State, }
spec Window.get_content_scale_aspect() :: {:ok :: label, state :: State, }
spec Window.get_content_scale_factor() :: {:ok :: label, state :: State, }
spec Window.get_content_scale_mode() :: {:ok :: label, state :: State, }
spec Window.get_content_scale_size() :: {:ok :: label, state :: State, }
spec Window.get_contents_minimum_size() :: {:ok :: label, state :: State, }
spec Window.get_current_screen() :: {:ok :: label, state :: State, }
spec Window.get_flag(flag :: enum::Window.Flags, ) :: {:ok :: label, state :: State, }
spec Window.get_initial_position() :: {:ok :: label, state :: State, }
spec Window.get_layout_direction() :: {:ok :: label, state :: State, }
spec Window.get_max_size() :: {:ok :: label, state :: State, }
spec Window.get_min_size() :: {:ok :: label, state :: State, }
spec Window.get_mode() :: {:ok :: label, state :: State, }
spec Window.get_mouse_passthrough_polygon() :: {:ok :: label, state :: State, }
spec Window.get_position() :: {:ok :: label, state :: State, }
spec Window.get_position_with_decorations() :: {:ok :: label, state :: State, }
spec Window.get_size() :: {:ok :: label, state :: State, }
spec Window.get_size_with_decorations() :: {:ok :: label, state :: State, }
spec Window.get_theme() :: {:ok :: label, state :: State, }
spec Window.get_theme_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.get_theme_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.get_theme_default_base_scale() :: {:ok :: label, state :: State, }
spec Window.get_theme_default_font() :: {:ok :: label, state :: State, }
spec Window.get_theme_default_font_size() :: {:ok :: label, state :: State, }
spec Window.get_theme_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.get_theme_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.get_theme_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.get_theme_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.get_theme_type_variation() :: {:ok :: label, state :: State, }
spec Window.get_title() :: {:ok :: label, state :: State, }
spec Window.grab_focus() :: {:ok :: label, state :: State, }
spec Window.has_focus() :: {:ok :: label, state :: State, }
spec Window.has_theme_color(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_color_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_constant(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_constant_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_font(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_font_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_font_size(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_font_size_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_icon(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_icon_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_stylebox(name :: StringName, theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.has_theme_stylebox_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.hide() :: {:ok :: label, state :: State, }
spec Window.is_auto_translating() :: {:ok :: label, state :: State, }
spec Window.is_embedded() :: {:ok :: label, state :: State, }
spec Window.is_exclusive() :: {:ok :: label, state :: State, }
spec Window.is_layout_rtl() :: {:ok :: label, state :: State, }
spec Window.is_maximize_allowed() :: {:ok :: label, state :: State, }
spec Window.is_transient() :: {:ok :: label, state :: State, }
spec Window.is_using_font_oversampling() :: {:ok :: label, state :: State, }
spec Window.is_visible() :: {:ok :: label, state :: State, }
spec Window.is_wrapping_controls() :: {:ok :: label, state :: State, }
spec Window.move_to_foreground() :: {:ok :: label, state :: State, }
spec Window.popup(rect :: Rect2i, ) :: {:ok :: label, state :: State, }
spec Window.popup_centered(minsize :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.popup_centered_clamped(minsize :: Vector2i, fallback_ratio :: float, ) :: {:ok :: label, state :: State, }
spec Window.popup_centered_ratio(ratio :: float, ) :: {:ok :: label, state :: State, }
spec Window.popup_on_parent(parent_rect :: Rect2i, ) :: {:ok :: label, state :: State, }
spec Window.remove_theme_color_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.remove_theme_constant_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.remove_theme_font_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.remove_theme_font_size_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.remove_theme_icon_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.remove_theme_stylebox_override(name :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.request_attention() :: {:ok :: label, state :: State, }
spec Window.reset_size() :: {:ok :: label, state :: State, }
spec Window.set_auto_translate(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_content_scale_aspect(aspect :: enum::Window.ContentScaleAspect, ) :: {:ok :: label, state :: State, }
spec Window.set_content_scale_factor(factor :: float, ) :: {:ok :: label, state :: State, }
spec Window.set_content_scale_mode(mode :: enum::Window.ContentScaleMode, ) :: {:ok :: label, state :: State, }
spec Window.set_content_scale_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.set_current_screen(index :: int, ) :: {:ok :: label, state :: State, }
spec Window.set_exclusive(exclusive :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_flag(flag :: enum::Window.Flags, enabled :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_ime_active(active :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_ime_position(position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.set_initial_position(initial_position :: enum::Window.WindowInitialPosition, ) :: {:ok :: label, state :: State, }
spec Window.set_layout_direction(direction :: enum::Window.LayoutDirection, ) :: {:ok :: label, state :: State, }
spec Window.set_max_size(max_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.set_min_size(min_size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.set_mode(mode :: enum::Window.Mode, ) :: {:ok :: label, state :: State, }
spec Window.set_mouse_passthrough_polygon(polygon :: PackedVector2Array, ) :: {:ok :: label, state :: State, }
spec Window.set_position(position :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.set_size(size :: Vector2i, ) :: {:ok :: label, state :: State, }
spec Window.set_theme(theme :: Theme, ) :: {:ok :: label, state :: State, }
spec Window.set_theme_type_variation(theme_type :: StringName, ) :: {:ok :: label, state :: State, }
spec Window.set_title(title :: String, ) :: {:ok :: label, state :: State, }
spec Window.set_transient(transient :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_use_font_oversampling(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_visible(visible :: bool, ) :: {:ok :: label, state :: State, }
spec Window.set_wrap_controls(enable :: bool, ) :: {:ok :: label, state :: State, }
spec Window.show() :: {:ok :: label, state :: State, }
spec WorkerThreadPool.add_group_task(action :: Callable, elements :: int, tasks_needed :: int, high_priority :: bool, description :: String, ) :: {:ok :: label, state :: State, }
spec WorkerThreadPool.add_task(action :: Callable, high_priority :: bool, description :: String, ) :: {:ok :: label, state :: State, }
spec WorkerThreadPool.get_group_processed_element_count(group_id :: int, ) :: {:ok :: label, state :: State, }
spec WorkerThreadPool.is_group_task_completed(group_id :: int, ) :: {:ok :: label, state :: State, }
spec WorkerThreadPool.is_task_completed(task_id :: int, ) :: {:ok :: label, state :: State, }
spec WorkerThreadPool.wait_for_group_task_completion(group_id :: int, ) :: {:ok :: label, state :: State, }
spec WorkerThreadPool.wait_for_task_completion(task_id :: int, ) :: {:ok :: label, state :: State, }
spec World2D.get_canvas() :: {:ok :: label, state :: State, }
spec World2D.get_direct_space_state() :: {:ok :: label, state :: State, }
spec World2D.get_navigation_map() :: {:ok :: label, state :: State, }
spec World2D.get_space() :: {:ok :: label, state :: State, }
spec World3D.get_camera_attributes() :: {:ok :: label, state :: State, }
spec World3D.get_direct_space_state() :: {:ok :: label, state :: State, }
spec World3D.get_environment() :: {:ok :: label, state :: State, }
spec World3D.get_fallback_environment() :: {:ok :: label, state :: State, }
spec World3D.get_navigation_map() :: {:ok :: label, state :: State, }
spec World3D.get_scenario() :: {:ok :: label, state :: State, }
spec World3D.get_space() :: {:ok :: label, state :: State, }
spec World3D.set_camera_attributes(attributes :: CameraAttributes, ) :: {:ok :: label, state :: State, }
spec World3D.set_environment(env :: Environment, ) :: {:ok :: label, state :: State, }
spec World3D.set_fallback_environment(env :: Environment, ) :: {:ok :: label, state :: State, }
spec WorldBoundaryShape2D.get_distance() :: {:ok :: label, state :: State, }
spec WorldBoundaryShape2D.get_normal() :: {:ok :: label, state :: State, }
spec WorldBoundaryShape2D.set_distance(distance :: float, ) :: {:ok :: label, state :: State, }
spec WorldBoundaryShape2D.set_normal(normal :: Vector2, ) :: {:ok :: label, state :: State, }
spec WorldBoundaryShape3D.get_plane() :: {:ok :: label, state :: State, }
spec WorldBoundaryShape3D.set_plane(plane :: Plane, ) :: {:ok :: label, state :: State, }
spec WorldEnvironment.get_camera_attributes() :: {:ok :: label, state :: State, }
spec WorldEnvironment.get_environment() :: {:ok :: label, state :: State, }
spec WorldEnvironment.set_camera_attributes(camera_attributes :: CameraAttributes, ) :: {:ok :: label, state :: State, }
spec WorldEnvironment.set_environment(env :: Environment, ) :: {:ok :: label, state :: State, }
spec X509Certificate.load(path :: String, ) :: {:ok :: label, state :: State, }
spec X509Certificate.save(path :: String, ) :: {:ok :: label, state :: State, }
spec XMLParser.get_attribute_count() :: {:ok :: label, state :: State, }
spec XMLParser.get_attribute_name(idx :: int, ) :: {:ok :: label, state :: State, }
spec XMLParser.get_attribute_value(idx :: int, ) :: {:ok :: label, state :: State, }
spec XMLParser.get_current_line() :: {:ok :: label, state :: State, }
spec XMLParser.get_named_attribute_value(name :: String, ) :: {:ok :: label, state :: State, }
spec XMLParser.get_named_attribute_value_safe(name :: String, ) :: {:ok :: label, state :: State, }
spec XMLParser.get_node_data() :: {:ok :: label, state :: State, }
spec XMLParser.get_node_name() :: {:ok :: label, state :: State, }
spec XMLParser.get_node_offset() :: {:ok :: label, state :: State, }
spec XMLParser.get_node_type() :: {:ok :: label, state :: State, }
spec XMLParser.has_attribute(name :: String, ) :: {:ok :: label, state :: State, }
spec XMLParser.is_empty() :: {:ok :: label, state :: State, }
spec XMLParser.open(file :: String, ) :: {:ok :: label, state :: State, }
spec XMLParser.open_buffer(buffer :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec XMLParser.read() :: {:ok :: label, state :: State, }
spec XMLParser.seek(position :: int, ) :: {:ok :: label, state :: State, }
spec XMLParser.skip_section() :: {:ok :: label, state :: State, }
spec XRAnchor3D.get_plane() :: {:ok :: label, state :: State, }
spec XRAnchor3D.get_size() :: {:ok :: label, state :: State, }
spec XRController3D.get_float(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRController3D.get_input(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRController3D.get_tracker_hand() :: {:ok :: label, state :: State, }
spec XRController3D.get_vector2(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRController3D.is_button_pressed(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRInterface.get_anchor_detection_is_enabled() :: {:ok :: label, state :: State, }
spec XRInterface.get_camera_feed_id() :: {:ok :: label, state :: State, }
spec XRInterface.get_capabilities() :: {:ok :: label, state :: State, }
spec XRInterface.get_name() :: {:ok :: label, state :: State, }
spec XRInterface.get_play_area() :: {:ok :: label, state :: State, }
spec XRInterface.get_play_area_mode() :: {:ok :: label, state :: State, }
spec XRInterface.get_projection_for_view(view :: int, aspect :: float, near :: float, far :: float, ) :: {:ok :: label, state :: State, }
spec XRInterface.get_render_target_size() :: {:ok :: label, state :: State, }
spec XRInterface.get_supported_environment_blend_modes() :: {:ok :: label, state :: State, }
spec XRInterface.get_tracking_status() :: {:ok :: label, state :: State, }
spec XRInterface.get_transform_for_view(view :: int, cam_transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec XRInterface.get_view_count() :: {:ok :: label, state :: State, }
spec XRInterface.initialize() :: {:ok :: label, state :: State, }
spec XRInterface.is_initialized() :: {:ok :: label, state :: State, }
spec XRInterface.is_passthrough_enabled() :: {:ok :: label, state :: State, }
spec XRInterface.is_passthrough_supported() :: {:ok :: label, state :: State, }
spec XRInterface.is_primary() :: {:ok :: label, state :: State, }
spec XRInterface.set_anchor_detection_is_enabled(enable :: bool, ) :: {:ok :: label, state :: State, }
spec XRInterface.set_environment_blend_mode(mode :: enum::XRInterface.EnvironmentBlendMode, ) :: {:ok :: label, state :: State, }
spec XRInterface.set_play_area_mode(mode :: enum::XRInterface.PlayAreaMode, ) :: {:ok :: label, state :: State, }
spec XRInterface.set_primary(primary :: bool, ) :: {:ok :: label, state :: State, }
spec XRInterface.start_passthrough() :: {:ok :: label, state :: State, }
spec XRInterface.stop_passthrough() :: {:ok :: label, state :: State, }
spec XRInterface.supports_play_area_mode(mode :: enum::XRInterface.PlayAreaMode, ) :: {:ok :: label, state :: State, }
spec XRInterface.trigger_haptic_pulse(action_name :: String, tracker_name :: StringName, frequency :: float, amplitude :: float, duration_sec :: float, delay_sec :: float, ) :: {:ok :: label, state :: State, }
spec XRInterface.uninitialize() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._end_frame() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_anchor_detection_is_enabled() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_camera_feed_id() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_camera_transform() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_capabilities() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_color_texture() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_depth_texture() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_name() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_play_area() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_play_area_mode() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_projection_for_view(view :: int, aspect :: float, z_near :: float, z_far :: float, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_render_target_size() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_suggested_pose_names(tracker_name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_suggested_tracker_names() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_tracking_status() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_transform_for_view(view :: int, cam_transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_velocity_texture() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_view_count() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._get_vrs_texture() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._initialize() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._is_initialized() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._post_draw_viewport(render_target :: RID, screen_rect :: Rect2, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._pre_draw_viewport(render_target :: RID, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._pre_render() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._process() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._set_anchor_detection_is_enabled(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._set_play_area_mode(mode :: enum::XRInterface.PlayAreaMode, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._supports_play_area_mode(mode :: enum::XRInterface.PlayAreaMode, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._trigger_haptic_pulse(action_name :: String, tracker_name :: StringName, frequency :: float, amplitude :: float, duration_sec :: float, delay_sec :: float, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension._uninitialize() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension.add_blit(render_target :: RID, src_rect :: Rect2, dst_rect :: Rect2i, use_layer :: bool, layer :: int, apply_lens_distortion :: bool, eye_center :: Vector2, k1 :: float, k2 :: float, upscale :: float, aspect_ratio :: float, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension.get_color_texture() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension.get_depth_texture() :: {:ok :: label, state :: State, }
spec XRInterfaceExtension.get_render_target_texture(render_target :: RID, ) :: {:ok :: label, state :: State, }
spec XRInterfaceExtension.get_velocity_texture() :: {:ok :: label, state :: State, }
spec XRNode3D.get_has_tracking_data() :: {:ok :: label, state :: State, }
spec XRNode3D.get_is_active() :: {:ok :: label, state :: State, }
spec XRNode3D.get_pose() :: {:ok :: label, state :: State, }
spec XRNode3D.get_pose_name() :: {:ok :: label, state :: State, }
spec XRNode3D.get_tracker() :: {:ok :: label, state :: State, }
spec XRNode3D.set_pose_name(pose :: StringName, ) :: {:ok :: label, state :: State, }
spec XRNode3D.set_tracker(tracker_name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRNode3D.trigger_haptic_pulse(action_name :: String, frequency :: float, amplitude :: float, duration_sec :: float, delay_sec :: float, ) :: {:ok :: label, state :: State, }
spec XROrigin3D.get_world_scale() :: {:ok :: label, state :: State, }
spec XROrigin3D.is_current() :: {:ok :: label, state :: State, }
spec XROrigin3D.set_current(enabled :: bool, ) :: {:ok :: label, state :: State, }
spec XROrigin3D.set_world_scale(world_scale :: float, ) :: {:ok :: label, state :: State, }
spec XRPose.get_adjusted_transform() :: {:ok :: label, state :: State, }
spec XRPose.get_angular_velocity() :: {:ok :: label, state :: State, }
spec XRPose.get_has_tracking_data() :: {:ok :: label, state :: State, }
spec XRPose.get_linear_velocity() :: {:ok :: label, state :: State, }
spec XRPose.get_name() :: {:ok :: label, state :: State, }
spec XRPose.get_tracking_confidence() :: {:ok :: label, state :: State, }
spec XRPose.get_transform() :: {:ok :: label, state :: State, }
spec XRPose.set_angular_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec XRPose.set_has_tracking_data(has_tracking_data :: bool, ) :: {:ok :: label, state :: State, }
spec XRPose.set_linear_velocity(velocity :: Vector3, ) :: {:ok :: label, state :: State, }
spec XRPose.set_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRPose.set_tracking_confidence(tracking_confidence :: enum::XRPose.TrackingConfidence, ) :: {:ok :: label, state :: State, }
spec XRPose.set_transform(transform :: Transform3D, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_input(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_pose(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_tracker_desc() :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_tracker_hand() :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_tracker_name() :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_tracker_profile() :: {:ok :: label, state :: State, }
spec XRPositionalTracker.get_tracker_type() :: {:ok :: label, state :: State, }
spec XRPositionalTracker.has_pose(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.invalidate_pose(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_input(name :: StringName, value :: Variant, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_pose(name :: StringName, transform :: Transform3D, linear_velocity :: Vector3, angular_velocity :: Vector3, tracking_confidence :: enum::XRPose.TrackingConfidence, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_tracker_desc(description :: String, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_tracker_hand(hand :: enum::XRPositionalTracker.TrackerHand, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_tracker_name(name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_tracker_profile(profile :: String, ) :: {:ok :: label, state :: State, }
spec XRPositionalTracker.set_tracker_type(type :: enum::XRServer.TrackerType, ) :: {:ok :: label, state :: State, }
spec XRServer.add_interface(interface :: XRInterface, ) :: {:ok :: label, state :: State, }
spec XRServer.add_tracker(tracker :: XRPositionalTracker, ) :: {:ok :: label, state :: State, }
spec XRServer.center_on_hmd(rotation_mode :: enum::XRServer.RotationMode, keep_height :: bool, ) :: {:ok :: label, state :: State, }
spec XRServer.find_interface(name :: String, ) :: {:ok :: label, state :: State, }
spec XRServer.get_hmd_transform() :: {:ok :: label, state :: State, }
spec XRServer.get_interface(idx :: int, ) :: {:ok :: label, state :: State, }
spec XRServer.get_interface_count() :: {:ok :: label, state :: State, }
spec XRServer.get_interfaces() :: {:ok :: label, state :: State, }
spec XRServer.get_primary_interface() :: {:ok :: label, state :: State, }
spec XRServer.get_reference_frame() :: {:ok :: label, state :: State, }
spec XRServer.get_tracker(tracker_name :: StringName, ) :: {:ok :: label, state :: State, }
spec XRServer.get_trackers(tracker_types :: int, ) :: {:ok :: label, state :: State, }
spec XRServer.get_world_scale() :: {:ok :: label, state :: State, }
spec XRServer.remove_interface(interface :: XRInterface, ) :: {:ok :: label, state :: State, }
spec XRServer.remove_tracker(tracker :: XRPositionalTracker, ) :: {:ok :: label, state :: State, }
spec XRServer.set_primary_interface(interface :: XRInterface, ) :: {:ok :: label, state :: State, }
spec XRServer.set_world_scale(scale :: float, ) :: {:ok :: label, state :: State, }
spec ZIPPacker.close() :: {:ok :: label, state :: State, }
spec ZIPPacker.close_file() :: {:ok :: label, state :: State, }
spec ZIPPacker.open(path :: String, append :: enum::ZIPPacker.ZipAppend, ) :: {:ok :: label, state :: State, }
spec ZIPPacker.start_file(path :: String, ) :: {:ok :: label, state :: State, }
spec ZIPPacker.write_file(data :: PackedByteArray, ) :: {:ok :: label, state :: State, }
spec ZIPReader.close() :: {:ok :: label, state :: State, }
spec ZIPReader.get_files() :: {:ok :: label, state :: State, }
spec ZIPReader.open(path :: String, ) :: {:ok :: label, state :: State, }
spec ZIPReader.read_file(path :: String, case_sensitive :: bool, ) :: {:ok :: label, state :: State, }
spec abs(x :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec absf(x :: float, ) :: {:ok :: label, state :: State, float}
spec absi(x :: int, ) :: {:ok :: label, state :: State, int}
spec acos(x :: float, ) :: {:ok :: label, state :: State, float}
spec asin(x :: float, ) :: {:ok :: label, state :: State, float}
spec atan(x :: float, ) :: {:ok :: label, state :: State, float}
spec atan2(y :: float, , x :: float, ) :: {:ok :: label, state :: State, float}
spec bezier_derivative(start :: float, , control_1 :: float, , control_2 :: float, , end :: float, , t :: float, ) :: {:ok :: label, state :: State, float}
spec bezier_interpolate(start :: float, , control_1 :: float, , control_2 :: float, , end :: float, , t :: float, ) :: {:ok :: label, state :: State, float}
spec bytes_to_var(bytes :: PackedByteArray, ) :: {:ok :: label, state :: State, Variant}
spec bytes_to_var_with_objects(bytes :: PackedByteArray, ) :: {:ok :: label, state :: State, Variant}
spec ceil(x :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec ceilf(x :: float, ) :: {:ok :: label, state :: State, float}
spec ceili(x :: float, ) :: {:ok :: label, state :: State, int}
spec clamp(value :: Variant, , min :: Variant, , max :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec clampf(value :: float, , min :: float, , max :: float, ) :: {:ok :: label, state :: State, float}
spec clampi(value :: int, , min :: int, , max :: int, ) :: {:ok :: label, state :: State, int}
spec cos(angle_rad :: float, ) :: {:ok :: label, state :: State, float}
spec cosh(x :: float, ) :: {:ok :: label, state :: State, float}
spec cubic_interpolate(from :: float, , to :: float, , pre :: float, , post :: float, , weight :: float, ) :: {:ok :: label, state :: State, float}
spec cubic_interpolate_angle(from :: float, , to :: float, , pre :: float, , post :: float, , weight :: float, ) :: {:ok :: label, state :: State, float}
spec cubic_interpolate_angle_in_time(from :: float, , to :: float, , pre :: float, , post :: float, , weight :: float, , to_t :: float, , pre_t :: float, , post_t :: float, ) :: {:ok :: label, state :: State, float}
spec cubic_interpolate_in_time(from :: float, , to :: float, , pre :: float, , post :: float, , weight :: float, , to_t :: float, , pre_t :: float, , post_t :: float, ) :: {:ok :: label, state :: State, float}
spec db_to_linear(db :: float, ) :: {:ok :: label, state :: State, float}
spec deg_to_rad(deg :: float, ) :: {:ok :: label, state :: State, float}
spec ease(x :: float, , curve :: float, ) :: {:ok :: label, state :: State, float}
spec error_string(error :: int, ) :: {:ok :: label, state :: State, String}
spec exp(x :: float, ) :: {:ok :: label, state :: State, float}
spec floor(x :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec floorf(x :: float, ) :: {:ok :: label, state :: State, float}
spec floori(x :: float, ) :: {:ok :: label, state :: State, int}
spec fmod(x :: float, , y :: float, ) :: {:ok :: label, state :: State, float}
spec fposmod(x :: float, , y :: float, ) :: {:ok :: label, state :: State, float}
spec hash(variable :: Variant, ) :: {:ok :: label, state :: State, int}
spec instance_from_id(instance_id :: int, ) :: {:ok :: label, state :: State, Object}
spec inverse_lerp(from :: float, , to :: float, , weight :: float, ) :: {:ok :: label, state :: State, float}
spec is_equal_approx(a :: float, , b :: float, ) :: {:ok :: label, state :: State, bool}
spec is_finite(x :: float, ) :: {:ok :: label, state :: State, bool}
spec is_inf(x :: float, ) :: {:ok :: label, state :: State, bool}
spec is_instance_id_valid(id :: int, ) :: {:ok :: label, state :: State, bool}
spec is_instance_valid(instance :: Variant, ) :: {:ok :: label, state :: State, bool}
spec is_nan(x :: float, ) :: {:ok :: label, state :: State, bool}
spec is_same(a :: Variant, , b :: Variant, ) :: {:ok :: label, state :: State, bool}
spec is_zero_approx(x :: float, ) :: {:ok :: label, state :: State, bool}
spec lerp(from :: Variant, , to :: Variant, , weight :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec lerp_angle(from :: float, , to :: float, , weight :: float, ) :: {:ok :: label, state :: State, float}
spec lerpf(from :: float, , to :: float, , weight :: float, ) :: {:ok :: label, state :: State, float}
spec linear_to_db(lin :: float, ) :: {:ok :: label, state :: State, float}
spec log(x :: float, ) :: {:ok :: label, state :: State, float}
spec max(arg1 :: Variant, , arg2 :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec maxf(a :: float, , b :: float, ) :: {:ok :: label, state :: State, float}
spec maxi(a :: int, , b :: int, ) :: {:ok :: label, state :: State, int}
spec min(arg1 :: Variant, , arg2 :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec minf(a :: float, , b :: float, ) :: {:ok :: label, state :: State, float}
spec mini(a :: int, , b :: int, ) :: {:ok :: label, state :: State, int}
spec move_toward(from :: float, , to :: float, , delta :: float, ) :: {:ok :: label, state :: State, float}
spec nearest_po2(value :: int, ) :: {:ok :: label, state :: State, int}
spec pingpong(value :: float, , length :: float, ) :: {:ok :: label, state :: State, float}
spec posmod(x :: int, , y :: int, ) :: {:ok :: label, state :: State, int}
spec pow(base :: float, , exp :: float, ) :: {:ok :: label, state :: State, float}
spec print(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec print_rich(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec print_verbose(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec printerr(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec printraw(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec prints(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec printt(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec push_error(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec push_warning(arg1 :: Variant, ) :: {:ok :: label, state :: State, }
spec rad_to_deg(rad :: float, ) :: {:ok :: label, state :: State, float}
spec rand_from_seed(seed :: int, ) :: {:ok :: label, state :: State, PackedInt64Array}
spec randf() :: {:ok :: label, state :: State, float}
spec randf_range(from :: float, , to :: float, ) :: {:ok :: label, state :: State, float}
spec randfn(mean :: float, , deviation :: float, ) :: {:ok :: label, state :: State, float}
spec randi() :: {:ok :: label, state :: State, int}
spec randi_range(from :: int, , to :: int, ) :: {:ok :: label, state :: State, int}
spec randomize() :: {:ok :: label, state :: State, }
spec remap(value :: float, , istart :: float, , istop :: float, , ostart :: float, , ostop :: float, ) :: {:ok :: label, state :: State, float}
spec rid_allocate_id() :: {:ok :: label, state :: State, int}
spec rid_from_int64(base :: int, ) :: {:ok :: label, state :: State, RID}
spec round(x :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec roundf(x :: float, ) :: {:ok :: label, state :: State, float}
spec roundi(x :: float, ) :: {:ok :: label, state :: State, int}
spec seed(base :: int, ) :: {:ok :: label, state :: State, }
spec sign(x :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec signf(x :: float, ) :: {:ok :: label, state :: State, float}
spec signi(x :: int, ) :: {:ok :: label, state :: State, int}
spec sin(angle_rad :: float, ) :: {:ok :: label, state :: State, float}
spec sinh(x :: float, ) :: {:ok :: label, state :: State, float}
spec smoothstep(from :: float, , to :: float, , x :: float, ) :: {:ok :: label, state :: State, float}
spec snapped(x :: Variant, , step :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec snappedf(x :: float, , step :: float, ) :: {:ok :: label, state :: State, float}
spec snappedi(x :: float, , step :: int, ) :: {:ok :: label, state :: State, int}
spec sqrt(x :: float, ) :: {:ok :: label, state :: State, float}
spec step_decimals(x :: float, ) :: {:ok :: label, state :: State, int}
spec str(arg1 :: Variant, ) :: {:ok :: label, state :: State, String}
spec str_to_var(string :: String, ) :: {:ok :: label, state :: State, Variant}
spec tan(angle_rad :: float, ) :: {:ok :: label, state :: State, float}
spec tanh(x :: float, ) :: {:ok :: label, state :: State, float}
spec typeof(variable :: Variant, ) :: {:ok :: label, state :: State, int}
spec var_to_bytes(variable :: Variant, ) :: {:ok :: label, state :: State, PackedByteArray}
spec var_to_bytes_with_objects(variable :: Variant, ) :: {:ok :: label, state :: State, PackedByteArray}
spec var_to_str(variable :: Variant, ) :: {:ok :: label, state :: State, String}
spec weakref(obj :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec wrap(value :: Variant, , min :: Variant, , max :: Variant, ) :: {:ok :: label, state :: State, Variant}
spec wrapf(value :: float, , min :: float, , max :: float, ) :: {:ok :: label, state :: State, float}
spec wrapi(value :: int, , min :: int, , max :: int, ) :: {:ok :: label, state :: State, int}
